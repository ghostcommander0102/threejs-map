{"version":3,"file":"index.modern.js","sources":["../src/Hooks/useMeshFloors/nodesUtils.ts","../src/Hooks/useMeshFloors/getMeshParams.ts","../src/globals.ts","../src/helpers/misc.ts","../src/Hooks/useMeshFloors/getMaterialAndGeometry.ts","../src/Hooks/useMeshFloors/getWallShape.ts","../src/helpers/route.helpers.ts","../src/Hooks/useMeshFloors/loadFloors.ts","../src/helpers/draw.logo.helpers.ts","../src/Hooks/useMeshFloors/index.tsx","../src/defaults.ts","../src/components/SceneComponent/SceneProperties.tsx","../src/components/SceneComponent/CameraProperties.tsx","../src/helpers/easing.ts","../src/components/SceneComponent/RouteTube.tsx","../src/components/SceneComponent/Map.tsx","../src/components/SceneComponent/FloorsMap.tsx","../src/helpers/camera.helpers.ts","../src/components/UIComponent/FloorSelector.tsx","../src/components/Icons/ATM.tsx","../src/components/Icons/DogPoopStation.tsx","../src/components/Icons/Elevator.tsx","../src/components/Icons/FamilyRestroom.tsx","../src/components/Icons/Management.tsx","../src/components/Icons/PlayArea.tsx","../src/components/Icons/Restroom.tsx","../src/components/Icons/Security.tsx","../src/components/UIComponent/index.tsx","../src/components/SceneComponent/MapCenterMarker.tsx","../src/contexts/MeshObjectContextProvider.tsx","../src/components/MapboxForm/MapboxForm.tsx","../src/components/SceneComponent/SceneComponent.tsx","../src/useMapit2Data.ts","../src/MapBox.tsx","../src/mapitApiTypes.ts"],"sourcesContent":["import type {Vector2} from \"three\";\r\nimport {IFloorData} from \"../../types\";\r\n\r\nexport function next_node_name(node_count: number) {\r\n    return 'node-' + node_count;\r\n}\r\n\r\nexport function get_node_name(vertex: Vector2, floor_index: number, floors: IFloorData[], node_count: number): [string , boolean] {\r\n    let exists = false;\r\n    let node_name:string = '-name-not-found-';\r\n    const currentFloor = floors[floor_index];\r\n    if (currentFloor.route_points !== undefined) {\r\n        for (let i = 0; i < currentFloor.route_points.length; i++) {\r\n            if (vertex.x == currentFloor.route_points[i].node.x && vertex.y == currentFloor.route_points[i].node.y) {\r\n                exists = true;\r\n                node_name = currentFloor.route_points[i].name;\r\n                break;\r\n            }\r\n        }\r\n        if (!exists) {\r\n            node_name = next_node_name(node_count);\r\n            // draw_points([{ x: vertex.x, y: vertex.y }]);\r\n        }\r\n    }\r\n    return [node_name, exists];\r\n}","// import {SVGResultPaths} from \"three/examples/jsm/loaders/SVGLoader\";\r\nimport { SVGResultPaths } from \"three-stdlib\";\r\nimport {Graph} from \"ngraph.graph\";\r\nimport {Color, LineCurve, Vector2, Vector3} from \"three\";\r\nimport {get_node_name} from \"./nodesUtils\";\r\nimport {MeshType} from \"./getMaterialAndGeometry\";\r\nimport { IConfig, IFloorData } from \"../../types\";\r\n\r\nexport const getMeshParams = (path: SVGResultPaths, paths: SVGResultPaths[], floors: IFloorData[], floor_index: number, config: IConfig, nodeCount: number, allNodesFloor: Record<string, number>, pathFinderGraph: Graph) => {\r\n    const consolePrefix = 'MeshParams';\r\n    let mesh_type:MeshType = null;\r\n    var layer_color: Color | string = path.color.clone();\r\n    var extrude = 0;\r\n    var z_index = 0;\r\n    var mesh_visible = true;\r\n    var mesh_draw = true;\r\n    var mesh_transparent = false;\r\n    var line_thickness = config.WALL_THICKNESS;\r\n    var interactiveMesh = true;\r\n    var layer_name = path.userData?.node.id;\r\n    if (layer_name != undefined) {\r\n        if (layer_name.startsWith('boundary')) {\r\n            mesh_type = 'boundary';\r\n            layer_color = config.BOUNDARY_COLOR;\r\n            line_thickness = config.BOUNDARY_THICKNESS;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 9;\r\n            }\r\n        } else if (layer_name.startsWith('wall')) {\r\n            mesh_type = 'wall';\r\n            layer_color = config.WALL_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 8.5;\r\n            }\r\n        } else if (layer_name.startsWith('outer-wall')) {\r\n            mesh_type = 'outer-wall';\r\n            layer_color = config.WALL_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                mesh_draw = false;\r\n            }\r\n        } else if (layer_name.startsWith('building-base')) {\r\n            mesh_type = 'building-base';\r\n            layer_color = config.BUILDING_BASE_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 12;\r\n                z_index = -12;\r\n            }\r\n        } else if (layer_name.startsWith('base')) {\r\n            mesh_type = 'base';\r\n            layer_color = config.BASE_COLOR;\r\n        } else if (layer_name.startsWith('store')) {\r\n            mesh_type = 'store';\r\n            layer_color = config.STORE_DEFAULT_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 8;\r\n            }\r\n            if (layer_name.startsWith('store-underlay')) {\r\n                interactiveMesh = false;\r\n            }\r\n        } else if (layer_name.startsWith('big-store')) {\r\n            mesh_type = 'big-store';\r\n            layer_color = config.BIG_STORE_DEFAULT_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 16;\r\n            }\r\n        } else if (layer_name.startsWith('route-path')) {\r\n            mesh_type = 'route-path';\r\n            mesh_draw = false;\r\n            path.subPaths.forEach(subPath => {\r\n                if (subPath.curves.length == 0) {\r\n                    console.warn(consolePrefix + 'Route-path standalone anchor point exists, layer_name: \"%s\"', layer_name);\r\n                }\r\n\r\n                subPath.curves.forEach(curve => {\r\n                    //@ts-ignore\r\n                    const v1:Vector2 = curve.v1;\r\n                    //@ts-ignore\r\n                    const v2:Vector2 = curve.v2;\r\n\r\n                    const [node1_name, exists1] = get_node_name(v1, floor_index, floors, nodeCount);\r\n                    if (!exists1) {\r\n                        floors[floor_index].route_points?.push({\r\n                            name: node1_name,\r\n                            node: new Vector3(v1.x, v1.y, 1)\r\n                        });\r\n                        allNodesFloor[node1_name] = floor_index;\r\n                    }\r\n                    const [node2_name, exists2] = get_node_name(v2, floor_index, floors, nodeCount);\r\n                    if (!exists2) {\r\n                        floors[floor_index].route_points?.push({\r\n                            name: node2_name,\r\n                            node: new Vector3(v2.x, v2.y, 1)\r\n                        });\r\n                        allNodesFloor[node2_name] = floor_index;\r\n                    }\r\n                    pathFinderGraph.addNode(node1_name, { ...v1 });\r\n                    pathFinderGraph.addNode(node2_name, { ...v2 });\r\n\r\n                    // pathFinderGraph.addLink(node1_name, node2_name);\r\n                    pathFinderGraph.addLink(node1_name, node2_name, { weight: v1.distanceTo(v2) });\r\n                    pathFinderGraph.addLink(node2_name, node1_name, { weight: v1.distanceTo(v2) });\r\n                });\r\n            });\r\n        } else if (layer_name.startsWith('escalator-')) {\r\n            mesh_type = 'escalator';\r\n            mesh_visible = false;\r\n        } else if (layer_name.startsWith('kiosk-')) {\r\n            mesh_type = 'kiosk';\r\n            mesh_transparent = true;\r\n        } else if (layer_name.startsWith('amenity-')) {\r\n            mesh_type = 'amenity';\r\n            mesh_transparent = true;\r\n            z_index = 1;\r\n        } else if (layer_name.startsWith('overlay')) {\r\n            mesh_type = 'overlay';\r\n        } else if (layer_name.startsWith('special-shape')) {\r\n            mesh_type = 'special-shape';\r\n        } else {\r\n            extrude = 1;\r\n        }\r\n    } else {\r\n        console.warn(consolePrefix + 'Layer name is undefined, path', path)\r\n    }\r\n\r\n\r\n    /*console.debug({\r\n        mesh_type,\r\n        layer_color,\r\n        extrude,\r\n        z_index,\r\n        mesh_visible,\r\n        mesh_draw,\r\n        mesh_transparent,\r\n        line_thickness,\r\n        interactiveMesh,\r\n        path,\r\n        layer_name,\r\n    })*/\r\n    return {\r\n        mesh_type,\r\n        layer_color,\r\n        extrude,\r\n        z_index,\r\n        mesh_visible,\r\n        mesh_draw,\r\n        mesh_transparent,\r\n        line_thickness,\r\n        interactiveMesh,\r\n        path,\r\n        layer_name,\r\n    }\r\n}","import createGraph from \"ngraph.graph\";\nimport {IRetailer, MapObj} from \"./mapitApiTypes\";\nimport type {Mesh} from \"three\";\nimport path from \"ngraph.path\";\n\nexport const meshByObjectId = new Map<string,Mesh>();\nexport const allMapObjects:string[] = [];\nexport const allIndexedMapObjects = {} as Record<string, MapObj>;\nexport const allIndexedRetailers = {} as Record<string, IRetailer>;\nexport const allNodesFloor = {} as Record<string, number>;\n\n//<{ x:number, y:number }, { weight: number }>\nexport const pathFinderGraph = createGraph();\nexport const ngraphPath = path;\n","import {Color} from \"three\";\n\nexport function hex_to_color(hex_code: string) {\n    return new Color(hex_code.length === 6 ? parseInt('0x' + hex_code, 16) : hex_code);\n}","import {BackSide, Color, DoubleSide, ExtrudeGeometry, Mesh, MeshLambertMaterial, ShapeGeometry, Vector3} from \"three\";\r\nimport {getWallShape} from \"./getWallShape\";\r\n// import {mergeGeometries} from \"three/examples/jsm/utils/BufferGeometryUtils\";\r\nimport { mergeBufferGeometries as mergeGeometries } from \"three-stdlib\";\r\nimport {allMapObjects} from \"../../globals\";\r\nimport {IConfig, IExtMesh, IMeshValues, TMapMode} from \"../../types\";\r\nimport {hex_to_color} from \"../../helpers/misc\";\r\n\r\nimport {IRetailer, MapObj} from \"../../mapitApiTypes\";\r\n\r\n\r\nconst renderOrders = {\r\n    'route-path': 0,\r\n    'escalator': 0,\r\n    'underlay': 0,\r\n    'overlay': 1,\r\n    'building-base': 1,\r\n    'base': 2,\r\n    'store': 3,\r\n    'big-store': 4,\r\n    'kiosk': 5,\r\n    'wall': 6,\r\n    'outer-wall': 7,\r\n    'boundary': 8,\r\n    'amenity': 9,\r\n    'layer-image': 10,\r\n    'layer-text': 11,\r\n    'route-tube': 12,\r\n    'special-shape': 13,\r\n};\r\n\r\nexport type MeshType = keyof typeof renderOrders | null;\r\n\r\nexport function getRenderOrder(mesh_type: MeshType): number {\r\n    if (mesh_type !== undefined && mesh_type !== null && renderOrders[mesh_type] !== undefined) {\r\n        return renderOrders[mesh_type];\r\n    }\r\n    // console.warn(`Unknown mesh type: ${mesh_type}`)\r\n    return 0;\r\n}\r\n\r\nexport const getMaterial = (\r\n    config: IConfig,\r\n    mesh_type: MeshType,\r\n    layer_name: string,\r\n    layer_color: Color | string,\r\n    mesh_transparent: boolean,\r\n    allIndexedMapObjects: Record<string, MapObj>,\r\n) => {\r\n    const material_settings = {\r\n        color: layer_color instanceof Color ? layer_color : hex_to_color(layer_color),\r\n        side: DoubleSide,\r\n        transparent: false,\r\n        depthWrite: true,\r\n        depthTest: true,\r\n        opacity: 1,\r\n    }\r\n    if (config.STYLE == '2D' || mesh_type == 'base' || mesh_type == null) {\r\n        if (mesh_type != 'boundary') {\r\n            material_settings.depthWrite = false;\r\n            material_settings.depthTest = false;\r\n        }\r\n    }\r\n    if (mesh_type == 'overlay') {\r\n        material_settings.color = config.OVERLAY_COLOR;\r\n        material_settings.opacity = config.OVERLAY_OPACITY;\r\n    }\r\n    if (mesh_type && ['store', 'big-store', 'kiosk'].includes(mesh_type) && config.ROLE != 'PORTAL' && allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].transparent == 1) {\r\n        material_settings.opacity = 0;\r\n    }\r\n    var material = new MeshLambertMaterial(material_settings);\r\n    if (mesh_type && ['store', 'big-store', 'kiosk', 'amenity'].includes(mesh_type)) {\r\n        //@ts-ignore\r\n        material.colorDefault = material.color;\r\n        if (allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].bg_color != '') {\r\n            material.color = hex_to_color(allIndexedMapObjects[layer_name].bg_color);\r\n            //@ts-ignore\r\n            material.colorDefault = material.color;\r\n        }\r\n        //@ts-ignore\r\n        material.active = false;\r\n    }\r\n    if (config.ROLE != 'PORTAL' && mesh_transparent) {\r\n        material.opacity = 0;\r\n        material.transparent = true;\r\n    }\r\n\r\n    material.transparent = material.opacity !== 1;\r\n\r\n    return material;\r\n}\r\n\r\nexport const getGeometry = (\r\n    config: IConfig,\r\n    mesh_type: MeshType,\r\n    layer_name: string,\r\n    extrude: number,\r\n    line_thickness: number,\r\n    path: any,\r\n) => {\r\n    const consolePrefix = 'MaterialAndGeometry';\r\n\r\n    let shapes = path.toShapes(true);\r\n\r\n    // shapes.forEach((shape, index) => {\r\n    let extrude_meshes;\r\n    if (config.STYLE == '2D') {\r\n        extrude_meshes = ['building-base'];\r\n    } else {\r\n        extrude_meshes = ['store', 'big-store', 'base', 'building-base'];\r\n    }\r\n\r\n    let wall_meshes = ['wall', 'outer-wall', 'boundary'];\r\n\r\n    var geometry;\r\n    if (mesh_type && extrude_meshes.includes(mesh_type)) {\r\n        geometry = new ExtrudeGeometry(shapes, {\r\n            depth: -extrude,\r\n            bevelEnabled: false,\r\n        });\r\n    } else if (mesh_type && wall_meshes.includes(mesh_type)) {\r\n        //@ts-ignore\r\n        let wall_geometries = [];\r\n        //@ts-ignore\r\n        path.subPaths.forEach(subPath => {\r\n            //@ts-ignore\r\n            subPath.curves.forEach(curve => {\r\n                if (curve.type == 'LineCurve') {\r\n                    let shape_extend = 0;\r\n                    if (mesh_type == 'boundary') {\r\n                        shape_extend = 1;\r\n                    } else if (mesh_type == 'wall') {\r\n                        // shape_extend = 1 / 3;\r\n                    }\r\n                    let shape1 = getWallShape(curve, line_thickness, shape_extend);\r\n                    let wall_geometry = new ExtrudeGeometry(shape1, {\r\n                        depth: -extrude,\r\n                        bevelEnabled: false,\r\n                    });\r\n                    wall_geometries.push(wall_geometry);\r\n                } else {\r\n                    console.warn(consolePrefix + '\"%s\" found in walls. Check layer \"%s\"', curve.type, layer_name);\r\n                }\r\n            });\r\n        });\r\n\r\n        if (wall_geometries.length == 1) {\r\n            //@ts-ignore\r\n            geometry = wall_geometries[0];\r\n        } else if (wall_geometries.length > 1) {\r\n            //@ts-ignore\r\n            geometry = mergeGeometries(wall_geometries);\r\n        } else {\r\n            console.warn(consolePrefix + 'Unneccessary wall exists \"%s\"', layer_name);\r\n        }\r\n    } else {\r\n        geometry = new ShapeGeometry(shapes);\r\n        try {\r\n            //@ts-ignore\r\n            if (geometry.attributes.position.count == 0) {\r\n                console.warn(consolePrefix + 'Unneccessary map shape \"%s\"', layer_name, path.userData.node);\r\n            }\r\n        } catch (e: any) {\r\n            console.error(e.message);\r\n        }\r\n    }\r\n\r\n    return geometry;\r\n}\r\n\r\nexport const getMaterialAndGeometry = (config: IConfig, mesh_type: MeshType, layer_name: string, layer_color: Color | string, mesh_transparent: boolean, mesh_visible: boolean, z_index: number, extrude: number, line_thickness: number, floors: any, floor_index: number, allIndexedMapObjects: Record<string, MapObj>, allIndexedRetailers: Record<string, IRetailer>, path: any, mode?: TMapMode): IMeshValues => {\r\n    \r\n    const material = getMaterial(\r\n        config,\r\n        mesh_type,\r\n        layer_name,\r\n        layer_color,\r\n        mesh_transparent,\r\n        allIndexedMapObjects\r\n    );\r\n\r\n    const geometry = getGeometry(\r\n        config,\r\n        mesh_type,\r\n        layer_name,\r\n        extrude,\r\n        line_thickness,\r\n        path\r\n    );\r\n\r\n    const mesh = new Mesh(geometry, material) as IExtMesh;\r\n    mesh.object_id = layer_name;\r\n    mesh.mesh_type = mesh_type;\r\n    mesh.floor_index = floor_index;\r\n    mesh.visible = mesh_visible;\r\n    mesh.position.z = z_index;\r\n    let storeName = '';\r\n    if (['retail_name', 'retail_text', 'custom_text'].includes(allIndexedMapObjects[layer_name]?.layer_type)) {\r\n        if (allIndexedMapObjects[layer_name].layer_type && allIndexedMapObjects[layer_name].layer_type == 'retail_name' && allIndexedMapObjects[layer_name].retailer_id && allIndexedRetailers[allIndexedMapObjects[layer_name].retailer_id]) {\r\n            storeName = allIndexedRetailers[allIndexedMapObjects[layer_name].retailer_id].retail_name;\r\n        } else if (['retail_text', 'custom_text'].includes(allIndexedMapObjects[layer_name].layer_type)) {\r\n            storeName = allIndexedMapObjects[layer_name].custom_text;\r\n        }\r\n    }\r\n    mesh.userData.storeName = storeName;\r\n    if (config.STYLE == '2D') {\r\n        mesh.renderOrder = getRenderOrder(mesh_type);\r\n        if (layer_name && layer_name.includes('underlay')) {\r\n            mesh.renderOrder = getRenderOrder('underlay');\r\n        }\r\n    }\r\n\r\n    floors[floor_index].objsGroup.add(mesh);\r\n\r\n    if (mesh_type == 'escalator') {\r\n        floors[floor_index].escalatorsNodes[layer_name] = null;\r\n        floors[floor_index].escalatorsObjs.push(mesh);\r\n        mesh.escalator_id = floor_index + '-' + layer_name;\r\n    }\r\n\r\n    if (mesh_type && ['store', 'big-store', 'kiosk', 'amenity'].includes(mesh_type)) {\r\n        //@ts-ignore\r\n        mesh.route_node_id = null;\r\n\r\n        // add floor_index to the kiosks\r\n        if (allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].layer_type == 'kiosk') {\r\n            var kiosk_id = allIndexedMapObjects[layer_name].kiosk_id;\r\n            /*if (kiosk_id != null && ngCtrlElem.scope().kiosks[kiosk_id]) {\r\n                ngCtrlElem.scope().kiosks[kiosk_id].floor_index = floor_index;\r\n            }*/\r\n        }\r\n\r\n        if (config.ROLE == 'PORTAL') {\r\n            allMapObjects.push(layer_name);\r\n        }\r\n        if (\r\n            (config.ROLE == 'PORTAL') ||\r\n            (config.ROLE != 'PORTAL' && mesh_type == 'kiosk') ||\r\n            (config.ROLE != 'PORTAL' && config.ROLE != 'PORTAL_KIOSK' && allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].obj_type == 'retailer' && allIndexedMapObjects[layer_name].retailer_id != null) ||\r\n            (config.ROLE != 'PORTAL' && config.ROLE != 'PORTAL_KIOSK' && allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].layer_type == 'amenity' && allIndexedMapObjects[layer_name].value != '') ||\r\n            (mode === 'edit' && (allIndexedMapObjects[layer_name]) && (allIndexedMapObjects[layer_name].obj_type === 'special' || allIndexedMapObjects[layer_name].obj_type === 'custom')) ||\r\n            (mode === 'edit' && ['store', 'kiosk', 'amenity'].includes(mesh.mesh_type?? ''))\r\n        ) {\r\n            // if (interactiveMesh) {\r\n            floors[floor_index].interactiveObjs.push(mesh);\r\n            // }\r\n        }\r\n    }\r\n\r\n    // if (['store', 'big-store'].includes(mesh_type as string)) {\r\n    //     console.debug({allIndexedMapObjects: allIndexedMapObjects[layer_name]});\r\n    // }\r\n\r\n    return {\r\n        mesh,\r\n        geometry,\r\n        material,\r\n        object_id: layer_name,\r\n        mesh_type,\r\n        floor_index,\r\n        visible: mesh_visible,\r\n        renderOrder: mesh.renderOrder,\r\n    }\r\n    // });\r\n\r\n}","import {LineCurve, Shape, Vector3} from \"three\";\r\n\r\nexport function getWallShape(curve: LineCurve, thickness = 3, shape_extend = 0) {\r\n    let wallShape = new Shape();\r\n    let point1 = new Vector3(curve.v1.x, curve.v1.y, 0);\r\n    let point2 = new Vector3(curve.v2.x, curve.v2.y, 0);\r\n\r\n    // form help and formulas in /assets/threejs/help/\r\n    let dir = point2.clone().sub(point1).normalize().multiplyScalar(-thickness * shape_extend);\r\n    let point1_center = point1.clone().add(dir);\r\n\r\n    dir = point1.clone().sub(point2).normalize().multiplyScalar(-thickness * shape_extend);\r\n    let point2_center = point2.clone().add(dir);\r\n\r\n    let distance = point1.distanceTo(point2_center);\r\n\r\n    let point1_above = {\r\n        x: point1_center.x - (point2.y - point1_center.y) * thickness / distance,\r\n        y: point1_center.y - (point1_center.x - point2.x) * thickness / distance\r\n    };\r\n    let point1_below = {\r\n        x: point1_center.x + (point2.y - point1_center.y) * thickness / distance,\r\n        y: point1_center.y + (point1_center.x - point2.x) * thickness / distance\r\n    };\r\n\r\n    let point2_above = {\r\n        x: point2_center.x + (point1.y - point2_center.y) * thickness / distance,\r\n        y: point2_center.y + (point2_center.x - point1.x) * thickness / distance\r\n    };\r\n    let point2_below = {\r\n        x: point2_center.x - (point1.y - point2_center.y) * thickness / distance,\r\n        y: point2_center.y - (point2_center.x - point1.x) * thickness / distance\r\n    };\r\n\r\n    wallShape.moveTo(point1_above.x, point1_above.y);\r\n    wallShape.lineTo(point1_below.x, point1_below.y);\r\n    wallShape.lineTo(point2_below.x, point2_below.y);\r\n    wallShape.lineTo(point2_above.x, point2_above.y);\r\n\r\n    // shape.moveTo(point1_above.x, point1_above.y);\r\n    // shape.bezierCurveTo(point1_above.x, point1_above.y, point1_long_center.x, point1_long_center.y, point1_below.x, point1_below.y);\r\n    // shape.lineTo(point2_below.x, point2_below.y);\r\n    // shape.bezierCurveTo(point2_below.x, point2_below.y, point2_long_center.x, point2_long_center.y, point2_above.x, point2_above.y);\r\n\r\n    return wallShape;\r\n}","import {\n    BufferGeometry,\n    CanvasTexture,\n    Color,\n    CurvePath,\n    DoubleSide,\n    LineCurve3,\n    Mesh,\n    MeshBasicMaterial,\n    Object3D,\n    Raycaster,\n    Scene,\n    TubeGeometry,\n    Vector3,\n} from \"three\";\nimport {getRenderOrder} from \"Hooks/useMeshFloors/getMaterialAndGeometry\";\nimport {allNodesFloor} from \"../globals\";\nimport * as ngraphPath from \"ngraph.path\";\nimport {PathFinder} from \"ngraph.path\";\nimport {IRetailer, MapObj} from \"../mapitApiTypes\";\nimport {IExtMesh, IFloorData} from \"../types\";\nimport {Graph, Node} from \"ngraph.graph\";\n\nconst consolePrefix = 'ROUTE: ';\nlet route_exists = null;\nlet activeMapObjectName: string | null = null;\n\nfunction makeObjectActive(object_id: string | null = null, accentColor: string | Color, scene: Scene) {\n    clearActiveEffect(scene);\n    if (object_id != null) activeMapObjectName = object_id;\n    let obj = scene.getObjectByProperty('object_id', activeMapObjectName as string) as IExtMesh;\n    // obj.material.color = config.ACCENT_COLOR;\n    //@ts-ignore\n    obj.material.color = new Color(`#${accentColor}`);\n    //@ts-ignore\n    obj.material.active = true;\n    return obj;\n}\n\nfunction clearActiveEffect(scene: Scene) {\n    if (activeMapObjectName) {\n        let obj = scene.getObjectByProperty('object_id', activeMapObjectName) as IExtMesh;\n        //@ts-ignore\n        obj.material.color = { ...obj.material.colorDefault };\n        //@ts-ignore\n        obj.material.active = false;\n        activeMapObjectName = null;\n    }\n}\n\nexport function delete_route_path(floors: IFloorData[]) {\n    for (let floor_index = 0; floor_index < floors.length; floor_index++) {\n        const floor = floors[floor_index];\n        floor.route_active = false;\n\n        if (floor.route_tube != null) {\n            floor.route_tube.geometry.dispose();\n            //@ts-ignore\n            floor.route_tube.material.dispose();\n            floor.objsGroup?.remove(floor.route_tube);\n        }\n\n        floor.route_tube = undefined;\n        floor.route_texture = null;\n        floor.escalatorMeshes = [];\n    }\n}\n\nexport function create_route(from_mesh_object_id: string, to_mesh_object_id: string, scene: Scene, floors: IFloorData[], escalator_nodes: string[], pathFinderGraph: Graph, style: string): Mesh[] {\n    if (from_mesh_object_id === to_mesh_object_id) {\n        return [];\n    }\n    const routePaths = create_route_paths(from_mesh_object_id, to_mesh_object_id, scene, allNodesFloor, escalator_nodes, floors, pathFinderGraph, style);\n    if (!routePaths.length) console.warn(consolePrefix + 'No route found in between \"%s\" and \"%s\"', from_mesh_object_id, to_mesh_object_id);\n\n    return routePaths;\n}\n\nfunction create_route_paths(from_mesh_object_id: string, to_mesh_object_id: string, scene: Scene, allNodesFloor: Record<string, number>, escalator_nodes: any[] , floors: IFloorData[], pathFinderGraph: Graph, style: string, routeCallback = null) {\n    // TODO: remove scene dependency and scene.getObjectByProperty\n    const routePaths = [] as any[];\n    delete_route_path(floors);\n    let from_obj = scene.getObjectByProperty('object_id', from_mesh_object_id) as IExtMesh;\n    let to_obj = scene.getObjectByProperty('object_id', to_mesh_object_id) as IExtMesh;\n    let from_node_name = from_obj.route_node_id;\n    let to_node_name = to_obj.route_node_id;\n\n    // console.log({\n    //     from_mesh_object_id,\n    //     to_mesh_object_id,\n    //     from_obj,\n    //     to_obj,\n    //     from_node_name,\n    //     to_node_name,\n    // })\n\n    // from_node_name = 'node-147';\n    // to_node_name = 'node-221';\n\n    if (!from_node_name) console.error(consolePrefix + 'Route Anchor point missing for \"%s\"', from_mesh_object_id);\n    if (!to_node_name) console.error(consolePrefix + 'Route Anchor point missing for \"%s\"', to_mesh_object_id);\n\n    if (!from_node_name || !to_node_name) return routePaths;\n\n    const from_route_floor_index = from_obj.floor_index;\n    const to_route_floor_index = to_obj.floor_index;\n\n    const aStarPathFinder = ngraphPath.aStar(pathFinderGraph, {\n        distance: function (fromNode, toNode, link) {\n            if (link.data) return link.data.weight;\n            return false;\n        },\n        //@ts-ignore\n        debug: true,\n    });\n    const routeNodes = get_route_nodes(from_node_name, to_node_name, aStarPathFinder);\n    const routeNodesEsclators = [];\n    if (!routeNodes) {\n        return [];\n    }\n    const floor_routes = [];\n\n    for (let index = 0; index < routeNodes.length; index++) {\n        const routeNode = routeNodes[index];\n        if (floor_routes[allNodesFloor[routeNode.id]]) {\n            floor_routes[allNodesFloor[routeNode.id]].push(routeNode);\n        } else {\n            floor_routes[allNodesFloor[routeNode.id]] = [routeNode];\n        }\n\n        if (escalator_nodes.includes(routeNode.id) && escalator_nodes.includes(routeNodes[index - 1].id) && escalator_nodes.includes(routeNodes[index + 1].id)) {\n            // don't consider these middle escalators nodes\n        } else {\n            routeNodesEsclators.push(routeNode);\n        }\n    }\n    for (let index = 0; index < routeNodesEsclators.length; index++) {\n        const routeNode = routeNodesEsclators[index];\n        if (\n            allNodesFloor[routeNodesEsclators[0].id] !== allNodesFloor[routeNodesEsclators[routeNodesEsclators.length - 1].id] // proceed only if the start node and end node is not on the same floor\n            && escalator_nodes.includes(routeNode.id) // proceed only if the current node is a escalator\n        ) {\n            const escalator_id = Object.keys(floors[allNodesFloor[routeNode.id]].escalatorsNodes as object).find(key => floors[allNodesFloor[routeNode.id]]?.escalatorsNodes?.[key] === routeNode.id);\n            const escalator_mesh: IExtMesh = scene.getObjectByProperty('escalator_id', allNodesFloor[routeNode.id] + '-' + escalator_id) as IExtMesh;\n            let goToFloor = null;\n\n            if (allNodesFloor[routeNode.id] !== allNodesFloor[routeNodesEsclators[index + 1].id] && escalator_nodes.includes(routeNodesEsclators[index + 1].id)) {\n                goToFloor = {\n                    index: allNodesFloor[routeNodesEsclators[index + 1].id],\n                    direction: 'Next',\n                };\n            }\n\n            if (allNodesFloor[routeNode.id] !== allNodesFloor[routeNodesEsclators[index - 1].id] && escalator_nodes.includes(routeNodesEsclators[index - 1].id)) {\n                goToFloor = {\n                    index: allNodesFloor[routeNodesEsclators[index - 1].id],\n                    direction: 'Previous',\n                };\n            }\n\n            if (goToFloor && escalator_mesh) {\n                escalator_mesh.goToFloor = goToFloor;\n                //@ts-ignore\n                floors[allNodesFloor[routeNode.id]]?.escalatorMeshes?.push(escalator_mesh);\n            }\n        }\n\n    }\n    for (let floor_index = 0; floor_index < floor_routes.length; floor_index++) {\n        const floor_route = floor_routes[floor_index];\n        if (floor_route && floor_route.length > 1) {\n            const routePath = create_route_path(floor_route, floor_index, floors, style);\n            routePaths[floor_index] = routePath;\n\n            floors[floor_index].route_active = true;\n            floors[floor_index].routeMeshes = [ routePath ];\n            if (floor_index === from_route_floor_index) {\n                //@ts-ignore\n                floors[floor_index]?.routeMeshes?.push(from_obj);\n            }\n            if (floor_index === to_route_floor_index) {\n                //@ts-ignore\n                floors[floor_index]?.routeMeshes?.push(to_obj);\n            }\n        }\n    }\n\n    // setTimeout(function () {\n    //     //TODO openFloorMap functionality\n    //     // openFloorMap(from_route_floor_index);\n    // });\n\n    return routePaths;\n}\n\nfunction create_route_path(\n    routeNodes: Node<any>[],\n    floor_index: number,\n    floors: IFloorData[],\n    style = '2D',// config.STYLE\n) {\n    let distance = 0;\n    let route_path = new CurvePath<Vector3>();\n    for (let i = 1; i < routeNodes.length; i++) {\n        let from_node = new Vector3(routeNodes[i - 1].data.x, routeNodes[i - 1].data.y, 0);\n        let to_node = new Vector3(routeNodes[i].data.x, routeNodes[i].data.y, 0);\n        route_path.add(new LineCurve3(from_node, to_node));\n        distance += from_node.distanceTo(to_node);\n    };\n    var geometry: TubeGeometry = new TubeGeometry(route_path, 400, 6, 8);\n    //@ts-ignore\n    geometry = new BufferGeometry().copy(geometry);\n    var material = new MeshBasicMaterial({\n        map: get_route_texture(distance, floor_index, floors),\n        transparent: true,\n        side: DoubleSide,\n        depthTest: false,\n        depthWrite: false,\n    });\n\n    let route_tube = new Mesh(geometry, material) as IExtMesh;\n    if (style == '2D') {\n        route_tube.position.z = -10;\n    }\n    route_tube.position.z = 0;\n    route_tube.renderOrder = getRenderOrder('route-tube');\n    route_tube.mesh_type = 'route-tube';\n    //@ts-ignore\n    route_tube.geometry.setDrawRange(0, route_tube.geometry.index.count);\n    // draw_route_tube(route_tube, geometry.attributes.position.count, floors);\n\n    floors[floor_index].route_tube = route_tube;\n    floors[floor_index].objsGroup?.add(route_tube);\n\n    return route_tube;\n}\n\nfunction get_route_nodes(from_node_name: string, to_node_name: string, aStarPathFinder: PathFinder<any>) {\n    let routeNodes = aStarPathFinder.find(to_node_name, from_node_name);\n    if (routeNodes.length == 0) return false;\n    return routeNodes;\n}\n\n//TODO\nfunction get_nodes_distance(from_node_name: string, to_node_name: string, aStarPathFinder: PathFinder<any>, pathFinderGraph: Graph) {\n    let distance = 0;\n\n    let routeNodes = aStarPathFinder.find(to_node_name, from_node_name);\n    if (routeNodes.length == 0) return false;\n\n    for (let i = 1; i < routeNodes.length; i++) {\n        let link = pathFinderGraph.getLink(routeNodes[i - 1].id, routeNodes[i].id);\n        distance += link?.data.weight || 0;\n    };\n    return distance;\n}\n\nfunction draw_route_tube(route_tube: IExtMesh, total_faces: number) {\n    //@ts-ignore\n    route_tube.geometry.setDrawRange(0, total_faces);\n    /*createjs.Ticker.framerate = 60;\n    createjs.Tween.get({ x: 0 },\n        {\n            onChange: function (event) {\n                route_tube.geometry.setDrawRange(0, event.target.target.x);\n            },\n            onComplete: function () {\n                animate_route_path(floors);\n            }\n        })\n        .to({ x: total_faces }, 1000, createjs.Ease.cubicInOut);\n    */\n}\n\nfunction get_route_texture(distance: number, floor_index: number, floors: IFloorData[]) {\n    let canvas = document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    if (ctx) {\n        ctx.canvas.width = distance;\n        ctx.canvas.height = 80;\n\n        ctx.fillStyle = \"#4ea5ff\";\n        ctx.fillRect(0, 0, distance, 80);\n\n        let grd_width = 0.1 * distance;\n        const min_grd_width = 60;\n        const max_grd_width = 120;\n        if (grd_width < min_grd_width) grd_width = min_grd_width;\n        if (grd_width > max_grd_width) grd_width = max_grd_width;\n\n        let grd = ctx.createLinearGradient(0, 0, grd_width, 0);\n        grd.addColorStop(0, \"#4ea5ff\");\n        grd.addColorStop(0.4, \"white\");\n        grd.addColorStop(0.6, \"white\");\n        grd.addColorStop(1, \"#4ea5ff\");\n\n        ctx.fillStyle = grd;\n        ctx.fillRect(10, 0, grd_width, 80);\n\n    let route_texture = new CanvasTexture(ctx.canvas);\n    route_texture.offset.x = 1;\n    route_texture.colorSpace = 'srgb';\n\n        floors[floor_index].route_texture = route_texture;\n\n        return route_texture;\n    } else {\n        return undefined;\n    }\n}\n\n//TODO\nfunction animate_route_path(floors: IFloorData[]) {\n    /*floors.forEach(floor => {\n        if (floor.route_texture != null) {\n            createjs.Ticker.framerate = 60;\n            createjs.Tween.get(floor.route_texture.offset, { loop: true })\n                .to({ x: -1 }, 2000, createjs.Ease.cubicInOut)\n        }\n    });*/\n}\n\nexport function assign_route_nodes_to_stores(\n    floor_index: number,\n     floors: IFloorData[],\n     allIndexedMapObjects: Record<string, MapObj>,\n     allIndexedRetailers: Record<string, IRetailer>,\n     allNodesFloor: Record<string, number>,\n     escalator_nodes: string[],\n     find_store_node_raycaster: Raycaster,\n     role: string, //config.ROLE\n     ) {\n    const result = new Map();\n    const currentFloor = floors[floor_index];\n    if (currentFloor && currentFloor.route_points) {\n        currentFloor.route_points.forEach(point => {\n            let origin_point = new Vector3(point.node.x, point.node.y, -10);\n            let target_direction = new Vector3(0, 0, 1);\n            find_store_node_raycaster.set(origin_point, target_direction);\n            //@ts-ignore\n            var storeIntersects = find_store_node_raycaster.intersectObjects(floors[floor_index].interactiveObjs);\n            if (storeIntersects.length) {\n                //@ts-ignore\n                storeIntersects[0].object.route_node_id = point.name;\n                //@ts-ignore\n                result.set(storeIntersects[0].object.object_id, point.name);\n                if (role != 'PORTAL') {\n                    //@ts-ignore\n                    var retailer_id = allIndexedMapObjects[storeIntersects[0].object.object_id].retailer_id;\n                    if (retailer_id != null && allIndexedRetailers[retailer_id]) {\n                        var retailer_index = allIndexedRetailers[retailer_id].index;\n                        // ngCtrlElem.scope().allRetailers[retailer_index].has_route = true;\n                    }\n                }\n            }\n\n            var escalatorIntersects = find_store_node_raycaster.intersectObjects(floors[floor_index].escalatorsObjs as Object3D[]);\n            if (escalatorIntersects.length) {\n                const obj: IExtMesh = escalatorIntersects[0].object as IExtMesh;\n                let escalator_obj_id = obj.object_id;\n                const escalatorNodes = floors[floor_index].escalatorsNodes;\n                if (escalatorNodes) {\n                    escalatorNodes[escalator_obj_id as string] = point.name;\n                    allNodesFloor[point.name] = floor_index;\n                    escalator_nodes.push(point.name);\n                }\n            }\n        });\n    }\n    return result;\n}\n\nexport function linkFloorEscalators(floors: IFloorData[], pathFinderGraph: Graph) {\n    // console.log('linkFloorEscalators', floors)\n    if (floors.length > 1) {\n        for(let i=0; i < (floors.length-1); i++) {\n            // console.log('floors[i]',i, floors[i])\n            const floor_escalators = floors[i].escalatorsNodes;\n            // console.log('floor_escalators', floor_escalators);\n            Object.keys(floor_escalators as object).forEach(escalator => {\n                if (floors[i].escalatorsNodes?.[escalator] != null && floors[i+1].escalatorsNodes?.[escalator] != null) {\n                    // console.log('escalator, add link from floor %d to %d (and back)', i, i+1, escalator)\n                    const nodeIdFrom = floors[i].escalatorsNodes?.[escalator];\n                    const nodeIdTo = floors[i+1].escalatorsNodes?.[escalator];\n                    if (nodeIdFrom && nodeIdTo) {\n                        pathFinderGraph.addLink(nodeIdFrom, nodeIdTo, { weight: 1 });\n                        pathFinderGraph.addLink(nodeIdTo, nodeIdFrom, { weight: 1 });\n                    }\n                } else {\n                    // console.error(consolePrefix + 'Escalator route anchor point missing \"%s\"', escalator);\n                }\n            })\n        }\n    }\n}\n\nexport function make_amenity_route(kiosk_obj_name: string, amenity_type: string, scene: Scene, allIndexedMapObjects: Record<string, MapObj>, pathFinderGraph: Graph, floors: IFloorData[], escalator_nodes: string[], style: string ): Mesh[] {\n    let kiosk_obj: IExtMesh = scene.getObjectByProperty('object_id', kiosk_obj_name) as IExtMesh;\n    if (!kiosk_obj) return [];\n    let kiosk_node_name = kiosk_obj.route_node_id;\n\n    var to_obj_name = null;\n\n    var shortest_distance = 9999;\n    // var map_objs = ngCtrlElem.scope().amenities[amenity_type];\n    const map_objs: string[] = [];\n    for(let key in allIndexedMapObjects) {\n        const mapObject = allIndexedMapObjects[key];\n        if (\n            mapObject.layer_type === 'amenity'\n            && mapObject.obj_type === 'special'\n            && mapObject.value === amenity_type\n        ) {\n            map_objs.push(key);\n        }\n    }\n    map_objs.forEach((amenity_obj_name: string, index: number) => {\n        let amenity_obj: IExtMesh = scene.getObjectByProperty('object_id', amenity_obj_name) as IExtMesh;\n\n    const aStarPathFinder = ngraphPath.aStar(pathFinderGraph, {\n        distance: function (fromNode, toNode, link) {\n            if (link.data) return link.data.weight;\n            return false;\n        },\n        //@ts-ignore\n        debug: true,\n    });\n\n    if (amenity_obj) {\n        var amenity_node_name = amenity_obj.route_node_id;\n        try {\n            var route_distance = get_nodes_distance(kiosk_node_name ?? '', amenity_node_name ?? '', aStarPathFinder, pathFinderGraph);\n            if (route_distance && route_distance < shortest_distance) {\n                shortest_distance = route_distance;\n                to_obj_name = amenity_obj_name;\n            }\n        } catch(e: any) {\n            console.warn(`Amenity Path: ${e.message}`);\n        }\n    }\n    });\n    return create_route(kiosk_obj_name, to_obj_name?? '', scene, floors, escalator_nodes, pathFinderGraph, style);\n}\n\n","import {getMeshParams} from \"./getMeshParams\";\r\n// import {SVGResult} from \"three/examples/jsm/loaders/SVGLoader\";\r\nimport { SVGResult } from \"three-stdlib\";\r\nimport {IConfig, IFloorData, IMeshValues, TMapMode} from \"../../types\";\r\nimport {allIndexedMapObjects, allIndexedRetailers, allNodesFloor, pathFinderGraph} from \"../../globals\";\r\nimport {getMaterialAndGeometry} from \"./getMaterialAndGeometry\";\r\nimport {Raycaster} from \"three\";\r\nimport {assign_route_nodes_to_stores, linkFloorEscalators} from \"helpers/route.helpers\";\r\n\r\n// TODO: get rid of this global variable\r\nlet node_count = 0;\r\n\r\nexport function loadFloors(floors:IFloorData[], config:IConfig, results:SVGResult[], mode?: TMapMode) {\r\n    const GeometriesAndMaterials: Array<IMeshValues[]> = [];\r\n    // let floor = floors[floors_loaded];\r\n    // let floor_index = floors_loaded;\r\n    const escalator_nodes: string[] = [];\r\n    results.forEach((result, floor_index) => {\r\n        if (result.paths && result.paths.length) {\r\n            const pathIds = [];\r\n            for (let i = 0; i < result.paths.length; i++) {\r\n                pathIds.push(result.paths[i]?.userData?.node.id);\r\n            }\r\n            const paths = result.paths;\r\n            for (let i = 0; i < paths.length; i++) {\r\n                const {\r\n                    mesh_type,\r\n                    layer_color,\r\n                    extrude,\r\n                    z_index,\r\n                    mesh_visible,\r\n                    mesh_draw,\r\n                    mesh_transparent,\r\n                    line_thickness,\r\n                    interactiveMesh,\r\n                    path,\r\n                    layer_name,\r\n                } = getMeshParams(\r\n                    paths[i],\r\n                    paths,\r\n                    floors,\r\n                    floor_index,\r\n                    config,\r\n                    ++node_count,\r\n                    //@ts-ignore\r\n                    allNodesFloor,\r\n                    pathFinderGraph\r\n                );\r\n\r\n                if (mesh_draw) {\r\n                    const meshParams = getMaterialAndGeometry(\r\n                        config,\r\n                        mesh_type,\r\n                        layer_name,\r\n                        layer_color,\r\n                        mesh_transparent,\r\n                        mesh_visible,\r\n                        z_index,\r\n                        extrude,\r\n                        line_thickness,\r\n                        floors,\r\n                        floor_index,\r\n                        allIndexedMapObjects,\r\n                        allIndexedRetailers,\r\n                        path,\r\n                        mode\r\n                    );\r\n                    if (!GeometriesAndMaterials[floor_index]) {\r\n                        GeometriesAndMaterials[floor_index] = [];\r\n                    }\r\n\r\n                    GeometriesAndMaterials[floor_index].push(meshParams);\r\n                }\r\n            }\r\n            const findStoreNodeRaycaster = new Raycaster();\r\n            const routeNodeIds = assign_route_nodes_to_stores(\r\n                floor_index,\r\n                floors,\r\n                allIndexedMapObjects,\r\n                allIndexedRetailers,\r\n                allNodesFloor,\r\n                escalator_nodes,\r\n                findStoreNodeRaycaster,\r\n                config.ROLE\r\n            );\r\n\r\n            if (routeNodeIds.size && GeometriesAndMaterials[floor_index].length) {\r\n                for (let i = 0; i < GeometriesAndMaterials[floor_index].length; i++) {\r\n                    if (routeNodeIds.has(GeometriesAndMaterials[floor_index][i].mesh.object_id)) {\r\n                        GeometriesAndMaterials[floor_index][i].mesh.route_node_id = routeNodeIds.get(GeometriesAndMaterials[floor_index][i].mesh.object_id);\r\n                    }\r\n                }\r\n            }\r\n\r\n            linkFloorEscalators(floors, pathFinderGraph);\r\n\r\n        }\r\n    })\r\n\r\n    return { GeometriesAndMaterials, graph: pathFinderGraph, escalator_nodes};\r\n}","import { allIndexedMapObjects } from \"../globals\";\nimport { DoubleSide, MeshPhongMaterial, Mesh, CanvasTexture, MeshBasicMaterial, PlaneGeometry, Vector3, BufferGeometry, Box3, Color, SphereGeometry } from \"three\";\nimport type { Object3D, Scene } from \"three\";\n// import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { TextGeometry } from \"three-stdlib\";\nimport {IExtMesh} from \"../types\";\nimport {getRenderOrder} from \"../Hooks/useMeshFloors/getMaterialAndGeometry\";\nimport {hex_to_color} from \"./misc\";\nimport { IRetailer, MapObj } from \"../mapitApiTypes\";\n\n\nexport function drawTextLogoStoreOnMap(allNonIndexedMapObjects: Record<any, any>[], scene: Scene, textLogoNamePrefix: string, allIndexedMapObjects: Record<string, MapObj>, allIndexedRetailers: Record<string, IRetailer>, config: Record<any, any>, myFont: any, floors: Record<any, any>[]) {\n    for (let textLogoLayerAddedIndex = 0; textLogoLayerAddedIndex < allNonIndexedMapObjects.length; textLogoLayerAddedIndex++) {\n        addTextOrLogoOnStore(allNonIndexedMapObjects[textLogoLayerAddedIndex], scene, textLogoNamePrefix, allIndexedMapObjects, allIndexedRetailers, config, myFont, floors);\n    }\n}\n\nfunction addTextOrLogoOnStore(map_obj: any, scene: Scene, textLogoNamePrefix: string, allIndexedMapObjects: Record<string, MapObj>, allIndexedRetailers: Record<any, any>, config: Record<any, any>, myFont: any, floors: Record<any, any>[]) {\n    //@ts-ignore\n    let mesh = scene.getObjectByProperty('object_id', map_obj.map_obj_name);\n    if (mesh) {\n        //@ts-ignore\n        add_store_name_logo(mesh, textLogoNamePrefix, allIndexedMapObjects, allIndexedRetailers, config, myFont, floors, scene);\n    }\n}\n\nfunction deleteMeshByObjectID(object_id: string, scene: Scene, floors: Record<any, any>) {\n    if (object_id) {\n        let mesh = scene.getObjectByProperty('object_id', object_id);\n        if (mesh) {\n            //@ts-ignore\n            mesh.geometry.dispose();\n            //@ts-ignore\n            mesh.material.dispose();\n            //@ts-ignore\n            floors[mesh.floor_index].objsGroup.remove(mesh);\n        }\n    }\n}\n\nfunction getCenterPoint(mesh: Mesh) {\n    var mesh_center_point = new Vector3();\n    getMeshGroupBoundingBox(mesh).getCenter(mesh_center_point);\n    return mesh_center_point;\n}\n\nfunction getMeshSize(mesh: Mesh) {\n    var point = new Vector3();\n    //@ts-ignore\n    getMeshGroupBoundingBox(mesh).getSize(point);\n    return point;\n}\n\nexport function getMeshGroupBoundingBox(mesh: Mesh | Array<Mesh>) {\n    if (!Array.isArray(mesh)) {\n        mesh = [mesh];\n    }\n    const box = mesh.reduce((box, obj) => {\n        if (!obj.geometry.boundingBox) {\n            obj.geometry.computeBoundingBox();\n        }\n        //@ts-ignore\n        box.union(obj.geometry.boundingBox);\n        return box;\n    }, new Box3());\n    return box;\n}\n\nfunction layer_text_logo_position(mesh: Mesh, newMeshPos: Vector3, mesh_size: Vector3, newMesh: Mesh, allIndexedMapObjects: Record<any, any>) {\n    const object_id = (mesh as IExtMesh).object_id;\n    if (!object_id) return;\n    return layer_text_logo_position_by_id(object_id, newMeshPos, mesh_size, newMesh, allIndexedMapObjects);\n}\nfunction layer_text_logo_position_by_id(object_id: string, newMeshPos: Vector3, mesh_size: Vector3, newMesh: Mesh, allIndexedMapObjects: Record<any, any>) {\n    let map_obj = allIndexedMapObjects[object_id];\n\n    let offsetX = parseInt(map_obj.offsetX);\n    let offsetY = parseInt(map_obj.offsetY);\n\n    newMeshPos.z = -mesh_size.z;\n\n    //@ts-ignore\n    newMesh.obj_angle = parseInt(map_obj.rotate); //-180 to 180\n    //@ts-ignore\n    newMesh.rotateZ(newMesh.obj_angle * Math.PI / 180);\n\n    newMesh.scale.y *= -1;\n\n    newMeshPos.x += offsetX;\n    newMeshPos.y += offsetY;\n\n    newMesh.position.set(newMeshPos.x, newMeshPos.y, newMeshPos.z + 1);\n}\n\n/*function add_store_name_logo(mesh: Mesh, textLogoNamePrefix: string, allIndexedMapObjects: Record<any, any>, allIndexedRetailers: Record<any, any>, config: Record<any, any>, myFont: any, floors: Record<any, any>, scene: Scene) {\n    //@ts-ignore\n    var new_object_id = textLogoNamePrefix + mesh.object_id;\n    deleteMeshByObjectID(new_object_id, scene, floors);\n\n    var mesh_center_point = getCenterPoint(mesh);\n    var mesh_size = getMeshSize(mesh);\n    //@ts-ignore\n    let map_obj = allIndexedMapObjects[mesh.object_id];\n\n    if (['retail_name', 'retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n        let text = '';\n        if (map_obj.layer_type == 'retail_name' && map_obj.retailer_id && allIndexedRetailers[map_obj.retailer_id]) {\n            text = allIndexedRetailers[map_obj.retailer_id].retail_name;\n        } else if (['retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n            text = map_obj.custom_text;\n        } else {\n            return false;\n        }\n\n        let text_color = config.STORE_TEXT_COLOR;\n        if (map_obj.text_color != null) {\n            text_color = hex_to_color(map_obj.text_color);\n        }\n\n        const material_settings = {\n            color: text_color,\n            transparent: true,\n            side: DoubleSide,\n            depthWrite: false,\n            depthTest: false,\n        };\n        let text_material = new MeshPhongMaterial(material_settings);\n        let text_geometry = new TextGeometry(text, {\n            font: myFont,\n            size: parseInt(map_obj.size),\n            height: 0.01,\n            curveSegments: 4,\n        });\n        text_geometry.center();\n\n        const textMesh = new Mesh(text_geometry, text_material);\n        layer_text_logo_position(mesh, mesh_center_point, mesh_size, textMesh, allIndexedMapObjects);\n        //@ts-ignore\n        textMesh.object_id = new_object_id;\n        //@ts-ignore\n        textMesh.floor_index = mesh.floor_index;\n        textMesh.renderOrder = getRenderOrder('layer-text');\n        //@ts-ignore\n        floors[mesh.floor_index].objsGroup.add(textMesh);\n        scene.add(textMesh);\n        console.debug({UpdateTexts: scene});\n\n        // Show bounding sphere\n\n        const wireframeMaterial = new MeshBasicMaterial({\n            color: 0x0000ff,\n            wireframe: true,\n            transparent: true,\n            opacity: 0.25,\n        });\n        textMesh.geometry.computeBoundingSphere();\n        const BoundingSphereMesh = new Mesh(\n            new SphereGeometry(textMesh.geometry.boundingSphere?.radius || 1, 32, 32),\n            wireframeMaterial\n        )\n        @ts-ignore\n        BoundingSphereMesh.position.copy(textMesh.geometry.boundingSphere.center || [0, 0, 0]);\n        scene.add(BoundingSphereMesh);\n        \n    }\n\n     else if (\n        map_obj.layer_type === 'retail_logo' ||\n        map_obj.layer_type === 'custom_image' ||\n        (map_obj.obj_type === 'special' && map_obj.layer_type === 'kiosk' && map_obj.kiosk_id !== null) ||\n        (map_obj.obj_type === 'special' && map_obj.layer_type === 'amenity' && map_obj.value !== '')\n    ) {\n        //@ts-ignore\n        getImageLogo(allIndexedRetailers, map_obj, mesh, mesh_center_point, mesh_size);\n    }\n}*/\n\nfunction getImageLogo(allIndexedRetailers: Record<string, any>, map_obj: Record<string, any>, mesh: BufferGeometry,object_id: string, new_object_id: string | null, mesh_center_point: Vector3, mesh_size: Vector3, floors: any, handleAsync: (meshLogo: {storeLogo: Object3D}) => void): void {\n\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    if (map_obj.obj_type == 'retailer') {\n        img.src = allIndexedRetailers[map_obj.retailer_id].logo;\n    } else if (map_obj.obj_type == 'special') {\n        \n        let svg_image_name = map_obj.value;\n        if (map_obj.layer_type == 'kiosk') svg_image_name = 'kiosk';\n        if (svg_image_name) {\n            let svg_color = '222222';\n            if (map_obj.text_color != null) {\n                svg_color = map_obj.text_color;\n            }\n\n            const svg_block = document.getElementById('map-special-svg-' + svg_image_name)\n            if (!svg_block) {\n                console.error('svg_block not found', svg_image_name);\n                return;\n            }\n            const svg_element = svg_block.querySelector(\"svg\");\n            if (!svg_element) {\n                console.error('svg_element not found', svg_image_name);\n                return;\n            }\n\n            const svgColoredParts = svg_element.querySelectorAll('[fill]');\n            svgColoredParts.forEach((svgColoredPart) => {\n                svgColoredPart.setAttribute('fill', '#' + svg_color);\n            })\n\n            const svgData = (new XMLSerializer()).serializeToString(svg_element);\n            img.src = \"data:image/svg+xml;base64,\" + window.btoa(unescape(encodeURIComponent(svgData)));\n        }\n        \n    } else {\n        img.src = map_obj.custom_image;\n   }\n    img.onload = function () {\n        const c = document.createElement(\"canvas\");\n        const ctx = c.getContext(\"2d\");\n\n        c.width = img.width;\n        c.height = img.height;\n\n        ctx?.drawImage(img, 0, 0);\n\n        let texture = new CanvasTexture(c);\n        texture.colorSpace = 'srgb'\n\n        const geometry = new PlaneGeometry(map_obj.size, map_obj.size * img.height / img.width);\n        const material = new MeshBasicMaterial({\n            map: texture,\n            transparent: true,\n            side: DoubleSide,\n            depthTest: false,\n            depthWrite: false,\n        });\n        const logoMesh = new Mesh(geometry, material) as IExtMesh;\n\n        // @ts-ignore\n        const floor_index = mesh.floor_index;\n        layer_text_logo_position_by_id(object_id, mesh_center_point, mesh_size, logoMesh, allIndexedMapObjects);\n        logoMesh.object_id = new_object_id;\n        logoMesh.floor_index = floor_index;\n        logoMesh.renderOrder = getRenderOrder('layer-image');\n        floors[floor_index]?.objsGroup.add(logoMesh);\n\n        /*const wireframeMaterial = new MeshBasicMaterial({\n            color: 0x0000ff,\n            wireframe: true,\n            transparent: true,\n            opacity: 0.25,\n        });\n        logoMesh.geometry.computeBoundingSphere();\n        const BoundingSphereMesh = new Mesh(\n            new SphereGeometry(logoMesh.geometry.boundingSphere?.radius || 1, 32, 32),\n            wireframeMaterial\n        )\n        //@ts-ignore\n        BoundingSphereMesh.position.copy(logoMesh.geometry.boundingSphere.center || [0, 0, 0]);\n        \n        handleAsync({storeLogo: BoundingSphereMesh});\n        */\n        handleAsync({storeLogo: logoMesh});\n    };\n}\n\n\n\nexport function get_store_name_logo_geo(geometry: BufferGeometry, object_id:string, floor_index: number, textLogoNamePrefix: string, allIndexedMapObjects: Record<any, any>, allIndexedRetailers: Record<any, any>, config: Record<any, any>, myFont: any, floors: Record<any, any>, handleAsync: (meshLogo: any) => void): {textMesh: IExtMesh} | null | false {\n    const new_object_id = textLogoNamePrefix + object_id;\n    // deleteMeshByObjectID(new_object_id, scene, floors);\n    let result = null;\n\n    if (!geometry.boundingBox) {\n        geometry.computeBoundingBox();\n    }\n    if (!geometry.boundingBox) {\n        return null;\n    }\n\n    const boundingBox = geometry.boundingBox;\n\n    const mesh_center_point = new Vector3();\n    boundingBox.getCenter(mesh_center_point);\n\n    const mesh_size = new Vector3();\n    boundingBox.getSize(mesh_size);\n\n    //@ts-ignore\n    const map_obj = allIndexedMapObjects[object_id];\n\n    if (['retail_name', 'retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n        let text = '';\n        if (map_obj.layer_type == 'retail_name' && map_obj.retailer_id && allIndexedRetailers[map_obj.retailer_id]) {\n            text = allIndexedRetailers[map_obj.retailer_id].retail_name;\n        } else if (['retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n            text = map_obj.custom_text;\n        } else {\n            return false;\n        }\n\n        let text_color = config.STORE_TEXT_COLOR;\n        if (map_obj.text_color != null) {\n            text_color = hex_to_color(map_obj.text_color);\n        }\n\n        const material_settings = {\n            color: text_color,\n            transparent: true,\n            side: DoubleSide,\n            depthWrite: false,\n            depthTest: false,\n        };\n        let text_material = new MeshPhongMaterial(material_settings);\n        let text_geometry = new TextGeometry(text, {\n            font: myFont,\n            size: parseInt(map_obj.size),\n            height: 0.01,\n            curveSegments: 4,\n        });\n        text_geometry.center();\n\n        const textMesh = new Mesh(text_geometry, text_material) as IExtMesh;\n        textMesh.userData.font = myFont;\n        layer_text_logo_position_by_id(object_id, mesh_center_point, mesh_size, textMesh, allIndexedMapObjects);\n        textMesh.object_id = new_object_id;\n        textMesh.floor_index = floor_index;\n        textMesh.renderOrder = getRenderOrder('layer-text');\n        if (map_obj.layer_type === 'retail_name') {\n            textMesh.userData.retail_name = text;\n        }\n\n        floors[floor_index].objsGroup.add(textMesh);\n\n        //scene.add(textMesh);\n        //console.debug({UpdateTexts: scene});\n\n        // Show bounding sphere\n\n        /*const wireframeMaterial = new MeshBasicMaterial({\n            color: 0x0000ff,\n            wireframe: true,\n            transparent: true,\n            opacity: 0.25,\n        });\n        textMesh.geometry.computeBoundingSphere();\n        const BoundingSphereMesh = new Mesh(\n            new SphereGeometry(textMesh.geometry.boundingSphere?.radius || 1, 32, 32),\n            wireframeMaterial\n        )\n        @ts-ignore\n        BoundingSphereMesh.position.copy(textMesh.geometry.boundingSphere.center || [0, 0, 0]);\n        scene.add(BoundingSphereMesh);\n        */\n        result = { textMesh };\n    }\n\n    else if (\n       map_obj.layer_type == 'retail_logo' ||\n       map_obj.layer_type == 'custom_image' ||\n       (map_obj.obj_type == 'special' && map_obj.layer_type == 'kiosk' && map_obj.kiosk_id != null) ||\n       (map_obj.obj_type == 'special' && map_obj.layer_type == 'amenity' && map_obj.value != '')\n   ) {\n        getImageLogo(allIndexedRetailers, map_obj, geometry, object_id, new_object_id, mesh_center_point, mesh_size, floors, handleAsync);\n\n\n   }\n   return result;\n}","import {\n    Group,\n    Scene,\n    Object3D,\n    Mesh,\n    BufferGeometry,\n    Color,\n} from \"three\";\nimport { useLoader } from \"@react-three/fiber\";\nimport { SVGLoader } from \"three/examples/jsm/loaders/SVGLoader.js\";\nimport {useCallback, useEffect, useMemo, useState} from \"react\";\nimport createGraph, { Graph } from \"ngraph.graph\";\nimport data from \"demo/data.json\";\nimport {loadFloors} from \"./loadFloors\";\nimport type {IConfig, IExtMesh, IFloorData, IMeshParams, IMeshValues, TMapMode} from \"../../types\";\nimport {defaultVars, mapit2DefaultVars} from \"../../defaults\";\nimport {allIndexedMapObjects, allIndexedRetailers} from \"../../globals\";\nimport {drawTextLogoStoreOnMap, get_store_name_logo_geo} from \"helpers/draw.logo.helpers\";\nimport { FontLoader, Font } from \"three-stdlib\";\nimport { IJsonConfig, IMeshParamsTmp} from \"../../types\";\nimport {hex_to_color} from \"../../helpers/misc\";\nimport {Kiosk, Floor, MapIt2Response, MapObj} from \"../../mapitApiTypes\";\nimport { EventedType } from \"ngraph.events\";\nimport fontData from './optimer_regular.typeface.json'\nimport { FontData, useFont } from \"@react-three/drei\";\n\n// if (!isDefined(typeof MAPIT2)) window.MAPIT2 = { ...defaultVars };\n// window.MAPIT2 = { ...defaultVars, ...MAPIT2 };\n\nexport const textLogoNamePrefix = 'custom-layer-';\n\nconst config: IJsonConfig = { ...defaultVars, ...mapit2DefaultVars}\n\nconst defaultMapObjValues = {\n\tid: null,\n\tcenter_id: config.CENTER_ID,\n\tretailer_id: null,\n\tkiosk_id: null,\n\tmap_obj_name: '',\n\tobj_type: 'retailer',\n\tlayer_type: 'retail_name',\n\tvalue: '',\n\tcustom_text: '',\n\tcustom_image: '',\n\thover_text: '',\n\tbg_color: '',\n\ttransparent: 0,\n\ttext_color: '',\n\tsize: 8,\n\trotate: 0,\n\toffsetX: 0,\n\toffsetY: 0,\n} as Record<string, string | number | null| undefined>;\n\n\nlet allNonIndexedMapObjects: MapObj[] = [];\n\nconst extraMapObjects = []\nlet activeMapObjectName = null;\nconst floorsData:IFloorData[] = [];\nconst floors = [] as Floor[];\nlet floors_loaded = 0;\nconst BASE_URL = 'https://test.mycenterdeals.com/data/mapit2/';\n\nfunction select<T>(...values: T[]) {\n    return values.find(value => value !== '' && value != null) || values.at(-1);\n}\n\nconst clearObject = (obj: Record<string, MapObj>) => {\n\tfor (let key in obj) {\n\t\tdelete obj[key];\n\t}\n}\n\nfunction makeIndexedMapObjects(map_objs: MapObj[]) {\n\tclearObject(allIndexedMapObjects);\n\n    allNonIndexedMapObjects = map_objs;\n\n    for (let i = 0; i < map_objs.length; i++) {\n        const obj = map_objs[i];\n        allIndexedMapObjects[obj.map_obj_name] = obj;\n        for (let key in defaultMapObjValues) {\n            const value = defaultMapObjValues[key];\n            //@ts-ignore\n            if (value != null && obj[key] == null) {\n                //@ts-ignore\n                allIndexedMapObjects[obj.map_obj_name][key] = value;\n            }\n        }\n    }\n}\n\nconst init = (config: IJsonConfig, floors:IFloorData[], response: MapIt2Response) => {\n\n    const KIOSKS:Record<string, Kiosk> = {};\n    response.kiosks.forEach((kiosk) => {\n        KIOSKS[kiosk.id] = kiosk;\n    });\n\n\n    for (let index in response.retailers) {\n        const retailer = response.retailers[index];\n        allIndexedRetailers[retailer.id] = retailer;\n        allIndexedRetailers[retailer.id].index = index;\n    }\n\n    // ngCtrlElem.scope().amenitiesNav.bg_color = response.settings.AMENITIES_NAV_BG_COLOR;\n    // ngCtrlElem.scope().amenitiesNav.icon_color = response.settings.AMENITIES_NAV_ICON_COLOR;\n\n    makeIndexedMapObjects(response.map_objs);\n\n    floors.length = 0;\n    response.floors.forEach((value: IFloorData, index: number) => {\n        const objsGroup = new Group();\n        objsGroup.scale.y *= -1;\n        objsGroup.lookAt(0, 1, 0);\n\n        floors.push({\n            id: value.id,\n            // svg_map: BASE_URL + 'data/mapit2/' + value.svg,\n            svg_map: BASE_URL + value.svg,\n            title: value.title,\n            objsGroup: objsGroup,\n            interactiveObjs: [],\n            escalatorsObjs: [],\n            escalatorsNodes: {},\n            escalatorMeshes: [],\n            route_points: [],\n            route_tube: undefined,\n            route_texture: null,\n            routeMeshes: [],\n            route_active: false,\n        });\n    });\n\n    const processedConfig: IConfig = {\n        ACCENT_COLOR: hex_to_color(response.settings.ACCENT_COLOR ? response.settings.ACCENT_COLOR : config.ACCENT_COLOR),\n        BASE_COLOR: hex_to_color(response.settings.BASE_COLOR ? response.settings.BASE_COLOR : config.BASE_COLOR),\n        BIG_STORE_DEFAULT_COLOR: hex_to_color(response.settings.BIG_STORE_DEFAULT_COLOR ? response.settings.BIG_STORE_DEFAULT_COLOR : config.BIG_STORE_DEFAULT_COLOR),\n        BOUNDARY_COLOR: hex_to_color(response.settings.BOUNDARY_COLOR ? response.settings.BOUNDARY_COLOR : config.BOUNDARY_COLOR),\n        BOUNDARY_THICKNESS: parseFloat(response.settings.BOUNDARY_THICKNESS ? response.settings.BOUNDARY_THICKNESS : config.BOUNDARY_THICKNESS),\n        BUILDING_BASE_COLOR: hex_to_color(config.BUILDING_BASE_COLOR),\n        CAMERA: null,\n        CAMERA_CONTROLS_STATES: response.camera_controls_states[config.DEVICE],\n        CENTER_ID: config.CENTER_ID,\n        CONTROLS: null,\n        DEBUG: config.DEBUG, // config.DEBUG === 'true' || config.DEBUG === '1'\n        DEFAULT_CAMERA_POSITION: config.DEFAULT_CAMERA_POSITION,\n        DEFAULT_CONTROLS_TARGET: config.DEFAULT_CONTROLS_TARGET,\n        DEFAULT_SELECTED_STORE: config.DEFAULT_SELECTED_STORE,\n        DEVICE: config.DEVICE,\n        KIOSK: config.KIOSK,\n        KIOSKS: KIOSKS,\n        MAP_BACKGROUND_COLOR: hex_to_color(response.settings.MAP_BACKGROUND_COLOR ? response.settings.MAP_BACKGROUND_COLOR : config.MAP_BACKGROUND_COLOR),\n        ORIGINAL_CAMERA_POSITION: config.ORIGINAL_CAMERA_POSITION,\n        OVERLAY_COLOR: hex_to_color(response.settings.OVERLAY_COLOR ? response.settings.OVERLAY_COLOR : config.OVERLAY_COLOR),\n        OVERLAY_OPACITY: parseFloat(response.settings.OVERLAY_OPACITY ? response.settings.OVERLAY_OPACITY : config.OVERLAY_OPACITY),\n        ROLE: config.ROLE,\n        STATS: config.STATS === 'true' || config.STATS === '1',\n        STORE_DEFAULT_COLOR: hex_to_color(response.settings.STORE_DEFAULT_COLOR ? response.settings.STORE_DEFAULT_COLOR : config.STORE_DEFAULT_COLOR),\n        STORE_TEXT_COLOR: hex_to_color(response.settings.STORE_TEXT_COLOR ? response.settings.STORE_TEXT_COLOR : config.STORE_TEXT_COLOR),\n        STYLE: config.STYLE,\n        WALL_COLOR: hex_to_color(response.settings.WALL_COLOR ? response.settings.WALL_COLOR : config.WALL_COLOR),\n        WALL_THICKNESS: parseFloat(response.settings.WALL_THICKNESS ? response.settings.WALL_THICKNESS : config.WALL_THICKNESS),\n        FLOORS: response.floors,\n        AMENITIES: response.amenities,\n        RETAILERS: response.retailers\n    };\n\n    // AMENITIES_NAV_BG_COLOR: string;\n    // AMENITIES_NAV_ICON_COLOR: string;\n\n    return processedConfig;\n}\n\n/*function get_node_name(vertex: any, floor_index: any) {\n    let exists = false;\n    let node_name = null;\n    for (let i = 0; i < floors[floor_index].route_points.length; i++) {\n        if (vertex.x == floors[floor_index].route_points[i].node.x && vertex.y === floors[floor_index].route_points[i].node.y) {\n            exists = true;\n            node_name = floors[floor_index].route_points[i].name;\n            break;\n        }\n    }\n    if (!exists) {\n        node_name = next_node_name();\n        floors[floor_index].route_points.push({\n            name: node_name,\n            node: new Vector3(vertex.x, vertex.y, 1)\n        });\n        //@ts-ignore\n        allNodesFloor[node_name] = floor_index;\n\n        // draw_points([{ x: vertex.x, y: vertex.y }]);\n    }\n    return node_name;\n}*/\n\n/*function next_node_name() {\n    node_count++;\n    return 'node-' + node_count;\n}*/\n\n\nconst useMeshFloors = (data: MapIt2Response|null, jsonConfig?: Partial<IJsonConfig>, mode?: TMapMode): IMeshParamsTmp => {\n    const [meshParams, setMeshParams] = useState<IMeshValues[][]>([]);\n    const [textParams, setTextParams] = useState<Array<{textMesh:IExtMesh}[]>>([]);\n    const [storeLogos, setStoreLogos] = useState<{storeLogo: Mesh}[][]>([]);\n    const [pathFinderGraph, setPathFinderGraph] = useState<Graph & EventedType>();\n    const [escalatorNodes, setEscalatorNodes] = useState<string[]>([]);\n    const [urls, setUrls] = useState<string[]>([]);\n    const [ processedConfig, setProcessedConfig ] = useState<IConfig|null>(null);\n    let result = useLoader(SVGLoader, urls);\n\n    const consolePrefix = 'MAPIT2';\n    // const myFont = useLoader(FontLoader, 'assets/threejs/threejs/examples/fonts/optimer_regular.typeface.json')\n    const myFont = useFont(fontData as unknown as FontData);\n\n    // const getWallShape = (...params: any): Shape | Shape[] => {\n    //     return []\n    // }\n\n\n    const handleAsyncStoreLogos = useCallback((floorIndex: number) => ((meshLogo: {storeLogo: Mesh}) => {\n        setStoreLogos((prevLogos) => {\n            // console.debug({floorIndex});\n            if (prevLogos[floorIndex]) {\n                prevLogos[floorIndex].push({...meshLogo});\n            } else {\n                prevLogos[floorIndex] = [{...meshLogo}];\n            }\n            // console.debug({prevLogos});\n            return [...prevLogos];\n        });\n    }), [])\n\n\n    useEffect(() => {\n        if (!data) return;\n\n\n        // console.log('useMeshFloors[data]', {data})\n\n        const processedConfig = init(jsonConfig ? {...config, ...jsonConfig} : config, floorsData, data as MapIt2Response);\n        const values: string[] = [];\n        processedConfig.FLOORS.forEach((value) => {\n            values.push(`${BASE_URL}${value.svg}`);\n        });\n\n        setProcessedConfig(processedConfig);\n        setUrls([...values]);\n    // }, [JSON.stringify(data)]);\n    return () => {\n        if (meshParams) {\n            meshParams.forEach(floor => {\n                if (floor) {\n                    floor.forEach(value => {\n                        value.mesh.removeFromParent();\n                    })\n                }\n            })\n        }\n\n        if (textParams) {\n            textParams.forEach(floor => {\n                if (floor) {\n                    floor.forEach(value => {\n                        value.textMesh.removeFromParent();\n                    })\n                }\n            })\n        }\n\n        if (storeLogos) {\n            storeLogos.forEach(floor => {\n                if (floor) {\n                    floor.forEach(value => {\n                        value.storeLogo.removeFromParent();\n                    })\n                }\n            })\n        }\n\n        setMeshParams([]);\n        setTextParams([]);\n        setStoreLogos([]);\n    }\n    }, [data]);\n\n    useEffect(() => {\n        if (!processedConfig || !urls.length || !myFont || !result) return;\n\n        const { GeometriesAndMaterials, graph, escalator_nodes } = loadFloors(floorsData, processedConfig, result, mode);\n        const TextsAndLogos:Array<{textMesh:IExtMesh}[]> = [];\n        allNonIndexedMapObjects.forEach((params) => {\n            let values: IMeshValues | undefined;\n            for (let i = 0; i < GeometriesAndMaterials.length; i++) {\n                //@ts-ignore\n                values = GeometriesAndMaterials[i].find(item => item.object_id === params.map_obj_name);\n                if (values !== undefined) {\n                    break;\n                } \n            }\n            if (!values) return null;\n            const textParams = get_store_name_logo_geo(values.geometry, params.map_obj_name, values.floor_index, textLogoNamePrefix, allIndexedMapObjects, allIndexedRetailers, config, myFont, floorsData, handleAsyncStoreLogos(values.floor_index));\n            if (textParams) {\n                if (!TextsAndLogos[values.floor_index]) {\n                    TextsAndLogos[values.floor_index] = [];\n                }\n                TextsAndLogos[values.floor_index].push(textParams);\n            }\n        })\n        setMeshParams(GeometriesAndMaterials);\n        setTextParams(TextsAndLogos);\n        setPathFinderGraph(graph);\n        setEscalatorNodes([...escalator_nodes]);\n\n    }, [processedConfig, urls, result, myFont]);\n\n    return useMemo(() => {\n        return {\n            config: processedConfig,\n            meshParams,\n            textParams,\n            storeLogos,\n            floors: floorsData,\n            pathFinderGraph,\n            escalator_nodes: escalatorNodes,\n        }\n    }, [ processedConfig, meshParams, textParams, storeLogos, floorsData, pathFinderGraph, escalatorNodes ])\n}\n\nexport default useMeshFloors","import {IJsonConfig} from \"./types\";\n\nexport const mapit2DefaultVars: Partial<IJsonConfig> = {\n    ROLE: 'WEBSITE',\n    DEVICE: 'display_app',\n    CENTER_ID: '8',\n    // KIOSK: '51',\n    KIOSK: '108',\n    STYLE: '3D',\n    DEFAULT_SELECTED_STORE: '',\n    DEBUG: '1',\n\n    MAP_BACKGROUND_COLOR: \"FFFFFF\",\n    ACCENT_COLOR: \"4EA5FF\",\n    STORE_DEFAULT_COLOR: \"E2E2E2\",\n    BIG_STORE_DEFAULT_COLOR: \"3D3D3D\",\n    WALL_THICKNESS: '0.6',\n    WALL_COLOR: \"888888\",\n    BOUNDARY_THICKNESS: '0.8',\n    BOUNDARY_COLOR: \"888888\",\n    BASE_COLOR: \"25292B\",\n    STORE_TEXT_COLOR: \"222222\",\n    OVERLAY_COLOR: \"FFFFFF\",\n    OVERLAY_OPACITY: '0.7',\n    // AMENITIES_NAV_BG_COLOR: \"000000\",\n    // AMENITIES_NAV_ICON_COLOR: \"FFFFFF\"\n}\n\nexport const defaultVars: IJsonConfig = {\n    MAP_BACKGROUND_COLOR: '',\n    ROLE: 'WEBSITE', // PORTAL, WEBSITE, DISPLAY_APP, WP_SITE, PORTAL_KIOSK, PORTAL_RESPONSIVE\n    DEVICE: 'display_app',\n    KIOSK: '-',\n    FLOORS: [],\n    KIOSKS: {},\n    CENTER_ID: null,\n    STATS: 'false',\n    STYLE: '3D', // 2D, 3D\n    DEBUG: '0',\n    ACCENT_COLOR: '4EA5FF',\n    STORE_DEFAULT_COLOR: 'E2E2E2',\n    BIG_STORE_DEFAULT_COLOR: '3D3D3D',\n    WALL_THICKNESS: '0.6',\n    BOUNDARY_THICKNESS: '0.8',\n    WALL_COLOR: '888888',\n    BOUNDARY_COLOR: '888888',\n    BASE_COLOR: '25292B',\n    BUILDING_BASE_COLOR: 'DADADA',\n    STORE_TEXT_COLOR: '222222',\n    OVERLAY_COLOR: 'FFFFFF',\n    OVERLAY_OPACITY: '0.7',\n    CAMERA_CONTROLS_STATES: null, // all devices camera and controls states\n    ORIGINAL_CAMERA_POSITION: null, // loaded and fit to canvas loaded area without any custom positions\n    DEFAULT_CAMERA_POSITION: null, // custom default camera position\n    DEFAULT_CONTROLS_TARGET: null, // custom default controls target\n    DEFAULT_SELECTED_STORE: null,\n};","import {useThree} from \"@react-three/fiber\";\r\nimport {Color} from \"three\";\r\n\r\ninterface IScenePropertiesProps {\r\n    background?: Color | string;\r\n}\r\n\r\nexport const SceneProperties = (params:IScenePropertiesProps) => {\r\n    const { scene } = useThree();\r\n    if (params.background) {\r\n        scene.background = new Color(params.background);\r\n    }\r\n    return null;\r\n}","import {useThree} from \"@react-three/fiber\";\r\nimport { ICameraPropertiesProps } from \"types\";\r\nimport {PerspectiveCamera} from \"three\";\r\n\r\nexport const CameraProperties = (props:ICameraPropertiesProps) => {\r\n    const { camera } = useThree();\r\n\r\n    const cameraProjectionNeedsUpdate = props.far || props.near || props.fov;\r\n    if (props.far) {\r\n        camera.far = props.far;\r\n    }\r\n    if (props.near) {\r\n        camera.near = props.near;\r\n    }\r\n\r\n    if (camera instanceof PerspectiveCamera) {\r\n        if (props.fov) {\r\n            camera.fov = props.fov;\r\n        }\r\n    }\r\n\r\n    if (cameraProjectionNeedsUpdate) {\r\n        camera.updateProjectionMatrix();\r\n    }\r\n\r\n    return null;\r\n}","export function easeInOutCubic(x: number): number {\n    return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;\n}","import React, {useEffect, useRef} from \"react\";\nimport type {Mesh} from \"three\";\nimport {easeInOutCubic} from \"../../helpers/easing\";\nimport {MeshBasicMaterial} from \"three\";\nimport {useFrame} from \"@react-three/fiber\";\n\ninterface IRouteTubeProps {\n    mesh?: Mesh;\n}\n\nexport function RouteTube({mesh}: IRouteTubeProps) {\n    const animateRoute = useRef<Function | null>(null);\n\n    useEffect(() => {\n        if (!mesh) {\n            return;\n        }\n\n        if (!mesh.geometry.index?.count) {\n            console.log('NO ROUTE TUBE GEOMETRY INDEX COUNT');\n            return;\n        }\n\n        if (!(mesh.material instanceof MeshBasicMaterial)) {\n            return;\n        }\n        if (!mesh.material.map) {\n            console.log('NO ROUTE TEXTURE');\n            return;\n        }\n\n        mesh.geometry.setDrawRange(0, 0);\n\n        const end = mesh.geometry.index.count;\n        const animateTube = (\n            () => {\n                const length = 1000;\n                const startTime = performance.now();\n                return () => {\n                    const progress = (performance.now() - startTime) / length;\n                    const drawRangeEnd = Math.floor(easeInOutCubic(progress) * end);\n\n                    if (progress >= 1) {\n                        animateRoute.current = animateTexture;\n                    }\n\n                    mesh.geometry.setDrawRange(0, drawRangeEnd);\n                }\n            }\n        )();\n\n        const animateTexture = (() => {\n            if (!(mesh.material instanceof MeshBasicMaterial)) {\n                return null;\n            }\n            if (!mesh.material.map) {\n                return null;\n            }\n            const offsetVector = mesh.material.map.offset;\n            const length = 2000;\n            const startTime = performance.now();\n            return () => {\n                const progress = (performance.now() - startTime) / length % 1;\n                offsetVector.x = -easeInOutCubic(progress);\n            }\n        })();\n\n        animateRoute.current = animateTube;\n\n        return () => {\n            animateRoute.current = null;\n            mesh.removeFromParent();\n            if (mesh.material instanceof MeshBasicMaterial) {\n                mesh.material.dispose();\n            }\n            if (mesh.geometry) {\n                mesh.geometry.dispose();\n            }\n        }\n\n    }, [mesh]);\n\n    useFrame(() => {\n        if (animateRoute.current) {\n            try {\n                animateRoute.current();\n            } catch( e: any ) {\n                console.error(`ERROR ANIMATE ROUTE: ${e.message}`)\n                animateRoute.current = null;\n            }\n        }\n    });\n\n    if (!mesh) return null;\n    return <primitive object={mesh}></primitive>\n}","import {IMeshParams, TMapMode} from \"../../types\";\r\nimport {ThreeEvent} from \"@react-three/fiber\";\r\nimport React, {MouseEventHandler} from \"react\";\r\nimport {Mesh, MeshLambertMaterial, MeshStandardMaterial, RGB} from \"three\";\r\nimport {RouteTube} from \"./RouteTube\";\r\nimport {Html} from \"@react-three/drei\";\r\nimport styles from '../../MapBox.module.css';\r\n\r\ninterface IMapProps {\r\n    floorIndex: number,\r\n    meshFloors: IMeshParams;\r\n    currKioskObj: Mesh | null;\r\n    activeObjectId?: string;\r\n    hoverObjectId?: string;\r\n    routeTube?: Mesh;\r\n    visible: boolean,\r\n    onPointerEnter?: (e: ThreeEvent<PointerEvent>) => void;\r\n    onPointerLeave?: (e: ThreeEvent<PointerEvent>) => void;\r\n    onPointerMove?: (e: ThreeEvent<PointerEvent>) => void;\r\n    onClick?: (e: ThreeEvent<MouseEvent>) => void;\r\n    handleChangeFloor: (index: number) => MouseEventHandler<HTMLDivElement>;\r\n    mode?: TMapMode;\r\n}\r\n\r\nconst getDarkerColor = (color: RGB) => {\r\n    if (color) {\r\n        var newColor = { ...color }\r\n        newColor.r = color.r * 0.92;\r\n        newColor.g = color.g * 0.92;\r\n        newColor.b = color.b * 0.92;\r\n        return newColor;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const Map = (params: IMapProps) => {\r\n    const {meshFloors, routeTube, floorIndex, activeObjectId, hoverObjectId, visible, handleChangeFloor, mode} = params;\r\n\r\n    const { config, meshParams, textParams, storeLogos} = meshFloors;\r\n    const floor = meshFloors.floors[floorIndex];\r\n\r\n    const onPointerMove = params.onPointerMove;\r\n    const onPointerOver = params.onPointerEnter;\r\n    const onPointerOut = params.onPointerLeave;\r\n    const onClick = params.onClick;\r\n\r\n    const floorMeshParams = meshParams[floorIndex];\r\n    const floorTextParams = textParams[floorIndex];\r\n    const floorStoreLogos = storeLogos[floorIndex];\r\n    const escalatorMeshes = meshFloors.floors[floorIndex].escalatorMeshes;\r\n\r\n    // console.log('Map', floorIndex, { meshParams, floorIndex, floorMeshParams, floorTextParams, floorStoreLogos, routeTubes})\r\n    return (\r\n        <group visible={visible}>\r\n            {floorMeshParams?.map((params) => {\r\n                if (!params.mesh) return null;\r\n\r\n                const interactive = (visible && params.mesh.visible && floor.interactiveObjs && floor.interactiveObjs.includes(params.mesh));\r\n                const hovered = hoverObjectId && params.mesh.object_id === hoverObjectId;\r\n                const active = activeObjectId && params.mesh.object_id === activeObjectId;\r\n                if (interactive) {\r\n                    // TODO: move those colorDefault, active, etc to userData of mesh or material\r\n                    if ((active || hovered) && (params.mesh.material instanceof MeshLambertMaterial || params.mesh.material instanceof MeshStandardMaterial)) {\r\n                        // @ts-ignore\r\n                        const baseColor = active ? config.ACCENT_COLOR : params.mesh.material.colorDefault;\r\n                        //console.log('Map', {baseColor, active, hovered})\r\n                        params.mesh.material.color = hovered ? getDarkerColor(baseColor) : baseColor;\r\n                    } else {\r\n                        // @ts-ignore\r\n                        params.mesh.material.color = params.mesh.material.colorDefault;\r\n                    }\r\n                }\r\n\r\n                return <group key={params.mesh.uuid} {...(interactive? {onPointerOver, onPointerMove, onPointerOut, onClick } : {})}>\r\n                    <primitive object={params.mesh}></primitive>\r\n                </group>\r\n            })}\r\n            {floorTextParams?.map((params) => {\r\n                if (!params.textMesh) return null;\r\n                return <primitive key={params.textMesh.uuid} object={params.textMesh}>\r\n                </primitive>\r\n            })}\r\n            {floorStoreLogos?.map((params) => {\r\n                if (!params.storeLogo) return null;\r\n\r\n                return <primitive key={params.storeLogo.uuid} object={params.storeLogo}>\r\n                    {visible && params.storeLogo.userData.htmlContent? <Html>{params.storeLogo.userData.htmlContent}</Html> : null}\r\n                </primitive>\r\n            })}\r\n            {escalatorMeshes?.map((params) => {\r\n                //@ts-ignore\r\n                return <primitive key={`escalator-${params.object_id}`} object={params}>\r\n                    <Html visible={false} position={params.geometry.boundingSphere?.center}>\r\n                        <div onClick={handleChangeFloor(params.goToFloor?.index || 0)} id={styles.escalator_elems} style={{ display: visible ? 'block' : 'none' }}>\r\n                            <div className={styles.element} id={params.object_id as string}>\r\n                                <div className={styles.label}>{params.goToFloor?.direction}: Floor {params.goToFloor ? params.goToFloor.index + 1 : ''}</div>\r\n                            </div>\r\n                        </div>\r\n                    </Html>\r\n                </primitive>\r\n            })}\r\n            <RouteTube mesh={routeTube} />\r\n        </group>\r\n    )\r\n}","import {IExtMesh, IFloorData, IMeshParams, TMapMode} from \"../../types\";\nimport {Map} from \"./Map\";\nimport React, {MouseEventHandler, useCallback, useEffect, useRef, useState} from \"react\";\nimport {Group, Mesh, PerspectiveCamera, Vector3} from \"three\";\nimport {ThreeEvent, useThree} from \"@react-three/fiber\";\nimport {get_camera_focus_object} from \"../../helpers/camera.helpers\";\nimport {MapControls} from \"@react-three/drei\";\nimport {create_route, make_amenity_route} from \"../../helpers/route.helpers\";\nimport {allIndexedMapObjects} from \"../../globals\";\nimport { IZoomData } from \"./SceneComponent\";\n\ninterface IFloorsMapProps {\n    meshFloors: IMeshParams;\n    currentFloorIndex: number;\n    onPointerEnter?: (e: ThreeEvent<PointerEvent>) => void;\n    onPointerLeave?: (e: ThreeEvent<PointerEvent>) => void;\n    onPointerMove?: (e: ThreeEvent<PointerEvent>) => void;\n    onClick?: (e: ThreeEvent<MouseEvent>) => void;\n    onCameraMove?: (e: any) => void;\n    currKioskObj: Mesh;\n    routeTargetId?: string;\n    amenityTargetType: string;\n    activeObjectId?: string;\n    hoverObjectId?: string;\n    handleChangeFloor: (index: number) => MouseEventHandler<HTMLDivElement>,\n    escalatorNodes: string[];\n    zoom: IZoomData | null;\n    mode?: TMapMode;\n}\n\n\nexport const FloorsMap = (params:IFloorsMapProps) => {\n    const { meshFloors, currentFloorIndex, currKioskObj, routeTargetId, amenityTargetType, handleChangeFloor, escalatorNodes, zoom, mode } = params;\n    const { floors } = meshFloors;\n\n    const groupRef = useRef<Group>(null);\n    const [ routeTubes, setRouteTubes ] = useState<Mesh[]>([]);\n    const mapControlRef = useRef<any>(null);\n    const { camera, scene } = useThree();\n    const cameraFocus = useRef<{ position:Vector3, target:Vector3, animationStartTime:number, cameraTime:number, targetTime:number } | null>(null);\n\n    const style = meshFloors.config.STYLE;\n    const accentColor = meshFloors.config.ACCENT_COLOR;\n    const pathFinderGraph = meshFloors.pathFinderGraph;\n    const from = (currKioskObj as IExtMesh).object_id;\n\n    useEffect(() => {\n        (() => {\n            let n = 0;\n            scene.traverse(() => ++n);\n\n            console.debug('Count:', n);\n        })()\n    }, [params.meshFloors, scene])\n\n    useEffect(() => {\n        if (!amenityTargetType || mode === 'edit') {\n            setRouteTubes([]);\n            return;\n        }\n        const route = make_amenity_route(from?? '', amenityTargetType, scene, allIndexedMapObjects, pathFinderGraph, floors, escalatorNodes, style);\n        setRouteTubes(route);\n    }, [amenityTargetType, scene, pathFinderGraph, floors, escalatorNodes, style, from])\n\n    useEffect(() => {\n        if (!from || !routeTargetId || mode === 'edit') {\n            setRouteTubes([]);\n            return;\n        }\n        if (!amenityTargetType) {\n            floors.forEach(floor => {\n                floor.escalatorMeshes = [];\n            });\n        }\n\n\n        console.log('Make route from %s to %s', from, routeTargetId, pathFinderGraph);\n\n        /* MAKE ROUTE PATH */\n\n        const route = create_route(from, routeTargetId, scene, floors, meshFloors.escalator_nodes, pathFinderGraph, style);\n\n        // TODO: activate object (moved out of create_route function)\n        // makeObjectActive(to_mesh_object_id, accentColor, scene);\n\n        // TODO: focus object (moved out of create_route function)\n        // if (!routePaths.length) {\n        //     let obj = scene.getObjectByProperty('object_id', to_mesh_object_id);\n        //     const {position, target} =get_camera_focus_object([obj], camera.fov, camera.aspectRatio, '2D');\n        //     camera.position.copy(position);\n        // }\n\n\n        console.log('new route', route)\n        setRouteTubes(route);\n\n    }, [ from, routeTargetId, scene, camera, floors, accentColor, pathFinderGraph, style, meshFloors.escalator_nodes ]);\n\n    const selectedFloorMeshParams = meshFloors.meshParams[currentFloorIndex];\n    useEffect(() => {\n\n        if (!(camera instanceof PerspectiveCamera)) {\n            console.error('Camera is not a PerspectiveCamera');\n            return;\n        }\n\n        if (!selectedFloorMeshParams.length) {\n            console.warn('objects not loaded yet');\n            return;\n        }\n\n        let meshes:Mesh[];\n        if (routeTubes[currentFloorIndex]) {\n            meshes = [routeTubes[currentFloorIndex]];\n\n            const currentActiveObject = routeTargetId && selectedFloorMeshParams.find(item => item.mesh.object_id === routeTargetId);\n            if (currentActiveObject) {\n                meshes.push(currentActiveObject.mesh);\n            }\n        } else {\n            meshes = selectedFloorMeshParams.map(item => item.mesh);\n        }\n\n        const cameraSpeed = 0.1; // per second\n        const targetSpeed = 0.1;\n        const focus = get_camera_focus_object(meshes, camera.fov, camera.aspect, mode === 'edit'? '2D' : style);\n        const distance = mapControlRef.current.object.position.distanceTo(focus.position);\n        const targetDistance = mapControlRef.current.target.distanceTo(focus.target);\n        cameraFocus.current = {\n            ...focus,\n            animationStartTime: performance.now(),\n            cameraTime: targetDistance/cameraSpeed/1000, // how long it takes to move camera to get to new position\n            targetTime: targetDistance/targetSpeed/1000, // how long it takes to move camera to get to new position\n        };\n        // console.log({focus, meshes, camera});\n\n        mapControlRef.current.target.copy(focus.target);\n        mapControlRef.current.object.position.copy(focus.position);\n        mapControlRef.current.object.lookAt(focus.target);\n        mapControlRef.current.object.updateProjectionMatrix();\n\n\n        return () => {\n            cameraFocus.current = null;\n        };\n    }, [ routeTubes, selectedFloorMeshParams, currentFloorIndex, style, camera, routeTargetId ]);\n\n    useEffect(() => {\n        if (zoom?.direction && mapControlRef.current) {\n            const vector = new Vector3();\n            vector.copy(mapControlRef.current.target);\n            vector.sub(mapControlRef.current.object.position);\n            vector.setLength(vector.length() * 0.4);\n\n            if (zoom.direction === 'in') {\n                camera.position.add(vector);\n            } else {\n                camera.position.sub(vector);\n            }\n        }\n    }, [zoom])\n\n    const onCameraMove = useCallback((e: any) => {\n        // console.warn('onCameraMove', e);\n        // debugger\n        cameraFocus.current = null;\n    }, [])\n\n    // useFrame(() => {\n    //     if (cameraFocus.current) {\n    //         console.log('animate camera')\n    //         const focus = cameraFocus.current;\n    //         const animationTime = performance.now() - focus.animationStartTime;\n    //         const cameraProgress = Math.min(1, animationTime / focus.cameraTime);\n    //         const targetProgress = Math.min(1, animationTime / focus.targetTime);\n    //         console.log({cameraProgress, targetProgress, animationTime, focus});\n    //\n    //         mapControlRef.current.target.lerp(focus.target, targetProgress);\n    //         mapControlRef.current.object.position.lerp(focus.position, cameraProgress);\n    //         mapControlRef.current.object.lookAt(focus.target);\n    //         mapControlRef.current.object.updateProjectionMatrix();\n    //\n    //         if (cameraProgress === 1 && targetProgress === 1) {\n    //             cameraFocus.current = null;\n    //         }\n    //     }\n    // })\n\n    return (<group rotation={[Math.PI / 2, 0, 0]} ref={groupRef}>\n        <>\n            <MapControls\n\n                onChange={onCameraMove}\n                ref={mapControlRef}\n                maxPolarAngle={Math.PI / 2}\n                />\n\n            {floors && floors.map(( value: IFloorData, index: number) => (\n                <Map\n                    key={`Map-${index}`}\n                    visible={currentFloorIndex === index}\n                    floorIndex = {index}\n                    currKioskObj={params.currKioskObj}\n                    activeObjectId={params.activeObjectId}\n                    hoverObjectId={params.hoverObjectId}\n                    meshFloors={meshFloors}\n                    routeTube={routeTubes && routeTubes[index]}\n                    onPointerEnter={params.onPointerEnter}\n                    onPointerLeave={params.onPointerLeave}\n                    onPointerMove={params.onPointerMove}\n                    onClick={params.onClick}\n                    handleChangeFloor={handleChangeFloor}\n                    mode={mode}\n                />\n            ))}\n        </>\n    </group>)\n}","import type {Mesh} from \"three\";\r\nimport {Box3, Vector3} from \"three\";\r\n\r\nexport function get_camera_focus_object(objs:Mesh[], fov:number, aspectRatio: number, style: string) {\r\n    // config.STYLE\r\n    // config.CAMERA.fov\r\n\r\n    if (!Array.isArray(objs)) {\r\n        objs = [objs];\r\n    }\r\n    if (!objs.length) {\r\n        console.warn('get_camera_focus_object: no objects passed');\r\n        return { position: new Vector3(), target: new Vector3() };\r\n    }\r\n\r\n    const objsBoundingBox = objs.reduce((box, obj) => {\r\n        if (!obj.geometry.boundingBox) {\r\n            obj.geometry.computeBoundingBox();\r\n        }\r\n        if (obj.geometry.boundingBox) {\r\n            box.union(obj.geometry.boundingBox);\r\n        }\r\n        return box;\r\n    }, new Box3());\r\n\r\n    const obj_size = new Vector3();\r\n    objsBoundingBox.getSize(obj_size);\r\n\r\n    const center = new Vector3();\r\n    objsBoundingBox.getCenter(center);\r\n\r\n    objs[0].localToWorld(center);\r\n\r\n    // var max_length = (obj_size.x > obj_size.y && aspectRatio() < 1 ? obj_size.x : obj_size.y) / 2;\r\n    // var padding = max_length * 0.2;\r\n    // if (padding > 50) padding = 50;\r\n    // max_length += padding;\r\n    // var new_y = max_length / Math.tan(camera.fov * Math.PI / 360);\r\n\r\n    let tanFOV = Math.tan(Math.PI * fov / 360);\r\n    let padding = 1.1;\r\n    let new_width = (obj_size.x * padding) / 2 / (tanFOV * aspectRatio);\r\n    let new_height = (obj_size.y * padding) / 2 / tanFOV;\r\n    let new_y = Math.max(new_width, new_height);\r\n    let new_z = getCameraTiltPosition(new_y, style);\r\n\r\n    const target = new Vector3(center.x, 0, center.z);\r\n    const position = new Vector3(center.x, new_y, center.z + new_z);\r\n\r\n    // createjs.Ticker.framerate = 60;\r\n    // createjs.Tween.get(config.CONTROLS.target)\r\n    //     .to({ x: center.x, z: center.z }, 400);\r\n    // createjs.Tween.get(config.CAMERA.position)\r\n    //     .to({ x: center.x, y: new_y, z: center.z + new_z }, 400);\r\n\r\n    return {position, target};\r\n}\r\n\r\nfunction getCameraTiltPosition(y:number, style:string): number {\r\n    let angle = 60;\r\n    if (style == '2D') angle = 89.9;\r\n    return y / Math.tan(angle * Math.PI / 180);\r\n}","import { IFloorSelectorProps } from \"types\";\nimport styles from '../../MapBox.module.css';\n\ntype TFloorButtonProps = {\n    isActive: boolean,\n    onClick: (e: any) => void,\n    text: string,\n}\n\nconst FloorButton = ({isActive, onClick, text }: TFloorButtonProps) => {\n    return (\n\n        <div\n            className={`${styles.floor} ${styles.control_btn} ${isActive ? styles.active : ''}`} onClick={onClick}\n        >\n            {text}\n        </div>\n    )\n}\n\nconst FloorSelector = ({floors, selectedFloorIndex, handleFloorChange, accentColor}: IFloorSelectorProps) => {\n    const floorButtons: Array<TFloorButtonProps & {key: string}> = [];\n    for (let i = 0; i < floors; i++) {\n        const style = {display: 'flex', cursor: 'pointer', background: 'white'};\n        if (i === selectedFloorIndex) {\n            style.background = accentColor;\n        }\n        floorButtons.push({\n            key: `floor-change-btn-${i}`,\n            isActive: i === selectedFloorIndex,\n            onClick: handleFloorChange(i),\n            text: `Floor ${i + 1}`,\n        })\n    }\n\n    return (\n        <div className={`${styles.floors} ${styles.btn_group}`}>\n            {floorButtons.map(value => <FloorButton key={value.key} isActive={value.isActive} onClick={value.onClick} text={value.text} ></FloorButton>)}\n        </div>\n    );\n}\n\nexport default FloorSelector;\n","const ATM = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 248.08 247.92\">\n            <path d=\"M122,257.27c-5.39-1-10.81-1.79-16.17-2.92C46.21,241.73,4.83,187.22,8.2,125.78,11.48,65.91,58.61,16.49,118.57,10.07a123.9,123.9,0,0,1,136.17,105.3c9.72,65.14-34,126.76-99,139.57-4.56.9-9.16,1.56-13.74,2.33Zm119.67-124c0-60.41-49.38-109.74-109.76-109.66S22.16,73.17,22.33,133.47A109.8,109.8,0,0,0,131.87,242.79C192.39,242.87,241.67,193.71,241.67,133.26Z\" transform=\"translate(-8.01 -9.35)\" fill=\"#222\" />\n            <path d=\"M142.74,209.12v17.52h-20V209.15c-16.35-2.42-30.49-8.31-39.37-22.87-5.29-8.67-7.81-18.17-8.61-28.56H104c.63,12.29,6,21.26,18.19,26a31.6,31.6,0,0,0,.46-3.66c0-11.83-.09-23.66.1-35.49,0-3-.93-4.26-3.86-5.14-6.36-1.9-12.81-3.81-18.77-6.68-24.22-11.66-29.61-43.54-10.9-63.07,7.4-7.74,16.65-12,27-14.3,1.94-.43,3.89-.79,6.33-1.28V38.43H142.7c0,4.09.19,8-.06,12-.21,3.14,1,4.26,4,4.9C161.3,58.39,173.8,65,180.47,79.1c2.7,5.7,3.82,12.15,5.84,18.89h-29c-2.52-5-4.56-9.87-7.34-14.25-1.3-2-4-3.16-6.85-5.24-.21,2.37-.43,3.76-.43,5.15,0,9,.2,18-.12,27-.15,4,1,5.68,5,6.81a120.71,120.71,0,0,1,19.6,7.27c29.52,14.08,31.09,54.34,5.8,72.94a60.33,60.33,0,0,1-25.11,10.52Zm.17-25.19c12.19-2.62,18.79-10.58,18-21.25-.58-8.26-7.84-14.53-18-15.4Zm-20.7-73.36V79.24c-8.71,1.32-14.1,7.27-14.38,15.45C107.55,103.15,112,108.2,122.21,110.57Z\" transform=\"translate(-8.01 -9.35)\" fill=\"#222\" />\n        </svg>\n    )\n}\n\nexport default ATM;","\nconst DogPoopStation = () => {\n    return (\n\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 752.1 736.4\">\n            <ellipse transform=\"matrix(0.9488 -0.3159 0.3159 0.9488 -30.6034 83.2258)\" fill=\"#222\" cx=\"241.4\" cy=\"136\" rx=\"85.6\" ry=\"135.9\" />\n            <ellipse transform=\"matrix(0.3917 -0.9201 0.9201 0.3917 178.2635 541.6781)\" fill=\"#222\" cx=\"498.8\" cy=\"136\" rx=\"135.8\" ry=\"85.7\" />\n            <ellipse transform=\"matrix(0.665 -0.7469 0.7469 0.665 -223.1496 187.105)\" fill=\"#222\" cx=\"97\" cy=\"342.3\" rx=\"74.4\" ry=\"109.6\" />\n            <ellipse transform=\"matrix(0.6879 -0.7258 0.7258 0.6879 -19.9475 571.058)\" fill=\"#222\" cx=\"654\" cy=\"308.7\" rx=\"111.1\" ry=\"75.7\" />\n            <path fill=\"#222\" d=\"M747.3,578.7c-9.7-67.6-60.5-124.7-119.6-134.8l7.4,1.7c-48.9-3.7-96.1-32.2-126.4-76.3\n\t\tc-14.6-21.3-25.8-46.4-44.8-62.7c-15.5-13.3-34.9-19.4-54.1-22.6c-30.9-5.1-63.1-3.3-92.3,9.5s-55,37.1-68.5,69.4\n\t\tc-7.4,17.8-11,37.5-18.6,55.2C209.1,468,160.4,494,129.8,537c-22.6,31.8-34.8,73.1-33.6,114.1c0.3,10.8,1.6,22,6.5,31.3\n\t\tc4.9,9.5,13.1,16.1,21.4,21.7c40.2,27.1,90.4,34.1,135.1,19c56.2-19,105.8-71.2,164.1-65c21,2.2,40.7,12,60.7,19.4\n\tc73,27,154.5,22,224.6-13.7c9.8-5,19.6-10.8,26.8-19.9C748.9,626.8,750.6,601.3,747.3,578.7z\"/>\n        </svg>\n    )\n}\n\nexport default DogPoopStation;","\nconst Elevator = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 581.01 581\">\n            <path d=\"M480.87,597H125.13A112.77,112.77,0,0,1,12.5,484.34V128.66A112.77,112.77,0,0,1,125.13,16H480.87A112.77,112.77,0,0,1,593.5,128.66V484.34A112.77,112.77,0,0,1,480.87,597ZM125.13,42.39a86.35,86.35,0,0,0-86.24,86.27V484.34a86.35,86.35,0,0,0,86.24,86.27H480.87a86.35,86.35,0,0,0,86.24-86.27V128.66a86.35,86.35,0,0,0-86.24-86.27Z\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n            <path d=\"M428.75,273.7a24.08,24.08,0,0,1-17.18-7.13L303,158,194.42,266.57A24.3,24.3,0,0,1,160,232.21l143-143L446,232.21a24.31,24.31,0,0,1-17.2,41.49\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n            <path d=\"M303,538.3,160.05,395.35A24.31,24.31,0,0,1,194.44,361L303,469.53,411.56,361A24.31,24.31,0,1,1,446,395.35Z\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n        </svg>\n    )\n}\n\nexport default Elevator;","\nconst FamilyRestroom = () => {\n  return (\n    <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 648 604.44\">\n      <path d=\"M483.26,183.08v386.3c0,20.7,3.14,35.6,25.57,35.6,19.63,0,26.32-13.86,26.32-35.6v-214h10.61v214c0,22.64,8.55,35.6,28.5,35.6,19.25,0,27.17-11.72,27.17-35.6V183.08h12.24V322.52c0,20.29,1.88,32.84,20.75,32.84,15.42,0,21.58-12.38,21.58-32.84V193.68c0-60.18-27-74.85-90.31-74.85H515.52c-64.65,0-86.88,18.41-86.88,77.21V322.52c0,19,2.67,32.84,21.83,32.84,16.63,0,20.56-12.55,20.56-32.84V183.08\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n      <path d=\"M97.85,188.81,35.17,411.09H90V575.35c0,17.9,5.81,31.18,23,31.18,16.19,0,23.49-12.42,23.49-31.18V411.09h12.67V575.35c0,17.9,5.81,31.18,23.07,31.18,16.95,0,23.64-13.28,23.64-31.18V411.09h58.29L189.45,188.81l12.84-3.06L242,312.43c3.55,11.83,13.09,18.19,22.2,18.19,10.86,0,18.07-8.11,18.07-18.63,0-1.41,0-5.55-2.25-13.3L243.65,175.23c-12.45-42-35.09-56.37-75.2-56.37H127c-53.8,0-70.43,17.68-79.58,51.26L8,313.13c0,9.38,8.71,18,18.63,18,8.54,0,16.13-5.55,20-17.4l39-127,12.22,2.09\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n      <path d=\"M444.91,518.05l-12.71-42.8c-5.36-18.12-17.21-46.31-57.5-46.31H329.6c-40.48,0-52.27,28.19-57.94,46.31l-12.45,42.8c-3.94,11.24-.6,19.51,7.92,22,8.11,2.4,14.93-2.71,18.68-12.67l7.7-29.5c1.82-7,5.6-10,11-8.29,5.18,2.26,5.41,7.32,3.34,14.3,0,0-10.85,72.51-3.74,92,6.62,17.86,32,16,48,15.37,16.16.61,40.9,2.49,47.75-15.37,6.82-19.51-4.18-92-4.18-92-1.23-7-1.23-12,3.94-14.3,5-1.72,8.74,1.25,11,8.29l7.85,29.5c3.15,10,10.42,15.07,18.53,12.67,8.29-2.5,11.59-10.77,7.92-22m-93-102.53A48.95,48.95,0,1,0,303,366.57a48.87,48.87,0,0,0,48.83,48.95\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n      <path d=\"M542.27,104.18c25.92,0,47.77-21.76,47.77-49a48.11,48.11,0,0,0-47.77-48c-26,0-47.59,21.39-47.59,48,0,27.24,21.6,49,47.59,49\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n      <path d=\"M145.37,104.18c26,0,46.33-21.76,46.33-47.57S171.35,8.66,145.37,8.66s-46.91,22-46.91,48,21,47.57,46.91,47.57\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n    </svg>\n  )\n}\n\nexport default FamilyRestroom;","\nconst Management = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 772.14 772.14\">\n            <path d=\"M12.61,738.09V58.45C28.35,20.11,40.21,12.29,82.7,12.29q319.74,0,639.46,0c41.63,0,62.59,21,62.59,62.6q0,319.73,0,639.46c0,42.33-7.5,53.72-46.15,70.07H59C35.27,777.22,19.94,761.66,12.61,738.09ZM400.34,61.77c-107.07,0-214.15.2-321.22-.26-12.89-.06-16.48,3.72-16.45,16.58q.55,319.68,0,639.36c0,12.41,2.94,17,16.27,16.93q319.68-.57,639.36,0c13.72,0,17.24-4.07,17.22-17.54q-.62-318.92.09-637.82c0-15.33-5.44-17.56-18.71-17.5C611.41,62,505.88,61.77,400.34,61.77Z\" transform=\"translate(-12.61 -12.29)\" fill=\"#222\" />\n            <path d=\"M262.69,306.22V651.6H192.15V166.28c30.74,0,61.46-.43,92.13.58,3.59.11,8.35,7.62,10.16,12.58Q342.59,311.11,390.09,443c1.68,4.63,3.75,9.13,6.67,16.17,25-70.19,49-137.75,73-205.3,9.13-25.64,18-51.37,27.69-76.8,1.63-4.29,6.68-10.23,10.3-10.34,28.14-.86,56.31-.47,85.28-.47V651.68h-70.4V306.9l-3.4-.66c-40.49,114.34-81,228.68-122.82,346.81L266,305.68Z\" transform=\"translate(-12.61 -12.29)\" fill=\"#222\" />\n        </svg>\n\n    )\n}\n\nexport default Management;","\nconst PlayArea = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 670 772.73\">\n            <path d=\"M148.12,16l38.67,19.35c-1.08,3.94-1,5.26-1.61,5.69C146.81,68.47,142,105.72,153.25,148.13c4,15,10.9,27.7,8.38,46.15-3.85,28.24,2.4,58.08,5.93,87,7.47,61.24,15.95,122.37,24.06,183.54.22,1.7,1,3.32,5.06,4.77,0-6.85-.19-13.72,0-20.57q3.48-108,7-216.07c.49-15.79-.36-28.92-15.76-41.44-31.82-25.87-40.12-82.17-21.82-117.88,12.56-24.5,42.67-39.33,70-34.48,29.31,5.19,52.71,28.25,56.62,55.79,6.76,47.64-31.32,101.11-82.12,110.92-3.34,93-6.71,186.81-10.08,280.64l2,.51c8.65-25.2,17.71-50.26,25.86-75.62,12.44-38.67,20.78-45.73,62-45.4,25.4.2,51.66-5.14,75.71,8.28h0c10,20.57,21.3,40.63,29.58,61.87,8.15,20.92,13.22,43,22.11,64.6,0-22.62-1-45.31.36-67.85.9-14.63,2.86-30.09,8.56-43.36,15.8-36.77,49.23-48,85.26-51.6,53.64-5.4,91.8,16.8,118.08,67.53,4.33-48.86,8.76-95.83,12.54-142.85,1.47-18.36,2-36.83,1.8-55.24,0-4.14-3.6-9.86-7.24-12.11-38.47-23.86-61.06-77.9-50.47-122.24,7.85-32.89,45-57.77,80.43-53.93,34.42,3.72,64.49,35.87,65.08,69.56.87,50.08-32.63,99.45-78.55,111.54-8,98.49-16.21,198.19-24,297.92-1.24,15.88-.18,31.94-.77,47.89-.61,16.7-9.35,26.37-22.36,25.79-12.72-.56-20.17-9.65-20.3-25.88-.23-31.43,0-62.86-.16-94.28,0-5.15-.88-10.3-1.35-15.45l-4.94,0c-.44,5.2-1.27,10.39-1.28,15.59q-.09,149.16,0,298.31c0,6.16.36,12.61-1.28,18.41-3.27,11.61-9.78,20.13-23.7,20.13-13.76,0-20.67-8.24-24.18-19.78-1.75-5.74-1.29-12.24-1.29-18.4,0-55.13.07-110.26,0-165.39,0-5.75-1.1-11.49-1.68-17.24l-4.78-.27c-.79,5.38-2.25,10.76-2.26,16.14-.14,55.13,0,110.26,0,165.39,0,5.65.47,11.51-.8,16.92-3.05,13-9.77,22.67-25,22.54-12.68-.11-22.84-8.63-24.07-23.15-1.39-16.37-.93-32.92-.93-49.4q0-132.15.09-264.3c0-4.84-.76-9.69-1.16-14.53l-4.29-.33c-.77,4.87-2.16,9.73-2.2,14.6-.21,31.95.12,63.89-.24,95.83-.22,20.06-10.43,27-30.12,22.18-3.33-.82-7.64.15-10.89,1.63C405.73,577.45,398.51,575.6,393,561c-6.64-17.8-11.54-36.25-17.17-54.42-4.77-15.39-9.5-30.79-16.31-45.56,4.61,66.85,34.83,126.95,50.18,192.46H356c-.4,6.2-1,11.09-1,16-.07,30.92.13,61.83,0,92.74-.09,17.27-7.59,26.31-21.15,26.44s-21.28-8.67-21.46-26.19c-.33-30.39.05-60.8-.24-91.19-.05-5.32-1.93-10.62-3-15.92l-5.05.34c-.55,5.2-1.55,10.39-1.57,15.59-.14,27.31,0,54.62,0,81.92,0,4.12.27,8.27-.08,12.36-1.21,14.52-9.54,23.29-21.64,23.09s-20.85-9.05-21.09-23.66c-.51-30.9-.11-61.82-.09-92.74,0-5.55,0-11.1,0-18.3h-54.7c15.54-65.55,45.77-125.27,48.86-192.3a75.07,75.07,0,0,0-3.63,8.3c-9,29.51-17.65,59.11-26.79,88.56C220,569.27,213.22,577.24,200.64,574c-13.58-3.53-12.34-14-12.36-25.82-.06-33.23-.45-66.69-4.26-99.64-8.85-76.66-19.93-153.07-29.78-229.61-2.15-16.73-7.5-28.15-25.78-34.52-36.3-12.65-68.26-62.14-66.11-99.94,1.71-30,18.74-50.32,45.57-62.84,4.11-1.92,8.25-3.76,12.38-5.64Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n            <path d=\"M366.14,374.32c-10.69-26.47-3.48-53.71-3.51-80.64,0-5.71-.5-11.43-.77-17.14l-6.36-.05c0,7.36-.44,14.76.07,22.08,2.61,37.58-28.14,62.52-64,51.69-22.85-6.91-35.81-29.12-32.36-54.56.85-6.27.13-12.75.13-19.13l-7-.39c-.36,6.46-1.24,12.95-1,19.38.8,18.49,2.46,36.94,2.93,55.43.15,6-2.36,12-3.42,16.92-8-28.07-16.1-55.61-23.69-83.28-5.76-21-.8-30.34,20.52-31.34,21.48-1,43.14,2.79,64.75,3.44,7.73.23,15.57-3.86,23.32-3.71,15.13.3,30.72.3,45.19,4,11.92,3.08,10.3,15.27,7.59,25-4.42,15.82-10.3,31.26-14.23,47.19-3.64,14.79-5.54,30-8.21,45.07Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n            <path d=\"M573.81,274.55c-.08,26.89-23.52,50.26-50.32,50.17-27.05-.08-50.08-23.2-50.09-50.26,0-27.7,22.11-49.49,50.18-49.45S573.9,247,573.81,274.55Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n        </svg>\n\n    )\n}\n\nexport default PlayArea;","\nconst Restroom = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 732.38 614.5\">\n            <path d=\"M129.05,159.85a55.6,55.6,0,1,1,55.6,55.6,55.69,55.69,0,0,1-55.6-55.6m55.7,69.6h-1.5a133.5,133.5,0,0,0-132,134.6v58.6a27,27,0,0,0,54,0v-58.9a78.92,78.92,0,0,1,18.9-52.2v366a27,27,0,1,0,53.9,0V472.65h13.2v204.9a27,27,0,0,0,54,0V311.35a78.75,78.75,0,0,1,18.9,50.4v60.9a27,27,0,0,0,54,0v-61.2c-.8-73.1-60.5-132-133.4-132m596.5,182.1c-3.7-8-7.3-16.8-11.1-26.2-25.9-62.1-64.9-155.9-157.8-155.9s-132,93.9-157.7,156c-3.9,9.3-7.6,18.1-11.2,26.1a27,27,0,0,0,13.5,35.7,26.17,26.17,0,0,0,11.1,2.4,26.93,26.93,0,0,0,24.6-15.9c3.9-8.5,7.7-17.8,11.8-27.6,19.4-46.8,37.7-86.1,63.7-106.9l-70.4,174.4c-10,24.6,3.7,44.8,30.2,44.8h23.8v159.1a27,27,0,0,0,54,0V518.45h13.1v159.1a27,27,0,0,0,54,0V518.45h23.9c26.6,0,40.2-20.2,30.3-44.8l-70.4-174.4c26,20.7,44.2,60,63.7,106.8,4,9.8,8,19.2,11.8,27.7a26.93,26.93,0,0,0,24.6,15.9,27.41,27.41,0,0,0,11.1-2.4,27.12,27.12,0,0,0,13.4-35.7m-169-196.2a55.65,55.65,0,1,0-55.6-55.6,55.61,55.61,0,0,0,55.6,55.6m-228-125.3a14.08,14.08,0,0,0-14.1,14.1v580.7a14.1,14.1,0,1,0,28.2,0V104.15a14.08,14.08,0,0,0-14.1-14.1\" transform=\"translate(-51.24 -90.05)\" fill=\"#222\" />\n        </svg>\n\n    )\n}\n\nexport default Restroom;","\nconst Security = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 752.09 736.37\">\n            <path d=\"M28.78,317.59c2.71-4.8,5.33-9.66,8.15-14.4,11-18.36,31.75-27.56,53.13-23.59a49.46,49.46,0,0,1,40.14,39.7c.84,4.22,1.11,8.54,1.85,14.52h27.87c47.62,0,95.26-.18,142.88.32,10.18.1,15.63-2.52,18.93-12.91,19.06-60,38.82-119.85,58.39-179.92C350,120.53,340.16,99.37,349,73.44c6.33-18.56,27.67-33.56,47.89-33.67,21-.11,43.11,15.71,48.91,34.9,8.25,27.35-1.23,46.47-34.08,67.83,24.11,60,48.07,120.23,72.84,180.12,2,4.88,9.59,10.54,14.65,10.61,58.85.74,117.72.47,172.57.47,9.85-16.1,17.17-32.4,28.59-45,6.1-6.72,19.14-9.19,29.27-9.78,23.25-1.37,43.85,15.44,49.75,38,5.34,20.38-4.28,44.15-22.46,55.51-22.92,14.32-42.71,10.61-71.23-13.63-43,36.09-85.92,72.38-129.15,108.32-28,23.26-28.07,23-17.53,57.41q22.77,74.34,45.21,148.64c41.33,4,58.12,15.31,63.85,42.81,4.13,19.85-6.2,42.06-24.53,52.79-19.66,11.49-42.35,9.43-59.3-5.39-19.58-17.12-22.15-38.26-7.81-71.85-18.57-11.81-37.52-23.65-56.24-35.84-31.49-20.49-62.66-41.46-94.41-61.52-4.67-3-13.62-5-17.49-2.51-52.3,33.14-104,67.14-155.92,100.92,13.47,35.69,10.4,56.32-10.74,72.49-18,13.8-41,14.65-59.62,2.2s-26.72-35.64-20-58c7.12-23.77,26.9-35,63.15-34.91Q233,583.23,261.26,490.64L114.85,368c-17.47,11.79-38,19.64-57.78,5.48-11.49-8.21-19-22-28.29-33.28Z\" transform=\"translate(-28.78 -39.77)\" fill=\"#222\" />\n        </svg>\n\n    )\n}\n\nexport default Security;","import { IAmenitiesInteractiveList, IFloorSelectorProps, TMapMode } from \"types\"\nimport FloorSelector from \"./FloorSelector\"\nimport { MouseEventHandler } from \"react\";\nimport styles from '../../MapBox.module.css';\nimport ATM from \"components/Icons/ATM\";\nimport DogPoopStation from \"components/Icons/DogPoopStation\";\nimport Elevator from \"components/Icons/Elevator\";\nimport FamilyRestroom from \"components/Icons/FamilyRestroom\";\nimport Management from \"components/Icons/Management\";\nimport PlayArea from \"components/Icons/PlayArea\";\nimport Restroom from \"components/Icons/Restroom\";\nimport Security from \"components/Icons/Security\";\n\nconst Names = ['atm', 'dog-poop-station', 'elevator', 'family-restroom', 'management', 'playarea', 'restroom', 'security'] as const;\n\ntype TIconName = (typeof Names)[number];\n\ntype TAmenityIconProps = {\n    type: TIconName,\n}\n\ntype TElement =  undefined | (() => JSX.Element);\n\nconst AmenityIcon = ({type}: TAmenityIconProps) => {\n    let name: TElement;\n    name = undefined;\n\n    switch (type) {\n        case 'atm':\n                name = ATM;\n            break;\n        case 'dog-poop-station':\n                name = DogPoopStation;\n            break;\n        case 'elevator':\n                name = Elevator;\n            break;\n        case 'family-restroom':\n                name = FamilyRestroom;\n            break;\n        case 'management':\n                name = Management;\n            break;\n        case 'playarea':\n                name = PlayArea;\n            break;\n        case 'restroom':\n                name = Restroom;\n            break;\n        case 'security':\n                name = Security;\n            break;\n    \n        default:\n            break;\n    }\n    if (name !== undefined) {\n        const Comp = name;\n        return (\n            <>\n                <Comp></Comp>\n            </>\n        )\n    } else {\n        return null;\n    }\n\n}\n\n\nconst UIComponent = ({\n    floors,\n    accentColor,\n    selectedFloorIndex,\n    handleFloorChange,\n    amenitiesList,\n    zoomIn,\n    zoomOut,\n    reset,\n    clearRoute,\n    handleAmenityClick,\n    mode,\n}: IFloorSelectorProps & {\n    amenitiesList: IAmenitiesInteractiveList[],\n    zoomIn?: MouseEventHandler<HTMLDivElement>,\n    zoomOut?: MouseEventHandler<HTMLDivElement>,\n    reset?: () => void,\n    clearRoute?: MouseEventHandler<HTMLDivElement>,\n    handleAmenityClick: (type: string) => void,\n    mode?: TMapMode,\n}\n) => {\n    const handleResetClick: MouseEventHandler = (e) => {\n        e.preventDefault();\n        if (reset instanceof Function) {\n            reset();\n        }\n    }\n return(\n        <div id={styles['threejs-map-wrapper']}>\n            <div id={styles['threejs-map']}>\n                <div id={styles['map_controls']} className={`${!floors? 'hide' : ''}`}>\n                    <div className={styles['btn_group']}>\n                        <div onClick={handleResetClick} className={`${styles['reset']} ${styles['control_btn']}`}>RESET</div>\n                        <div onClick={clearRoute} className={`${styles['clear_route']} ${styles['control_btn']} ${clearRoute? '' : styles.hide}`}>Clear Route</div>\n                    </div>\n                    <FloorSelector  accentColor={accentColor} floors={floors} selectedFloorIndex={selectedFloorIndex} handleFloorChange={handleFloorChange}/>\n                    <div className={`${styles['btn_group']} ${styles['zoom_btns']}`}>\n                        <div onClick={zoomOut} className={`${styles['zoom-out']} ${styles['control_btn']}`}>–</div>\n                        <div onClick={zoomIn} className={`${styles['zoom-in']} ${styles['control_btn']}`}>+</div>\n                    </div>\n                </div>\n                <div id={styles['mapit2_loader']} className={styles['hide']}>Loading map, please wait...</div>\n                    {mode !== 'edit' &&\n                        <div className={`${styles.amenities}`} style={{ display: 'block' }}>\n                            {amenitiesList.map((amenity, index) => (\n                                <div key={`amenity-${amenity.name}-${index}`} className={`${styles.amenity}`} style={{ backgroundColor: '#000000' }} onClick={() => handleAmenityClick(amenity.type)}>\n                                    <div className={styles.img}>\n                                        <AmenityIcon type={amenity.type as TIconName}></AmenityIcon>\n                                        {/* <img src={amenity.imageUrl} alt=\"\" /> */}\n                                    </div>\n                                    <div className={`${styles.name}`}>{amenity.name}</div>\n                                </div>\n                            ))}\n                        </div>\n                    }\n            </div>\n        </div>\n )   \n}\n\nexport default UIComponent;\n","import React, {useEffect} from \"react\";\nimport styles from '../../MapBox.module.css';\n\nexport const MapCenterMarker = () => {\n    const kioskElementRef = React.useRef<HTMLDivElement>(null);\n\n    // todo figure out better way\n    useEffect(() => {\n        if (!kioskElementRef.current) return;\n        const kioskElement = kioskElementRef.current;\n        const svgOrigin = document.querySelector('#map-special-svg-kiosk svg');\n        let svgClone:Node;\n        if (svgOrigin) {\n            svgClone = svgOrigin.cloneNode(true);\n            kioskElement.appendChild(svgClone);\n        }\n\n        return () => {\n            if (svgClone) {\n                kioskElement.removeChild(svgClone);\n            }\n        }\n    }, []);\n\n    return <>\n        <div className={styles['mapCenterMarker']}></div>\n        <div className={styles['kioskMarker']} ref={kioskElementRef}></div>\n    </>\n}","import { createContext, useContext, useState } from \"react\"\nimport { Object3D } from \"three\";\nimport { IExtMesh } from \"types\";\n\n\ntype TMeshObjectContext = {\n    MeshObject: IExtMesh[] | null;\n    SetMeshObject: React.Dispatch<React.SetStateAction<IExtMesh[] | null>>;\n}\n\nconst MeshObjectContext = createContext<TMeshObjectContext | null>(null);\n\nexport default function MeshObjectContextProvider({children}: {children: React.ReactNode}) {\n    const [MeshObject, SetMeshObject] = useState<IExtMesh[] | null>(null);\n\n    return (\n        <MeshObjectContext.Provider\n            value={{\n                MeshObject,\n                SetMeshObject,\n            }}\n        >\n            {children}\n        </MeshObjectContext.Provider>\n    )\n}\n\nexport function useMeshObjectContext() {\n    const context = useContext(MeshObjectContext);\n\n    if (context === undefined) {\n        throw new Error(\"useMeshObjectContext must be used within MeshObjectContextProvider\");\n    }\n\n    return context;\n}\n","import { HtmlProps } from \"@react-three/drei/web/Html\";\nimport { useThree } from \"@react-three/fiber\";\nimport { MeshType, getMaterial } from \"Hooks/useMeshFloors/getMaterialAndGeometry\";\nimport { useMeshObjectContext } from \"contexts/MeshObjectContextProvider\";\nimport { hex_to_color } from \"helpers/misc\";\nimport { MapObj } from \"mapitApiTypes\";\nimport { MouseEventHandler, SyntheticEvent, useEffect, useRef, useState, useTransition } from \"react\";\nimport { Button, Col, Form, FormControl, FormControlProps, Nav, Row, Tab, Tabs } from \"react-bootstrap\"\nimport { DoubleSide, Euler, MeshBasicMaterial, MeshPhongMaterial, Object3D, Vector3 } from \"three\";\n// import { TextGeometry } from \"three/examples/jsm/geometries/TextGeometry\";\nimport { TextGeometry } from \"three-stdlib\";\nimport { IConfig, IJsonConfig, IMeshParamsTmp } from \"types\";\n\n\n\ninterface IMapboxForm {\n    floorIndex: number;\n    meshFloors: IMeshParamsTmp;\n    config: IConfig;\n    data: any;\n    setData: (index: number, data: MapObj) => void;\n    selectedId: string;\n    centerId: string;\n}\n\nconst mainTabs = ['retailer', 'special', 'custom', ''] as const;\ntype TMainTabsKey = (typeof mainTabs)[number];\nconst isTMainTabsKey = (x: any): x is TMainTabsKey => mainTabs.includes(x);\n\nconst retailerTabs = ['retail_name', 'retail_text', 'retail_logo', 'custom_text', 'custom_image', ''] as const;\ntype TRetailerTabsKey = (typeof retailerTabs)[number];\nconst isTRetailerTabsKey = (x: any): x is TRetailerTabsKey => retailerTabs.includes(x);\n\nconst specialTabs = ['kiosk', 'amenity', ''] as const;\ntype TSpecialTabsKey = (typeof specialTabs)[number];\nconst isTSpecialTabsKey = (x: any): x is TSpecialTabsKey => specialTabs.includes(x);\n\nconst getDefaultMapOjbValues = (centerId: string): MapObj => ({\n\tid: '',\n\tcenter_id: centerId,\n\tretailer_id: '',\n\tkiosk_id: null,\n\tmap_obj_name: '',\n\tobj_type: 'retailer',\n\tlayer_type: 'retail_name',\n\tvalue: '',\n\tcustom_text: '',\n\tcustom_image: '',\n\thover_text: '',\n\tbg_color: '',\n\ttransparent: 0,\n\ttext_color: '',\n\tsize: '8',\n\trotate: '0',\n\toffsetX: '0',\n\toffsetY: '0',\n});\n\nconst MapboxForm = (params: IMapboxForm) => {\n\n    const {data, setData, selectedId, centerId, config, floorIndex, meshFloors} = params;\n\n    const [mainTabKey, setMainTabKey] = useState<TMainTabsKey>('');\n    const [retailerTabsKey, setRetailerTabsKey] = useState<TRetailerTabsKey>('');\n    const [specialTabsKey, setSpecialTabsKey] = useState<TSpecialTabsKey>('');\n    const [formData, setFormData] = useState<MapObj>(getDefaultMapOjbValues(centerId));\n    const [rotation, setRotation] = useState<number | undefined>(undefined);\n    const context = useMeshObjectContext();\n    const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n    const [isPending, startTransition] = useTransition();\n\n    const handleChangeTab = (k:  any | null) => {\n        const key: TMainTabsKey | TRetailerTabsKey | TSpecialTabsKey | null = k;\n        if (key !== null) {\n            if (isTMainTabsKey(key)) {\n                setMainTabKey(key);\n                if (formData.id && formData.obj_type !== key && mainTabKey && key && mainTabKey !== key) {\n                    formData.obj_type = key;\n                    if (key === 'retailer') {\n                        formData.layer_type = 'retail_name';\n                    } else if (key === 'special') {\n                        formData.layer_type = 'kiosk';\n                        formData.retailer_id = '';\n                    } else if (key === 'custom') {\n                        formData.layer_type = 'custom_text';\n                        formData.retailer_id = '';\n                    }\n                    setMainTabKey('');\n                    setRetailerTabsKey('');\n                    setSpecialTabsKey('');\n                    setFormData({...formData});\n                    updateData({\n                        ...formData,\n                    });\n                }\n            } else if (isTRetailerTabsKey(key)) {\n                setRetailerTabsKey(key);\n                if (formData.id && formData.layer_type !== key && retailerTabsKey && key && retailerTabsKey !== key) {\n                    formData.layer_type = key;\n                    setRetailerTabsKey('');\n                    setFormData({...formData});\n                    updateData({\n                        ...formData,\n                    })\n                }\n            } else if (isTSpecialTabsKey(key)) {\n                setSpecialTabsKey(key);\n                if (formData.id && formData.layer_type !== key && specialTabsKey && key && specialTabsKey !== key) {\n                    formData.layer_type = key;\n                    formData.kiosk_id = '';\n                    formData.retailer_id = '';\n                    formData.value = '';\n                    setFormData({ ...formData });\n                    updateData({ ...formData });\n                }\n            }\n        }\n    }\n\n    const handleRotateChange = (e: any) => {\n        formData.rotate = e.target.value;\n        setFormData({...formData});\n        const index = data.map_objs.findIndex((value: MapObj) => value.id === formData.id);\n        if (index !== -1) {\n            data.map_objs[index] = {...formData};\n            setData(index, {...data});\n        }\n    }\n\n    const handleReset = () => {\n        const defaultValues = getDefaultMapOjbValues(formData.center_id);\n        setFormData({\n            ...defaultValues,\n            id: formData.id,\n        });\n        updateData({\n            ...defaultValues,\n            id: formData.id,\n        });\n    }\n\n    const updateData = (formData: MapObj) => {\n        // setFormData({...formData});\n        const index = data.map_objs.findIndex((value: MapObj) => value.id === formData.id);\n        if (index !== -1) {\n            data.map_objs[index] = { ...formData };\n            setData(index, { ...data });\n            // if (timeoutRef.current) {\n            //     clearTimeout(timeoutRef.current);\n            // }\n\n            // timeoutRef.current = setTimeout(() => {\n            // }, 300);\n        }\n    }\n\n    const handleChangeRetailer = (e: any) => {\n        if (e.target.value) {\n            formData.retailer_id = e.target.value;\n            formData.kiosk_id = '';\n            setFormData({...formData});\n            updateData({...formData});\n        }\n    }\n\n    const handleChangeKiosk = (e: any) => {\n        if (e.target.value) {\n            formData.kiosk_id = e.target.value;\n            formData.retailer_id = '';\n            setFormData({...formData});\n            updateData({...formData});\n        }\n    }\n\n    const handleChangeAmenity = (e: any) => {\n        if (e.target.value) {\n            formData.value = e.target.value; \n            setFormData({...formData});\n            updateData({...formData});\n        }\n    }\n\n    const changeValue = (name: string, value: string) => {\n        if (name === 'custom_image' && context?.MeshObject && context.MeshObject.length <= 1) {\n            formData.custom_image = value;\n            setFormData({...formData});\n            updateData({...formData});\n        }\n        context?.MeshObject?.forEach((obj, index) => {\n            if (!obj.userData.position) {\n                obj.userData.position = new Vector3();\n                obj.userData.position.copy(obj.position);\n            }\n            const position = new Vector3();\n            position.copy(obj.userData.position);\n            switch (name) {\n                case 'custom_text':\n                    if (index === 0) break;\n                    formData.custom_text = value;\n                    if (['retail_text', 'custom_text'].includes(formData.layer_type)) {\n                        let text_geometry = new TextGeometry(formData.custom_text, {\n                            font: obj.userData.font,\n                            size: parseInt(formData.size),\n                            height: 0.01,\n                            curveSegments: 4,\n                        });\n                        text_geometry.center();\n                        obj.geometry.dispose();\n                        obj.geometry = text_geometry;\n                    }\n                    break;\n                case 'custom_image':\n                    if (index === 0) break;\n                    formData.custom_image = value;\n                    updateData({\n                        ...formData,\n                    })\n                    break;\n                case 'size':\n                    if (index === 0) break;\n                    formData.size = value;\n                    if (!(['retail_logo', 'kiosk', 'amenity', 'custom_image'].includes(formData.layer_type))) {\n                        let text = '';\n                        if (formData.layer_type === 'retail_name' && obj.userData.retail_name) {\n                            text = obj.userData.retail_name;\n                        } else if (['retail_text', 'custom_text'].includes(formData.layer_type)) {\n                            text = formData.custom_text;\n                        }\n                        let text_geometry = new TextGeometry(text, {\n                            font: obj.userData.font,\n                            size: parseInt(formData.size),\n                            height: 0.01,\n                            curveSegments: 4,\n                        });\n                        text_geometry.center();\n                        obj.geometry.dispose();\n                        obj.geometry = text_geometry;\n                    } else if (formData.layer_type === 'retail_logo' || formData.layer_type === 'custom_image') {\n                        if (timeoutRef.current) {\n                            clearInterval(timeoutRef.current);\n                        }\n                        timeoutRef.current = setTimeout(() => {\n                            updateData({ ...formData });\n                        }, 300);\n                    } else if (['amenity', 'kiosk'].includes(formData.layer_type)) {\n                        startTransition(() => {\n                            setFormData({ ...formData });\n                            updateData({ ...formData });\n                        })\n                    } \n                    break;\n\n                case 'rotate':\n                    if (index === 0) break;\n                    formData.rotate = value;\n                    obj.rotation.set(\n                        obj.rotation.x,\n                        obj.rotation.y,\n                        parseFloat(formData.rotate) * Math.PI / 180\n                    );\n                    break;\n\n                case 'offsetX':\n                    if (index === 0) break;\n                    position.x += parseFloat(value);\n                    obj.position.setX(position.x);\n                    formData.offsetX = value;\n                    break;\n\n                case 'offsetY':\n                    if (index === 0) break;\n                    position.y += parseFloat(value);\n                    obj.position.setY(position.y);\n                    formData.offsetY = value;\n                    break;\n\n                case 'text_color':\n                    if (index === 0) break;\n                    formData.text_color = value;\n                    if (['retail_name', 'retail_text', 'custom_text'].includes(formData.layer_type)) {\n                        const material_settings = {\n                            // color: hex_to_color(formData.text_color),\n                            color: formData.text_color,\n                            transparent: true,\n                            side: DoubleSide,\n                            depthWrite: false,\n                            depthTest: false,\n                        };\n                        let text_material = new MeshPhongMaterial(material_settings);\n                        obj.material = text_material;\n                    } else if (\n                        formData.layer_type === 'retail_logo' ||\n                        formData.layer_type === 'custom_image' ||\n                        (formData.obj_type === 'special' && formData.layer_type === 'kiosk' && formData.kiosk_id != null) ||\n                        (formData.obj_type === 'special' && formData.layer_type === 'amenity' && formData.value !== '')) {\n                        startTransition(() => {\n                            updateData({\n                                ...formData,\n                                text_color: formData.text_color.replace('#', ''),\n                            });\n                        })\n                    }\n                    break;\n\n                case 'bg_color':\n                    if (index !== 0) break;\n                    formData.bg_color = value;\n                    let meshType: MeshType = 'store';\n                    if (obj.object_id?.startsWith('big-store')) {\n                        meshType = 'big-store';\n                    }\n                    obj.material = getMaterial(\n                        config,\n                        meshType,\n                        formData.map_obj_name,\n                        formData.bg_color,\n                        formData.transparent === \"1\"? true : false,\n                        {[formData.map_obj_name]: {...formData}}\n                        );\n                    // updateData({...formData});\n                    break;\n            \n                default:\n                    break;\n            }\n            startTransition(() => {\n                setFormData({ ...formData })\n                setData(0, { ...data });\n            });\n        })\n    }\n    const handleChange = (e: any) => {\n        const target = e.target as HTMLInputElement;\n        const value = target.value;\n        const name = target.name;\n        changeValue(name, value);\n    }\n\n    useEffect(() => {\n        if (data && data.map_objs && selectedId) {\n            const index = data.map_objs.findIndex((value: any) => value.map_obj_name === selectedId);\n            if (index !== -1) {\n                setFormData({...data.map_objs[index]});\n            }\n        }\n        return () => {\n            setRetailerTabsKey('');\n        }\n    }, [data, selectedId])\n\n    useEffect(() => {\n        if (formData.obj_type) {\n            handleChangeTab(formData.obj_type);\n        }\n        if (formData.layer_type) {\n            handleChangeTab(formData.layer_type);\n        }\n    }, [formData])\n\n    const handleDecrement = (key: 'size' | 'rotate' | 'offsetX' | 'offsetY') => () => {\n        if (Object.hasOwn(formData, key)) {\n            let value = parseInt(formData[key]);\n            value -= 1;\n            changeValue(key, value.toString());\n        }\n    }\n\n    const handleIncrement = (key: 'size' | 'rotate' | 'offsetX' | 'offsetY') => () => {\n        if (Object.hasOwn(formData, key)) {\n            let value = parseInt(formData[key]);\n            value += 1;\n            changeValue(key, value.toString());\n        }\n    }\n\n\n    return (\n        <>\n            <Tab.Container activeKey={mainTabKey}>\n                <Col>\n                    <Row>\n                        <Col sm=\"9\">\n                            <Nav\n                                variant=\"tabs\"\n                                className=\"flex-row\"\n                                // activeKey={mainTabKey}\n                                onSelect={handleChangeTab}\n                            >\n                                <Nav.Item>\n                                    <Nav.Link eventKey={\"retailer\"}>Retailer</Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link eventKey={\"special\"}>Special</Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link eventKey={\"custom\"}>Custom</Nav.Link>\n                                </Nav.Item>\n                            </Nav>\n                        </Col>\n                        <Col sm=\"3\">\n                            {/* \n                //@ts-ignore */}\n                            <Button variant=\"danger\" className=\"mb-3\" onClick={handleReset}>Reset</Button>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col sm=\"12\">\n                            <Tab.Content>\n                                <Tab.Pane eventKey={\"retailer\"}>\n                    <Form.Select className=\"mb-3\" aria-label=\"Choose a Retailer\" value={formData.retailer_id?? ''} onChange={handleChangeRetailer}>\n                        <option value={''} disabled hidden>Choose a Retalier...</option>\n                        {data.retailers?.map((value: any) => <option key={`retailer-${value.id}`} value={value.id}>{value.retail_name} - {value.location}</option>)}\n                    </Form.Select>\n                    <Tabs\n                        variant=\"pills\"\n                        id=\"retail-tab-form\"\n                        activeKey={retailerTabsKey}\n                        onSelect={handleChangeTab}\n                    >\n                        <Tab eventKey=\"retail_name\" title=\"Retail Name\"></Tab>\n                        <Tab eventKey=\"retail_logo\" title=\"Retail Logo\"></Tab>\n                        <Tab eventKey=\"retail_text\" title=\"Custom Text\">\n                            <Form.Group className=\"m-3\">\n                                <Row className=\"align-items-center mb-3\">\n                                    <Col sm=\"2\">\n                                        <Form.Label className=\"mb-0\">Text</Form.Label>\n                                    </Col>\n                                    <Col sm=\"10\">\n                                        <Form.Control\n                                            as=\"textarea\"\n                                            name=\"custom_text\"\n                                            rows={3}\n                                            value={formData.custom_text}\n                                            onChange={handleChange}\n                                        />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Tab>\n\n                    </Tabs>\n                                </Tab.Pane>\n                                <Tab.Pane eventKey={\"special\"}>\n                    <Tabs\n                        variant=\"pills\"\n                        id=\"special-tab-form\"\n                        activeKey={specialTabsKey}\n                        onSelect={handleChangeTab}\n                     >\n                        <Tab eventKey=\"kiosk\" title=\"Kiosk\">\n                            <Form.Select className=\"m-3\" aria-label=\"Choose a Retailer\" value={formData.kiosk_id?? ''} onChange={handleChangeKiosk}>\n                                <option value={''} disabled hidden>Choose a Kiosk...</option>\n                                {data.kiosks?.map((value: any) => <option key={`kiosk-${value.id}`} value={value.id}>{value.title}</option>)}\n                            </Form.Select>\n                        </Tab>\n                        <Tab eventKey=\"amenity\" title=\"Amenity\">\n                            <Form.Select className=\"m-3\" aria-label=\"Choose a Retailer\" value={formData.value} onChange={handleChangeAmenity}>\n                                <option value={''} disabled hidden>Choose Amenity...</option>\n                                {Object.keys(data.amenities)?.map((value: string) => (\n                                    <option key={`amenity-${value}`} value={value}>{data.amenities[value].name}</option>\n                                ))}\n                            </Form.Select>\n                        </Tab>\n                    </Tabs>\n                                </Tab.Pane>\n                                <Tab.Pane eventKey={\"custom\"}>\n                    <Tabs\n                        variant=\"pills\"\n                        id=\"custom-tab-form\"\n                        activeKey={retailerTabsKey}\n                        onSelect={handleChangeTab}\n                     >\n                        <Tab eventKey=\"custom_text\" title=\"Text\">\n                            <Form.Group className=\"m-3\">\n                                <Row className=\"align-items-center mb-3\">\n                                    <Col sm=\"2\">\n                                        <Form.Label className=\"mb-0\">text</Form.Label>\n                                    </Col>\n                                    <Col sm=\"10\">\n                                        <Form.Control\n                                            name=\"custom_text\"\n                                            as=\"textarea\"\n                                            rows={3}\n                                            value={formData.custom_text}\n                                            onChange={handleChange}\n                                        />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Tab>\n                        <Tab eventKey=\"custom_image\" title=\"Image\">\n                            <Form.Group className=\"m-3\">\n                                <Row className=\"align-items-center mb-3\">\n                                    <Col sm=\"2\">\n                                        <Form.Label className=\"mb-0\">Image URL</Form.Label>\n                                    </Col>\n                                    <Col sm=\"10\">\n                                        <Form.Control\n                                            type=\"string\"\n                                            name=\"custom_image\"\n                                            value={formData.custom_image}\n                                            onChange={handleChange}\n                                        />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Tab>\n                    </Tabs>\n                                </Tab.Pane>\n                            </Tab.Content>\n                        </Col>\n                    </Row>\n                </Col>\n            </Tab.Container>\n            <Form.Group className=\"mb-3 mt-3\">\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"4\" className=\"d-flex justify-content-start\">\n                        <Form.Label className=\"mb-0\">Size</Form.Label>\n                    </Col>\n                    <Col sm=\"8\">\n                        <Row>\n                            <Col sm=\"2\" className=\"d-flex\">\n                                <Button onClick={handleDecrement('size')} variant=\"outline-dark\">-</Button>\n                            </Col>\n                            <Col sm=\"4\">\n                                <Form.Control\n                                    name=\"size\"\n                                    type=\"number\"\n                                    value={formData.size}\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                            <Col sm=\"2\" className=\"d-flex justify-content-end\">\n                                <Button onClick={handleIncrement('size')} variant=\"outline-dark\">+</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"4\" className=\"d-flex justify-content-start\">\n                        <Form.Label className=\"mb-0\">Rotate</Form.Label>\n                    </Col>\n                    <Col sm=\"8\">\n                        <Row>\n                            <Col sm=\"2\" className=\"d-flex\">\n                                <Button onClick={handleDecrement('rotate')} variant=\"outline-dark\">-</Button>\n                            </Col>\n                            <Col sm=\"4\">\n                                <Form.Control\n                                    name=\"rotate\"\n                                    type=\"number\"\n                                    value={rotation ?? formData.rotate}\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                            <Col sm=\"2\" className=\"d-flex justify-content-end\">\n                                <Button onClick={handleIncrement('rotate')} variant=\"outline-dark\">+</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"4\" className=\"d-flex justify-content-start\">\n                        <Form.Label className=\"mb-0\">Offset X</Form.Label>\n                    </Col>\n                    <Col sm=\"8\">\n                        <Row>\n                            <Col sm=\"2\" className=\"d-flex\">\n                                <Button onClick={handleDecrement('offsetX')} variant=\"outline-dark\">-</Button>\n                            </Col>\n                            <Col sm=\"4\">\n\n                                <Form.Control\n                                    name=\"offsetX\"\n                                    type=\"number\"\n                                    value={formData.offsetX}\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                            <Col sm=\"2\" className=\"d-flex justify-content-end\">\n                                <Button onClick={handleIncrement('offsetX')} variant=\"outline-dark\">+</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"4\" className=\"d-flex justify-content-start\">\n                        <Form.Label className=\"mb-0\">Offset Y</Form.Label>\n                    </Col>\n                    <Col sm=\"8\">\n                        <Row>\n                            <Col sm=\"2\" className=\"d-flex\">\n                                <Button onClick={handleDecrement('offsetY')} variant=\"outline-dark\">-</Button>\n                            </Col>\n                            <Col sm=\"4\">\n                                <Form.Control\n                                    name=\"offsetY\"\n                                    type=\"number\"\n                                    value={formData.offsetY}\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                            <Col sm=\"2\" className=\"d-flex justify-content-end\">\n                                <Button onClick={handleIncrement('offsetY')} variant=\"outline-dark\">+</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"3\" className=\"d-flex justify-content-start\">\n                        <Form.Label className=\"mb-0\">BG Color</Form.Label>\n                    </Col>\n                    <Col sm=\"3\" className=\"p-0\">\n                        <Form.Control\n                            name=\"bg_color\"\n                            type=\"string\"\n                            value={formData.bg_color}\n                            onChange={handleChange}\n                        />\n                    </Col>\n                    <Col sm=\"2\">\n                        <Form.Control\n                            type=\"color\"\n                            name=\"bg_color\"\n                            value={formData.bg_color}\n                            onChange={handleChange}\n                        />\n                    </Col>\n                    <Col sm=\"4\">\n                        <Row>\n                            <Col sm=\"3\">\n                                <input\n                                        name=\"transparent\"\n                                        id=\"transparent\"\n                                        type=\"checkbox\"\n                                        value={formData.transparent}\n                                        onChange={handleChange}\n                                ></input>\n                                    {/* <Form.Control\n                                        name=\"transparent\"\n                                        type=\"checkbox\"\n                                        value={formData.transparent}\n                                        onChange={handleChange}\n                                    ></Form.Control> */}\n                            </Col>\n                            <Col sm=\"9\" className=\"p-0\">\n                                <Form.Label for=\"transparent\" className=\"mb-0\">Transparent</Form.Label>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                {['retail_name', 'custom_text', 'retail_text'].includes(formData.layer_type) && \n                    <Row className=\"align-items-center mb-3\">\n                        <Col sm=\"4\" className=\"d-flex justify-content-start\">\n                            <Form.Label className=\"mb-0\">Text Color</Form.Label>\n                        </Col>\n                        <Col sm=\"5\">\n                            <Form.Control\n                                type=\"string\"\n                                name=\"text_color\"\n                                value={formData.text_color}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                        <Col sm=\"3\">\n                            <Form.Control\n                                name=\"text_color\"\n                                type=\"color\"\n                                value={formData.text_color}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                    </Row>\n                }\n                {['kiosk', 'amenity'].includes(formData.layer_type) && \n                    <Row className=\"align-items-center mb-3\">\n                        <Col sm=\"3\">\n                            <Form.Label className=\"mb-0\">Icon Color</Form.Label>\n                        </Col>\n                        <Col sm=\"6\">\n                            <Form.Control\n                                type=\"string\"\n                                name=\"text_color\"\n                                value={formData.text_color}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                        <Col sm=\"3\">\n                            <Form.Control\n                                type=\"color\"\n                                name=\"text_color\"\n                                value={formData.text_color}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                    </Row>\n                }\n            </Form.Group>\n        </>\n    );\n}\n\nexport default MapboxForm;\n","import React, {MouseEventHandler, useCallback, useEffect, useMemo, useRef, useState} from \"react\";\nimport {Canvas, ThreeEvent, useThree} from \"@react-three/fiber\";\nimport useMeshFloors, { textLogoNamePrefix } from \"Hooks/useMeshFloors\";\nimport {SceneProperties} from \"./SceneProperties\";\nimport {CameraProperties} from \"./CameraProperties\";\nimport {Mesh, Object3D} from \"three\";\nimport {IAmenitiesInteractiveList, IExtMesh, IJsonConfig, IMeshParams, TMapMode} from \"types\";\nimport {FloorsMap} from \"./FloorsMap\";\nimport {useMapit2Data} from \"../../useMapit2Data\";\nimport {MapIt2Response, MapObj} from \"../../mapitApiTypes\";\nimport { Stats } from '@react-three/drei';\nimport UIComponent from \"components/UIComponent\";\nimport {MapCenterMarker} from \"./MapCenterMarker\";\nimport { delete_route_path } from \"helpers/route.helpers\";\nimport { useMeshObjectContext } from \"contexts/MeshObjectContextProvider\";\nimport MapboxForm from \"components/MapboxForm/MapboxForm\";\nimport styles from '../../MapBox.module.css';\n\nconst amenitiesList: IAmenitiesInteractiveList[] = [\n    {\n        name: 'ATM',\n        type: 'atm',\n        imageUrl: '/assets/threejs/assets/img/amenities/atm.svg?color=FFFFFF',\n    },\n    {\n        name: 'Management',\n        type: 'management',\n        imageUrl: '/assets/threejs/assets/img/amenities/management.svg?color=FFFFFF',\n    },\n    {\n        name: 'Kids Area',\n        type: 'playarea',\n        imageUrl: '/assets/threejs/assets/img/amenities/playarea.svg?color=FFFFFF',\n    },\n    {\n        name: 'Restroom',\n        type: 'restroom',\n        imageUrl: '/assets/threejs/assets/img/amenities/restroom.svg?color=FFFFFF',\n    },\n    {\n        name: 'Elevator',\n        type: 'elevator',\n        imageUrl: '/assets/threejs/assets/img/amenities/elevator.svg?color=FFFFFF',\n    },\n    {\n        name: 'Security',\n        type: 'security',\n        imageUrl: '/assets/threejs/assets/img/amenities/security.svg?color=FFFFFF',\n    },\n] \n\ninterface ISceneComponentProps {\n    CENTER_ID?: string;\n    mapitData?: MapIt2Response;\n    config?: Partial<IJsonConfig>;\n    stats?: boolean;\n    selectedActiveObjectId: string;\n    setSelectedActiveObjectId: React.Dispatch<React.SetStateAction<string>>;\n    mode?: TMapMode;\n    handleChangeMapitData: (index: number, data: MapObj) => void;\n}\n\nexport interface IZoomData {\n    direction: 'in' | 'out';\n}\n\nconst SceneComponent = (params:ISceneComponentProps) => {\n    const data = useMapit2Data({ mapitData:params.mapitData, CENTER_ID: params.CENTER_ID });\n    const [selectedFloorIndex, setSelectedFloorIndex] = useState<number>(-1);\n\n    const { selectedActiveObjectId, setSelectedActiveObjectId } = params;\n\n    const [amenityTargetType, setAmenityTargetType] = useState<string>('');\n    const [zoom, setZoom] = useState<IZoomData | null>(null);\n\n    const handleFloorChange = (floorIndex: number): MouseEventHandler<HTMLDivElement> => (e) => {\n        setSelectedFloorIndex(floorIndex);\n    }\n\n    const { mode, handleChangeMapitData } = params;\n\n    const meshFloors = useMeshFloors(data, params.config, mode);\n    const mapCenterMarkerRef = useRef(null);\n    const labelRef = useRef<HTMLDivElement>(null);\n    const [ currentHoveredObject, setCurrentHoveredObject ] = useState<Object3D | null>(null);\n    const meshObjectContext = useMeshObjectContext();\n\n    const config = meshFloors.config;\n    const floors = meshFloors.floors;\n    const meshParams = meshFloors.meshParams;\n\n\n    // if selectedActiveObjectId is not -1, then it is set to the DEFAULT_SELECTED_STORE\n    let activeObjectId = config?.DEFAULT_SELECTED_STORE ?? '';\n    if (selectedActiveObjectId) {\n        activeObjectId = selectedActiveObjectId;\n    } else if (amenityTargetType) {\n        activeObjectId = '';\n    }\n\n    useEffect(() => {\n        // console.log('useEffect currentHoveredObject', currentHoveredObject)\n        document.body.style.cursor = currentHoveredObject? 'pointer' : 'default';\n    }, [currentHoveredObject]);\n\n    const [ currKioskObj, currKioskFloorIndex, kioskError ]: [ Mesh | null, number, string ] = useMemo(() => {\n        if (!config) {\n            return [ null, 0, '' ] // not an error - loading/initializing\n        }\n        let kioskError = '';\n        let currKioskObj: Mesh | null = null;\n        let currKioskFloorIndex = 0;\n        if (config.KIOSKS && config.KIOSKS[config.KIOSK]) {\n            const kioskMapObjName = config.KIOSKS[config.KIOSK].map_obj_name;\n            const currKioskMeshParams = meshParams.flat().find(mesh => mesh.object_id === kioskMapObjName);\n            if (currKioskMeshParams) {\n                currKioskObj = currKioskMeshParams.mesh;\n                currKioskFloorIndex = currKioskMeshParams.floor_index;\n            }\n        } else {\n            if (config?.ROLE === 'WEBSITE') {\n                kioskError = \"This Kiosk is not assigned in MAP, so routes won't work. Please assign the Kiosk from Edit Map first.\";\n            }\n\n            console.error('Kiosk not found in config');\n            kioskError = 'Map initialization error';\n        }\n\n        return [ currKioskObj, currKioskFloorIndex, kioskError]\n    }, [config, meshParams]);\n\n    const resetHandle = () => {\n        setSelectedFloorIndex(currKioskFloorIndex);\n        setSelectedActiveObjectId('');\n    }\n\n    useEffect(() => {\n        console.debug({meshFloors});\n        const currKioskLogo = currKioskObj? meshFloors.storeLogos.flat().find(storeLogo => storeLogo.storeLogo.object_id === 'custom-layer-' + (currKioskObj as IExtMesh).object_id)?.storeLogo : null;\n        if (currKioskLogo && mode !== 'edit') {\n            currKioskLogo.userData.htmlContent = <MapCenterMarker />\n        }\n        return () => {\n            if (currKioskLogo) {\n                currKioskLogo.userData.htmlContent = null;\n            }\n        }\n    }, [meshFloors, currKioskObj]);\n\n    useEffect(() => {\n        if (meshFloors.meshParams && meshFloors.meshParams.length && selectedActiveObjectId && meshObjectContext?.SetMeshObject) {\n            const object = meshFloors.meshParams[selectedFloorIndex === -1? 0 : selectedFloorIndex].find((value) => value.object_id === selectedActiveObjectId);\n            if (object) {\n                //@ts-ignore\n                handleMeshObjectContext(object);\n            }\n            //@ts-ignore\n        }\n    }, [meshFloors])\n\n    const handleMeshObjectContext = (object: IExtMesh) => {\n        if (meshObjectContext?.SetMeshObject) {\n            const textParams = meshFloors.textParams[selectedFloorIndex === -1? 0 : selectedFloorIndex]?.find(value => {\n                return value.textMesh.object_id === `${textLogoNamePrefix}${(object as IExtMesh).object_id}`\n            })\n\n            const logoParams = meshFloors.storeLogos[selectedFloorIndex === -1? 0 : selectedFloorIndex]?.find(value => {\n                return value.storeLogo.object_id === `${textLogoNamePrefix}${(object as IExtMesh).object_id}`\n            })\n\n            const result = [object as IExtMesh];\n\n            if (textParams) {\n                result.push(textParams.textMesh);\n            }\n\n            if (logoParams) {\n                result.push(logoParams.storeLogo)\n            }\n\n            meshObjectContext.SetMeshObject([...result]);\n        }\n    }\n\n    const onClick = useCallback((e: ThreeEvent<MouseEvent>) => {\n        e.stopPropagation();\n        // console.log('onClick', e.object)\n\n        const targetId = (e.object as IExtMesh).object_id;\n        handleMeshObjectContext(e.object as IExtMesh);\n        setSelectedActiveObjectId(targetId ?? '');\n        // console.log('set active object', targetId);\n        setAmenityTargetType('');\n    }, [selectedFloorIndex, meshFloors.meshParams.length]);\n\n    const handleAmenityClick = useCallback((type: string) => {\n        setAmenityTargetType(type)\n        setSelectedActiveObjectId('')\n    }, []);\n\n    const onCameraMove = useCallback((e: any) => {\n        if (!mapCenterMarkerRef || !mapCenterMarkerRef.current) {\n            return\n        }\n    }, []);\n\n    const onPointerEnter = useCallback((e: ThreeEvent<PointerEvent>) => {\n        e.stopPropagation();\n        // console.log('onPointerEnter', e.object)\n        if (!e.object.userData.storeName) {\n            // console.warn('onPointerEnter no storeName', e.object);\n            return;\n        }\n        setCurrentHoveredObject(e.object);\n    }, []);\n\n    const onPointerLeave = useCallback((e: ThreeEvent<PointerEvent>) => {\n        e.stopPropagation();\n        // console.log('onPointerLeave', e.object)\n        setCurrentHoveredObject(null);\n    }, []);\n\n    const onPointerMove = (e: ThreeEvent<PointerEvent>) => {\n        e.stopPropagation();\n        // console.log('onPointerMove', e.object)\n\n        if (labelRef && labelRef.current && e.object.userData.storeName && e.object.userData.storeName !== '') {\n            labelRef.current.style.top = `${e.offsetY - 65}px`;\n            labelRef.current.style.left = `${e.offsetX}px`;\n            labelRef.current.style.display = 'block';\n        }\n    }\n\n    if (!config || !meshFloors.meshParams.length) {\n        console.warn('LOADING MAP')\n        return <div>Loading Map</div>\n    }\n\n    if (kioskError) {\n        return <div>{kioskError}</div>\n    }\n\n    const currentFloorIndex = selectedFloorIndex > -1 ? selectedFloorIndex : currKioskFloorIndex;\n\n    if (!currKioskObj) {\n        console.error('NO KIOSK OBJECT FOUND');\n        return <div>Map initialization error</div>\n    }\n\n    // make sure that meshFloors conditionals are not null\n    const meshFloorsChecked: IMeshParams = meshFloors as IMeshParams;\n\n\n    let hoverObject = currentHoveredObject as IExtMesh\n    let hoverObjectId = '';\n    if (hoverObject && hoverObject.object_id) {\n        hoverObjectId = hoverObject.object_id;\n    }\n\n\n\n    return (\n        <>\n            {mode === 'edit' &&\n                <div className={styles['mapbox-admin-form']}>\n                    <MapboxForm\n                        floorIndex={currentFloorIndex}\n                        meshFloors={meshFloors}\n                        config={config}\n                        data={data}\n                        setData={handleChangeMapitData}\n                        selectedId={selectedActiveObjectId}\n                        centerId={params.CENTER_ID as string}\n                    />\n                </div>\n            }\n            <div style={{ position: 'relative' }}>\n                <UIComponent accentColor={config.ACCENT_COLOR.getStyle()} floors={floors.length} selectedFloorIndex={currentFloorIndex} handleFloorChange={handleFloorChange} amenitiesList={amenitiesList} handleAmenityClick={handleAmenityClick} reset={resetHandle} zoomIn={() => setZoom({ direction: 'in' })} zoomOut={() => setZoom({ direction: 'out' })} mode={mode} />\n                <Canvas flat>\n                    {/* {params.stats? <Stats /> : null } */}\n                    <SceneProperties background={config.MAP_BACKGROUND_COLOR} />\n                    <CameraProperties near={1} far={10000} />\n                    {/*<axesHelper args={[5000]} />*/}\n\n                    <ambientLight intensity={1} color={'#c4c4c4'} />\n                    <directionalLight position={[0, 400, 0]} color={'#ffffff'} intensity={0.3} />\n                    <directionalLight position={[0, 0, 400]} color={'#c4c4c4'} intensity={0.2} />\n                    <directionalLight position={[0, 0, -400]} color={'#c4c4c4'} intensity={0.2} />\n                    <FloorsMap\n                        onCameraMove={onCameraMove}\n                        meshFloors={meshFloorsChecked}\n                        activeObjectId={activeObjectId}\n                        hoverObjectId={hoverObjectId}\n                        currKioskObj={currKioskObj}\n                        routeTargetId={activeObjectId}\n                        currentFloorIndex={currentFloorIndex}\n                        onPointerEnter={onPointerEnter}\n                        onPointerLeave={onPointerLeave}\n                        onPointerMove={onPointerMove}\n                        onClick={onClick}\n                        handleChangeFloor={handleFloorChange}\n                        amenityTargetType={amenityTargetType}\n                        escalatorNodes={meshFloors.escalator_nodes}\n                        zoom={zoom}\n                        mode={mode}\n                    />\n                </Canvas>\n                <div ref={labelRef}\n                    style={{\n                        position: 'absolute',\n                        padding: 10,\n                        background: '#ffffff',\n                        fontWeight: 600,\n                        color: '#000000',\n                        fontSize: 16,\n                        display: currentHoveredObject ? 'block' : 'none',\n                        top: 300,\n                        left: 400,\n                        opacity: .8,\n                    }}\n                >\n                    <div>\n                        {currentHoveredObject && currentHoveredObject.userData.storeName}\n                    </div>\n                </div>\n\n            </div>\n        </>\n    )\n};\n\n\n\nexport default SceneComponent;\n","import {useEffect, useState} from \"react\";\nimport {MapIt2Response} from \"./mapitApiTypes\";\n\ninterface useMapIt2DataProps {\n    CENTER_ID?: string;\n    mapitData?: MapIt2Response;\n}\n\n/**\n * This is a hook that fetches the mapit2 data from the server by CENTER_ID. or uses the data passed in.\n * @param CENTER_ID\n * @param mapitData\n */\nexport function useMapit2Data({ CENTER_ID, mapitData }: useMapIt2DataProps) {\n    const [data, setData] = useState<MapIt2Response|null>(null);\n\n    if (!CENTER_ID && !mapitData) {\n        console.error('useMapit2Data requires either CENTER_ID or mapitData');\n    }\n\n    useEffect(() => {\n        if (mapitData) {\n            setData(mapitData);\n            return;\n        }\n\n        if (!CENTER_ID) {\n            return;\n        }\n        // const url = '/data/mapit2/' + CENTER_ID + '.json';\n        const url = `https://test.mycenterdeals.com/api/mapit2/data?center=${CENTER_ID}&time=1693919608355`;\n        console.log('URL', url);\n\n        fetch(url)\n            .then(response => response.json())\n            .then((response: MapIt2Response) => {\n                setData({...response});\n            });\n\n    }, [CENTER_ID, mapitData]);\n\n    return data;\n}","import React, { useEffect, useState } from 'react';\nimport styles from './MapBox.module.css';\nimport SceneComponent from './components/SceneComponent/SceneComponent';\nimport {isMapIt2Response, MapIt2Response, MapObj} from \"./mapitApiTypes\";\nimport {IJsonConfig, TMapMode} from \"./types\";\nimport MeshObjectContextProvider from 'contexts/MeshObjectContextProvider';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport interface IAppProps {\n    CENTER_ID?: string;\n    mapitData?: unknown;\n    config?: Partial<IJsonConfig>;\n    stats?: boolean;\n    mode: TMapMode;\n}\n\ntype TFormMapObjData = {\n  index: number,\n  data: MapObj,\n}\n\nfunction MapBox({ CENTER_ID, mapitData, config, stats, mode }: IAppProps) {\n\n  const [selectedActiveObjectId, setSelectedActiveObjectId] = useState<string>('');\n  const [mapData, setMapData] = useState<any>(undefined);\n  const [formMapObjData, setFormMapObjData] = useState<TFormMapObjData[]>([]);\n\n  useEffect(() => {\n    setMapData(mapitData);\n  }, [mapitData])\n\n  const handleChangeMapitData = (index: number,newData: MapObj) => {\n    const itemIndex = formMapObjData.findIndex((item) => item.data.id === newData.id);\n\n    if (itemIndex !== -1) {\n      formMapObjData[itemIndex] = {index, data: {...newData}};\n    } else {\n      formMapObjData.push({index, data: {...newData}})\n    }\n\n    setFormMapObjData([...formMapObjData]);\n    console.group('handleChangeMapitData')\n    console.debug({newData});\n    console.debug({formMapObjData});\n    console.groupEnd();\n  }\n\n  const getMapitData = (): MapIt2Response => {\n    if (mapData && mapData.map_objs) {\n      if (formMapObjData) {\n        formMapObjData.forEach((value) => {\n          const index = mapData.map_objs.findIndex((item: MapObj) => item.id === value.data.id);\n          if (index !== -1) {\n            console.debug({index});\n            mapData.map_objs[index] = { ...value.data };\n          }\n        })\n        console.debug({formMapObjData: {...formMapObjData}});\n        console.debug({map_objs: {...mapData.map_objs}});\n      }\n    }\n\n    return mapData;\n  }\n\n  if (!mapitData && !CENTER_ID) {\n    console.error('Please provide either mapitData or CENTER_ID');\n    return null;\n  }\n  if (!CENTER_ID && !isMapIt2Response(mapitData)) {\n    console.error('mapitData is not a valid MapIt2Response');\n    return null;\n  }\n\n  return (\n    <MeshObjectContextProvider>\n      <div className={`${styles['mapbox-component']} ${mode !== 'edit'? styles.view : ''}`}>\n          <SceneComponent setSelectedActiveObjectId={setSelectedActiveObjectId} selectedActiveObjectId={selectedActiveObjectId} stats={stats} mapitData={getMapitData()} CENTER_ID={CENTER_ID} config={config} mode={mode} handleChangeMapitData={handleChangeMapitData}  />\n        <div className={styles.hide}>\n          <div id=\"map-special-svg-kiosk\">\n            <svg id=\"Layer_2\" data-name=\"Layer 2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 443.83 787.21\">\n              <path d=\"M451,587.7V8.14H7.14V589.5H111.43V730.89H71.27L38.59,763.58v31.78H416.36V764.93l-34.05-34H345.78V587.7ZM396.91,71.23v452.7H59.85V71.23Z\" transform=\"translate(-7.14 -8.14)\" fill=\"#222222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-atm\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 248.08 247.92\">\n              <path d=\"M122,257.27c-5.39-1-10.81-1.79-16.17-2.92C46.21,241.73,4.83,187.22,8.2,125.78,11.48,65.91,58.61,16.49,118.57,10.07a123.9,123.9,0,0,1,136.17,105.3c9.72,65.14-34,126.76-99,139.57-4.56.9-9.16,1.56-13.74,2.33Zm119.67-124c0-60.41-49.38-109.74-109.76-109.66S22.16,73.17,22.33,133.47A109.8,109.8,0,0,0,131.87,242.79C192.39,242.87,241.67,193.71,241.67,133.26Z\" transform=\"translate(-8.01 -9.35)\" fill=\"#222\" />\n              <path d=\"M142.74,209.12v17.52h-20V209.15c-16.35-2.42-30.49-8.31-39.37-22.87-5.29-8.67-7.81-18.17-8.61-28.56H104c.63,12.29,6,21.26,18.19,26a31.6,31.6,0,0,0,.46-3.66c0-11.83-.09-23.66.1-35.49,0-3-.93-4.26-3.86-5.14-6.36-1.9-12.81-3.81-18.77-6.68-24.22-11.66-29.61-43.54-10.9-63.07,7.4-7.74,16.65-12,27-14.3,1.94-.43,3.89-.79,6.33-1.28V38.43H142.7c0,4.09.19,8-.06,12-.21,3.14,1,4.26,4,4.9C161.3,58.39,173.8,65,180.47,79.1c2.7,5.7,3.82,12.15,5.84,18.89h-29c-2.52-5-4.56-9.87-7.34-14.25-1.3-2-4-3.16-6.85-5.24-.21,2.37-.43,3.76-.43,5.15,0,9,.2,18-.12,27-.15,4,1,5.68,5,6.81a120.71,120.71,0,0,1,19.6,7.27c29.52,14.08,31.09,54.34,5.8,72.94a60.33,60.33,0,0,1-25.11,10.52Zm.17-25.19c12.19-2.62,18.79-10.58,18-21.25-.58-8.26-7.84-14.53-18-15.4Zm-20.7-73.36V79.24c-8.71,1.32-14.1,7.27-14.38,15.45C107.55,103.15,112,108.2,122.21,110.57Z\" transform=\"translate(-8.01 -9.35)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-management\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 772.14 772.14\">\n              <path d=\"M12.61,738.09V58.45C28.35,20.11,40.21,12.29,82.7,12.29q319.74,0,639.46,0c41.63,0,62.59,21,62.59,62.6q0,319.73,0,639.46c0,42.33-7.5,53.72-46.15,70.07H59C35.27,777.22,19.94,761.66,12.61,738.09ZM400.34,61.77c-107.07,0-214.15.2-321.22-.26-12.89-.06-16.48,3.72-16.45,16.58q.55,319.68,0,639.36c0,12.41,2.94,17,16.27,16.93q319.68-.57,639.36,0c13.72,0,17.24-4.07,17.22-17.54q-.62-318.92.09-637.82c0-15.33-5.44-17.56-18.71-17.5C611.41,62,505.88,61.77,400.34,61.77Z\" transform=\"translate(-12.61 -12.29)\" fill=\"#222\" />\n              <path d=\"M262.69,306.22V651.6H192.15V166.28c30.74,0,61.46-.43,92.13.58,3.59.11,8.35,7.62,10.16,12.58Q342.59,311.11,390.09,443c1.68,4.63,3.75,9.13,6.67,16.17,25-70.19,49-137.75,73-205.3,9.13-25.64,18-51.37,27.69-76.8,1.63-4.29,6.68-10.23,10.3-10.34,28.14-.86,56.31-.47,85.28-.47V651.68h-70.4V306.9l-3.4-.66c-40.49,114.34-81,228.68-122.82,346.81L266,305.68Z\" transform=\"translate(-12.61 -12.29)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-playarea\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 670 772.73\">\n              <path d=\"M148.12,16l38.67,19.35c-1.08,3.94-1,5.26-1.61,5.69C146.81,68.47,142,105.72,153.25,148.13c4,15,10.9,27.7,8.38,46.15-3.85,28.24,2.4,58.08,5.93,87,7.47,61.24,15.95,122.37,24.06,183.54.22,1.7,1,3.32,5.06,4.77,0-6.85-.19-13.72,0-20.57q3.48-108,7-216.07c.49-15.79-.36-28.92-15.76-41.44-31.82-25.87-40.12-82.17-21.82-117.88,12.56-24.5,42.67-39.33,70-34.48,29.31,5.19,52.71,28.25,56.62,55.79,6.76,47.64-31.32,101.11-82.12,110.92-3.34,93-6.71,186.81-10.08,280.64l2,.51c8.65-25.2,17.71-50.26,25.86-75.62,12.44-38.67,20.78-45.73,62-45.4,25.4.2,51.66-5.14,75.71,8.28h0c10,20.57,21.3,40.63,29.58,61.87,8.15,20.92,13.22,43,22.11,64.6,0-22.62-1-45.31.36-67.85.9-14.63,2.86-30.09,8.56-43.36,15.8-36.77,49.23-48,85.26-51.6,53.64-5.4,91.8,16.8,118.08,67.53,4.33-48.86,8.76-95.83,12.54-142.85,1.47-18.36,2-36.83,1.8-55.24,0-4.14-3.6-9.86-7.24-12.11-38.47-23.86-61.06-77.9-50.47-122.24,7.85-32.89,45-57.77,80.43-53.93,34.42,3.72,64.49,35.87,65.08,69.56.87,50.08-32.63,99.45-78.55,111.54-8,98.49-16.21,198.19-24,297.92-1.24,15.88-.18,31.94-.77,47.89-.61,16.7-9.35,26.37-22.36,25.79-12.72-.56-20.17-9.65-20.3-25.88-.23-31.43,0-62.86-.16-94.28,0-5.15-.88-10.3-1.35-15.45l-4.94,0c-.44,5.2-1.27,10.39-1.28,15.59q-.09,149.16,0,298.31c0,6.16.36,12.61-1.28,18.41-3.27,11.61-9.78,20.13-23.7,20.13-13.76,0-20.67-8.24-24.18-19.78-1.75-5.74-1.29-12.24-1.29-18.4,0-55.13.07-110.26,0-165.39,0-5.75-1.1-11.49-1.68-17.24l-4.78-.27c-.79,5.38-2.25,10.76-2.26,16.14-.14,55.13,0,110.26,0,165.39,0,5.65.47,11.51-.8,16.92-3.05,13-9.77,22.67-25,22.54-12.68-.11-22.84-8.63-24.07-23.15-1.39-16.37-.93-32.92-.93-49.4q0-132.15.09-264.3c0-4.84-.76-9.69-1.16-14.53l-4.29-.33c-.77,4.87-2.16,9.73-2.2,14.6-.21,31.95.12,63.89-.24,95.83-.22,20.06-10.43,27-30.12,22.18-3.33-.82-7.64.15-10.89,1.63C405.73,577.45,398.51,575.6,393,561c-6.64-17.8-11.54-36.25-17.17-54.42-4.77-15.39-9.5-30.79-16.31-45.56,4.61,66.85,34.83,126.95,50.18,192.46H356c-.4,6.2-1,11.09-1,16-.07,30.92.13,61.83,0,92.74-.09,17.27-7.59,26.31-21.15,26.44s-21.28-8.67-21.46-26.19c-.33-30.39.05-60.8-.24-91.19-.05-5.32-1.93-10.62-3-15.92l-5.05.34c-.55,5.2-1.55,10.39-1.57,15.59-.14,27.31,0,54.62,0,81.92,0,4.12.27,8.27-.08,12.36-1.21,14.52-9.54,23.29-21.64,23.09s-20.85-9.05-21.09-23.66c-.51-30.9-.11-61.82-.09-92.74,0-5.55,0-11.1,0-18.3h-54.7c15.54-65.55,45.77-125.27,48.86-192.3a75.07,75.07,0,0,0-3.63,8.3c-9,29.51-17.65,59.11-26.79,88.56C220,569.27,213.22,577.24,200.64,574c-13.58-3.53-12.34-14-12.36-25.82-.06-33.23-.45-66.69-4.26-99.64-8.85-76.66-19.93-153.07-29.78-229.61-2.15-16.73-7.5-28.15-25.78-34.52-36.3-12.65-68.26-62.14-66.11-99.94,1.71-30,18.74-50.32,45.57-62.84,4.11-1.92,8.25-3.76,12.38-5.64Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n              <path d=\"M366.14,374.32c-10.69-26.47-3.48-53.71-3.51-80.64,0-5.71-.5-11.43-.77-17.14l-6.36-.05c0,7.36-.44,14.76.07,22.08,2.61,37.58-28.14,62.52-64,51.69-22.85-6.91-35.81-29.12-32.36-54.56.85-6.27.13-12.75.13-19.13l-7-.39c-.36,6.46-1.24,12.95-1,19.38.8,18.49,2.46,36.94,2.93,55.43.15,6-2.36,12-3.42,16.92-8-28.07-16.1-55.61-23.69-83.28-5.76-21-.8-30.34,20.52-31.34,21.48-1,43.14,2.79,64.75,3.44,7.73.23,15.57-3.86,23.32-3.71,15.13.3,30.72.3,45.19,4,11.92,3.08,10.3,15.27,7.59,25-4.42,15.82-10.3,31.26-14.23,47.19-3.64,14.79-5.54,30-8.21,45.07Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n              <path d=\"M573.81,274.55c-.08,26.89-23.52,50.26-50.32,50.17-27.05-.08-50.08-23.2-50.09-50.26,0-27.7,22.11-49.49,50.18-49.45S573.9,247,573.81,274.55Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-restroom\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 732.38 614.5\">\n              <path d=\"M129.05,159.85a55.6,55.6,0,1,1,55.6,55.6,55.69,55.69,0,0,1-55.6-55.6m55.7,69.6h-1.5a133.5,133.5,0,0,0-132,134.6v58.6a27,27,0,0,0,54,0v-58.9a78.92,78.92,0,0,1,18.9-52.2v366a27,27,0,1,0,53.9,0V472.65h13.2v204.9a27,27,0,0,0,54,0V311.35a78.75,78.75,0,0,1,18.9,50.4v60.9a27,27,0,0,0,54,0v-61.2c-.8-73.1-60.5-132-133.4-132m596.5,182.1c-3.7-8-7.3-16.8-11.1-26.2-25.9-62.1-64.9-155.9-157.8-155.9s-132,93.9-157.7,156c-3.9,9.3-7.6,18.1-11.2,26.1a27,27,0,0,0,13.5,35.7,26.17,26.17,0,0,0,11.1,2.4,26.93,26.93,0,0,0,24.6-15.9c3.9-8.5,7.7-17.8,11.8-27.6,19.4-46.8,37.7-86.1,63.7-106.9l-70.4,174.4c-10,24.6,3.7,44.8,30.2,44.8h23.8v159.1a27,27,0,0,0,54,0V518.45h13.1v159.1a27,27,0,0,0,54,0V518.45h23.9c26.6,0,40.2-20.2,30.3-44.8l-70.4-174.4c26,20.7,44.2,60,63.7,106.8,4,9.8,8,19.2,11.8,27.7a26.93,26.93,0,0,0,24.6,15.9,27.41,27.41,0,0,0,11.1-2.4,27.12,27.12,0,0,0,13.4-35.7m-169-196.2a55.65,55.65,0,1,0-55.6-55.6,55.61,55.61,0,0,0,55.6,55.6m-228-125.3a14.08,14.08,0,0,0-14.1,14.1v580.7a14.1,14.1,0,1,0,28.2,0V104.15a14.08,14.08,0,0,0-14.1-14.1\" transform=\"translate(-51.24 -90.05)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-family-restroom\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 648 604.44\">\n              <path d=\"M483.26,183.08v386.3c0,20.7,3.14,35.6,25.57,35.6,19.63,0,26.32-13.86,26.32-35.6v-214h10.61v214c0,22.64,8.55,35.6,28.5,35.6,19.25,0,27.17-11.72,27.17-35.6V183.08h12.24V322.52c0,20.29,1.88,32.84,20.75,32.84,15.42,0,21.58-12.38,21.58-32.84V193.68c0-60.18-27-74.85-90.31-74.85H515.52c-64.65,0-86.88,18.41-86.88,77.21V322.52c0,19,2.67,32.84,21.83,32.84,16.63,0,20.56-12.55,20.56-32.84V183.08\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M97.85,188.81,35.17,411.09H90V575.35c0,17.9,5.81,31.18,23,31.18,16.19,0,23.49-12.42,23.49-31.18V411.09h12.67V575.35c0,17.9,5.81,31.18,23.07,31.18,16.95,0,23.64-13.28,23.64-31.18V411.09h58.29L189.45,188.81l12.84-3.06L242,312.43c3.55,11.83,13.09,18.19,22.2,18.19,10.86,0,18.07-8.11,18.07-18.63,0-1.41,0-5.55-2.25-13.3L243.65,175.23c-12.45-42-35.09-56.37-75.2-56.37H127c-53.8,0-70.43,17.68-79.58,51.26L8,313.13c0,9.38,8.71,18,18.63,18,8.54,0,16.13-5.55,20-17.4l39-127,12.22,2.09\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M444.91,518.05l-12.71-42.8c-5.36-18.12-17.21-46.31-57.5-46.31H329.6c-40.48,0-52.27,28.19-57.94,46.31l-12.45,42.8c-3.94,11.24-.6,19.51,7.92,22,8.11,2.4,14.93-2.71,18.68-12.67l7.7-29.5c1.82-7,5.6-10,11-8.29,5.18,2.26,5.41,7.32,3.34,14.3,0,0-10.85,72.51-3.74,92,6.62,17.86,32,16,48,15.37,16.16.61,40.9,2.49,47.75-15.37,6.82-19.51-4.18-92-4.18-92-1.23-7-1.23-12,3.94-14.3,5-1.72,8.74,1.25,11,8.29l7.85,29.5c3.15,10,10.42,15.07,18.53,12.67,8.29-2.5,11.59-10.77,7.92-22m-93-102.53A48.95,48.95,0,1,0,303,366.57a48.87,48.87,0,0,0,48.83,48.95\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M542.27,104.18c25.92,0,47.77-21.76,47.77-49a48.11,48.11,0,0,0-47.77-48c-26,0-47.59,21.39-47.59,48,0,27.24,21.6,49,47.59,49\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M145.37,104.18c26,0,46.33-21.76,46.33-47.57S171.35,8.66,145.37,8.66s-46.91,22-46.91,48,21,47.57,46.91,47.57\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-elevator\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 581.01 581\">\n              <path d=\"M480.87,597H125.13A112.77,112.77,0,0,1,12.5,484.34V128.66A112.77,112.77,0,0,1,125.13,16H480.87A112.77,112.77,0,0,1,593.5,128.66V484.34A112.77,112.77,0,0,1,480.87,597ZM125.13,42.39a86.35,86.35,0,0,0-86.24,86.27V484.34a86.35,86.35,0,0,0,86.24,86.27H480.87a86.35,86.35,0,0,0,86.24-86.27V128.66a86.35,86.35,0,0,0-86.24-86.27Z\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n              <path d=\"M428.75,273.7a24.08,24.08,0,0,1-17.18-7.13L303,158,194.42,266.57A24.3,24.3,0,0,1,160,232.21l143-143L446,232.21a24.31,24.31,0,0,1-17.2,41.49\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n              <path d=\"M303,538.3,160.05,395.35A24.31,24.31,0,0,1,194.44,361L303,469.53,411.56,361A24.31,24.31,0,1,1,446,395.35Z\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-security\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 752.09 736.37\">\n              <path d=\"M28.78,317.59c2.71-4.8,5.33-9.66,8.15-14.4,11-18.36,31.75-27.56,53.13-23.59a49.46,49.46,0,0,1,40.14,39.7c.84,4.22,1.11,8.54,1.85,14.52h27.87c47.62,0,95.26-.18,142.88.32,10.18.1,15.63-2.52,18.93-12.91,19.06-60,38.82-119.85,58.39-179.92C350,120.53,340.16,99.37,349,73.44c6.33-18.56,27.67-33.56,47.89-33.67,21-.11,43.11,15.71,48.91,34.9,8.25,27.35-1.23,46.47-34.08,67.83,24.11,60,48.07,120.23,72.84,180.12,2,4.88,9.59,10.54,14.65,10.61,58.85.74,117.72.47,172.57.47,9.85-16.1,17.17-32.4,28.59-45,6.1-6.72,19.14-9.19,29.27-9.78,23.25-1.37,43.85,15.44,49.75,38,5.34,20.38-4.28,44.15-22.46,55.51-22.92,14.32-42.71,10.61-71.23-13.63-43,36.09-85.92,72.38-129.15,108.32-28,23.26-28.07,23-17.53,57.41q22.77,74.34,45.21,148.64c41.33,4,58.12,15.31,63.85,42.81,4.13,19.85-6.2,42.06-24.53,52.79-19.66,11.49-42.35,9.43-59.3-5.39-19.58-17.12-22.15-38.26-7.81-71.85-18.57-11.81-37.52-23.65-56.24-35.84-31.49-20.49-62.66-41.46-94.41-61.52-4.67-3-13.62-5-17.49-2.51-52.3,33.14-104,67.14-155.92,100.92,13.47,35.69,10.4,56.32-10.74,72.49-18,13.8-41,14.65-59.62,2.2s-26.72-35.64-20-58c7.12-23.77,26.9-35,63.15-34.91Q233,583.23,261.26,490.64L114.85,368c-17.47,11.79-38,19.64-57.78,5.48-11.49-8.21-19-22-28.29-33.28Z\" transform=\"translate(-28.78 -39.77)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-dog-poop-station\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 752.1 736.4\">\n              <ellipse transform=\"matrix(0.9488 -0.3159 0.3159 0.9488 -30.6034 83.2258)\" fill=\"#222\" cx=\"241.4\" cy=\"136\" rx=\"85.6\" ry=\"135.9\" />\n              <ellipse transform=\"matrix(0.3917 -0.9201 0.9201 0.3917 178.2635 541.6781)\" fill=\"#222\" cx=\"498.8\" cy=\"136\" rx=\"135.8\" ry=\"85.7\" />\n              <ellipse transform=\"matrix(0.665 -0.7469 0.7469 0.665 -223.1496 187.105)\" fill=\"#222\" cx=\"97\" cy=\"342.3\" rx=\"74.4\" ry=\"109.6\" />\n              <ellipse transform=\"matrix(0.6879 -0.7258 0.7258 0.6879 -19.9475 571.058)\" fill=\"#222\" cx=\"654\" cy=\"308.7\" rx=\"111.1\" ry=\"75.7\" />\n              <path fill=\"#222\" d=\"M747.3,578.7c-9.7-67.6-60.5-124.7-119.6-134.8l7.4,1.7c-48.9-3.7-96.1-32.2-126.4-76.3\n\t\tc-14.6-21.3-25.8-46.4-44.8-62.7c-15.5-13.3-34.9-19.4-54.1-22.6c-30.9-5.1-63.1-3.3-92.3,9.5s-55,37.1-68.5,69.4\n\t\tc-7.4,17.8-11,37.5-18.6,55.2C209.1,468,160.4,494,129.8,537c-22.6,31.8-34.8,73.1-33.6,114.1c0.3,10.8,1.6,22,6.5,31.3\n\t\tc4.9,9.5,13.1,16.1,21.4,21.7c40.2,27.1,90.4,34.1,135.1,19c56.2-19,105.8-71.2,164.1-65c21,2.2,40.7,12,60.7,19.4\n\tc73,27,154.5,22,224.6-13.7c9.8-5,19.6-10.8,26.8-19.9C748.9,626.8,750.6,601.3,747.3,578.7z\"/>\n            </svg>\n          </div>\n        </div>\n      </div>\n    </MeshObjectContextProvider>\n\n  );\n}\n\nexport default MapBox;\n","// API mapit2 data types\n\nimport { Group, Texture, Vector3 } from \"three\";\n\nexport type IRetailer = {\n    id: string;\n    index?: string;\n    retail_name: string;\n    slug: string;\n    location: string;\n    retailer_phone: string;\n    retailer_description: string;\n    logo: string;\n    map_obj_name: string;\n};\n\nexport type MapObj = {\n    id: string | number;\n    center_id: string;\n    retailer_id: string;\n    kiosk_id: string | null;\n    map_obj_name: string;\n    obj_type: string;\n    layer_type: string;\n    value: string;\n    custom_text: string;\n    custom_image: string;\n    hover_text: string;\n    bg_color: string;\n    transparent: string | number;\n    text_color: string;\n    size: string;\n    rotate: string;\n    offsetX: string;\n    offsetY: string;\n    goToFloor?: Function;\n};\n\nexport type Floor = {\n    id: string;\n    svg_map?: string;\n    objsGroup?: Group;\n    interactiveObjs?: any[];\n    escalatorsObjs?: any[];\n    escalatorsNodes?: Record<any, any>;\n    escalatorMeshes?: any[];\n    route_points?: IRoutePoint[];\n    route_tube?: any;\n    route_texture?: Texture | null | undefined;\n    routeMeshes?: any[];\n    route_active?: boolean;\n    center_id?: string;\n    title: string;\n    svg?: string;\n    status?: string;\n    created_at?: string;\n};\n\nexport type CameraControlsState = {\n    camera: null;\n    controls: null;\n};\n\nexport type Settings = {\n    MAP_BACKGROUND_COLOR: string;\n    ACCENT_COLOR: string;\n    STORE_DEFAULT_COLOR: string;\n    BIG_STORE_DEFAULT_COLOR: string;\n    WALL_THICKNESS: string;\n    WALL_COLOR: string;\n    BOUNDARY_THICKNESS: string;\n    BOUNDARY_COLOR: string;\n    BASE_COLOR: string;\n    STORE_TEXT_COLOR: string;\n    OVERLAY_COLOR: string;\n    OVERLAY_OPACITY: string;\n    AMENITIES_NAV_BG_COLOR: string;\n    AMENITIES_NAV_ICON_COLOR: string;\n};\n\nexport type Kiosk = {\n    id: string;\n    title: string;\n    map_obj_name: string;\n};\n\nexport type Amenity = {\n    name: string;\n    image: string;\n};\n\nexport type MapIt2Response = {\n    retailers: IRetailer[];\n    map_objs: MapObj[];\n    floors: Floor[];\n    camera_controls_states: {\n        display_app: CameraControlsState;\n        desktop: CameraControlsState;\n        tablet: CameraControlsState;\n        mobile: CameraControlsState;\n    };\n    settings: Settings;\n    kiosks: Kiosk[];\n    amenities: Record<string, Amenity>;\n};\n\nexport type IRoutePoint = {\n    name: string;\n    node: Vector3;\n}\n\nexport function isMapIt2Response(obj: unknown): obj is MapIt2Response {\n    if (typeof obj !== 'object' || obj === null) return false;\n\n    const response = obj as Record<string, unknown>;\n\n    return (\n        Array.isArray(response.retailers) &&\n        Array.isArray(response.map_objs) &&\n        Array.isArray(response.floors) &&\n        typeof response.camera_controls_states === 'object' &&\n        response.camera_controls_states !== null &&\n        typeof (response.camera_controls_states as Record<string, unknown>).display_app === 'object' &&\n        typeof (response.camera_controls_states as Record<string, unknown>).desktop === 'object' &&\n        typeof (response.camera_controls_states as Record<string, unknown>).tablet === 'object' &&\n        typeof (response.camera_controls_states as Record<string, unknown>).mobile === 'object' &&\n        typeof response.settings === 'object' &&\n        Array.isArray(response.kiosks) &&\n        typeof response.amenities === 'object'\n    );\n}"],"names":["get_node_name","vertex","floor_index","floors","node_count","exists","node_name","currentFloor","undefined","route_points","i","length","x","node","y","name","next_node_name","getMeshParams","path","paths","config","nodeCount","allNodesFloor","pathFinderGraph","_path$userData","consolePrefix","mesh_type","layer_color","color","clone","extrude","z_index","mesh_visible","mesh_draw","mesh_transparent","line_thickness","WALL_THICKNESS","interactiveMesh","layer_name","userData","id","startsWith","BOUNDARY_COLOR","BOUNDARY_THICKNESS","STYLE","WALL_COLOR","BUILDING_BASE_COLOR","BASE_COLOR","STORE_DEFAULT_COLOR","BIG_STORE_DEFAULT_COLOR","subPaths","forEach","subPath","curves","console","warn","curve","v1","v2","node1_name","exists1","_floors$floor_index$r","push","Vector3","node2_name","exists2","_floors$floor_index$r2","addNode","_extends","addLink","weight","distanceTo","allIndexedMapObjects","allIndexedRetailers","createGraph","hex_to_color","hex_code","Color","parseInt","renderOrders","escalator","underlay","overlay","base","store","kiosk","wall","boundary","amenity","getRenderOrder","getMaterial","material_settings","side","DoubleSide","transparent","depthWrite","depthTest","opacity","OVERLAY_COLOR","OVERLAY_OPACITY","includes","ROLE","material","MeshLambertMaterial","colorDefault","bg_color","active","getMaterialAndGeometry","mode","_allIndexedMapObjects","geometry","getGeometry","extrude_meshes","shapes","toShapes","ExtrudeGeometry","depth","bevelEnabled","wall_geometries","type","shape_extend","shape1","thickness","wallShape","Shape","point1","point2","dir","sub","normalize","multiplyScalar","point1_center","add","point2_center","distance","point1_above","point1_below","point2_above","point2_below","moveTo","lineTo","getWallShape","wall_geometry","mergeGeometries","ShapeGeometry","attributes","position","count","e","error","message","mesh","Mesh","object_id","visible","z","storeName","_mesh$mesh_type","layer_type","retailer_id","retail_name","custom_text","renderOrder","objsGroup","escalatorsNodes","escalatorsObjs","escalator_id","route_node_id","obj_type","value","interactiveObjs","create_route","from_mesh_object_id","to_mesh_object_id","scene","escalator_nodes","style","routePaths","routeCallback","floor","_floor$objsGroup","route_active","route_tube","dispose","remove","route_texture","escalatorMeshes","delete_route_path","from_obj","getObjectByProperty","to_obj","from_node_name","to_node_name","from_route_floor_index","to_route_floor_index","routeNodes","aStarPathFinder","find","get_route_nodes","ngraphPath","aStar","fromNode","toNode","link","data","debug","routeNodesEsclators","floor_routes","index","routeNode","Object","keys","key","_floors$allNodesFloor","escalator_mesh","goToFloor","_floors$allNodesFloor2","direction","floor_route","routePath","create_route_path","_floors$floor_index","_floors$floor_index2","routeMeshes","create_route_paths","_floors$floor_index$o","route_path","CurvePath","from_node","to_node","LineCurve3","TubeGeometry","BufferGeometry","copy","MeshBasicMaterial","map","get_route_texture","setDrawRange","ctx","document","createElement","getContext","canvas","width","height","fillStyle","fillRect","grd_width","min_grd_width","max_grd_width","grd","createLinearGradient","addColorStop","CanvasTexture","offset","colorSpace","loadFloors","results","GeometriesAndMaterials","result","meshParams","findStoreNodeRaycaster","Raycaster","routeNodeIds","find_store_node_raycaster","role","Map","point","origin_point","target_direction","set","storeIntersects","intersectObjects","object","escalatorIntersects","escalatorNodes","assign_route_nodes_to_stores","size","has","get","_floors$i$escalatorsN","_floors$escalatorsNod","_floors$i$escalatorsN2","_floors$escalatorsNod2","nodeIdFrom","nodeIdTo","linkFloorEscalators","graph","layer_text_logo_position_by_id","newMeshPos","mesh_size","newMesh","map_obj","offsetX","offsetY","obj_angle","rotate","rotateZ","Math","PI","scale","getImageLogo","new_object_id","mesh_center_point","handleAsync","img","Image","crossOrigin","src","logo","svg_image_name","svg_color","text_color","svg_block","getElementById","svg_element","querySelector","querySelectorAll","svgColoredPart","setAttribute","svgData","XMLSerializer","serializeToString","window","btoa","unescape","encodeURIComponent","custom_image","onload","c","drawImage","texture","PlaneGeometry","logoMesh","storeLogo","textLogoNamePrefix","defaultVars","MAP_BACKGROUND_COLOR","DEVICE","KIOSK","FLOORS","KIOSKS","CENTER_ID","STATS","DEBUG","ACCENT_COLOR","STORE_TEXT_COLOR","CAMERA_CONTROLS_STATES","ORIGINAL_CAMERA_POSITION","DEFAULT_CAMERA_POSITION","DEFAULT_CONTROLS_TARGET","DEFAULT_SELECTED_STORE","defaultMapObjValues","center_id","kiosk_id","map_obj_name","hover_text","allNonIndexedMapObjects","floorsData","BASE_URL","useMeshFloors","jsonConfig","setMeshParams","useState","textParams","setTextParams","storeLogos","setStoreLogos","setPathFinderGraph","setEscalatorNodes","urls","setUrls","processedConfig","setProcessedConfig","useLoader","SVGLoader","myFont","useFont","fontData","handleAsyncStoreLogos","useCallback","floorIndex","meshLogo","prevLogos","useEffect","init","response","kiosks","retailers","retailer","map_objs","obj","clearObject","makeIndexedMapObjects","Group","lookAt","svg_map","svg","title","settings","parseFloat","CAMERA","camera_controls_states","CONTROLS","AMENITIES","amenities","RETAILERS","values","removeFromParent","textMesh","TextsAndLogos","params","item","boundingBox","computeBoundingBox","getCenter","getSize","text","text_material","MeshPhongMaterial","text_geometry","TextGeometry","font","curveSegments","center","get_store_name_logo_geo","useMemo","SceneProperties","useThree","background","CameraProperties","props","camera","cameraProjectionNeedsUpdate","far","near","fov","PerspectiveCamera","updateProjectionMatrix","easeInOutCubic","pow","RouteTube","animateRoute","useRef","_mesh$geometry$index","log","end","animateTube","startTime","performance","now","progress","drawRangeEnd","current","animateTexture","offsetVector","useFrame","_jsx","meshFloors","routeTube","activeObjectId","hoverObjectId","handleChangeFloor","onPointerMove","onPointerOver","onPointerEnter","onPointerOut","onPointerLeave","onClick","floorMeshParams","floorTextParams","floorStoreLogos","_jsxs","children","interactive","hovered","MeshStandardMaterial","baseColor","newColor","r","g","b","getDarkerColor","uuid","htmlContent","Html","_params$geometry$boun","_params$goToFloor","_params$goToFloor2","boundingSphere","styles","escalator_elems","display","className","element","label","FloorsMap","currentFloorIndex","currKioskObj","routeTargetId","amenityTargetType","zoom","groupRef","routeTubes","setRouteTubes","mapControlRef","cameraFocus","accentColor","from","n","traverse","route","kiosk_obj_name","amenity_type","_to_obj_name","kiosk_obj","kiosk_node_name","to_obj_name","shortest_distance","mapObject","amenity_obj_name","amenity_obj","amenity_node_name","route_distance","getLink","get_nodes_distance","make_amenity_route","selectedFloorMeshParams","meshes","currentActiveObject","focus","objs","aspectRatio","Array","isArray","target","objsBoundingBox","reduce","box","union","Box3","obj_size","localToWorld","tanFOV","tan","new_y","max","new_z","angle","getCameraTiltPosition","get_camera_focus_object","aspect","targetDistance","animationStartTime","cameraTime","targetTime","vector","setLength","onCameraMove","rotation","ref","_Fragment","MapControls","onChange","maxPolarAngle","FloorButton","isActive","control_btn","FloorSelector","selectedFloorIndex","handleFloorChange","floorButtons","btn_group","ATM","xmlns","viewBox","d","transform","fill","DogPoopStation","cx","cy","rx","ry","Elevator","FamilyRestroom","Management","PlayArea","Restroom","Security","AmenityIcon","UIComponent","amenitiesList","zoomIn","zoomOut","reset","clearRoute","handleAmenityClick","preventDefault","Function","hide","backgroundColor","MapCenterMarker","kioskElementRef","React","kioskElement","svgOrigin","svgClone","cloneNode","appendChild","removeChild","MeshObjectContext","createContext","MeshObjectContextProvider","MeshObject","SetMeshObject","Provider","useMeshObjectContext","context","useContext","Error","mainTabs","retailerTabs","specialTabs","getDefaultMapOjbValues","centerId","MapboxForm","_formData$retailer_id","_data$retailers","_formData$kiosk_id","_data$kiosks","_Object$keys","setData","selectedId","mainTabKey","setMainTabKey","retailerTabsKey","setRetailerTabsKey","specialTabsKey","setSpecialTabsKey","formData","setFormData","setRotation","timeoutRef","isPending","startTransition","useTransition","handleChangeTab","k","updateData","findIndex","changeValue","_context$MeshObject","_obj$object_id","clearInterval","setTimeout","setX","setY","replace","meshType","handleChange","handleDecrement","hasOwn","toString","handleIncrement","Tab","Container","activeKey","Col","Row","sm","Nav","variant","onSelect","Item","Link","eventKey","Button","handleReset","defaultValues","Content","Pane","Form","Select","disabled","hidden","location","Tabs","Label","Control","as","rows","for","imageUrl","SceneComponent","_config$DEFAULT_SELEC","mapitData","url","fetch","then","json","useMapit2Data","setSelectedFloorIndex","selectedActiveObjectId","setSelectedActiveObjectId","setAmenityTargetType","setZoom","handleChangeMapitData","labelRef","currentHoveredObject","setCurrentHoveredObject","meshObjectContext","body","cursor","currKioskFloorIndex","kioskError","kioskMapObjName","currKioskMeshParams","flat","_meshFloors$storeLogo","currKioskLogo","handleMeshObjectContext","_meshFloors$textParam","_meshFloors$storeLogo2","logoParams","stopPropagation","targetId","meshFloorsChecked","getStyle","resetHandle","Canvas","intensity","top","left","padding","fontWeight","fontSize","MapBox","stats","mapData","setMapData","formMapObjData","setFormMapObjData","display_app","desktop","tablet","mobile","isMapIt2Response","view","newData","itemIndex","group","groupEnd"],"mappings":"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"}