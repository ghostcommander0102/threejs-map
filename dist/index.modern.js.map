{"version":3,"file":"index.modern.js","sources":["../src/Hooks/useMeshFloors/nodesUtils.ts","../src/Hooks/useMeshFloors/getMeshParams.ts","../src/globals.ts","../src/helpers/misc.ts","../src/Hooks/useMeshFloors/getMaterialAndGeometry.ts","../src/Hooks/useMeshFloors/getWallShape.ts","../src/helpers/route.helpers.ts","../src/Hooks/useMeshFloors/loadFloors.ts","../src/helpers/draw.logo.helpers.ts","../src/Hooks/useMeshFloors/index.tsx","../src/defaults.ts","../src/components/SceneComponent/SceneProperties.tsx","../src/components/SceneComponent/CameraProperties.tsx","../src/helpers/easing.ts","../src/components/SceneComponent/RouteTube.tsx","../src/components/SceneComponent/Map.tsx","../src/components/SceneComponent/FloorsMap.tsx","../src/helpers/camera.helpers.ts","../src/components/UIComponent/FloorSelector.tsx","../src/components/UIComponent/index.tsx","../src/components/SceneComponent/MapCenterMarker.tsx","../src/contexts/MeshObjectContextProvider.tsx","../src/components/MapboxForm/MapboxForm.tsx","../src/components/SceneComponent/SceneComponent.tsx","../src/useMapit2Data.ts","../src/MapBox.tsx","../src/mapitApiTypes.ts"],"sourcesContent":["import type {Vector2} from \"three\";\r\nimport {IFloorData} from \"../../types\";\r\n\r\nexport function next_node_name(node_count: number) {\r\n    return 'node-' + node_count;\r\n}\r\n\r\nexport function get_node_name(vertex: Vector2, floor_index: number, floors: IFloorData[], node_count: number): [string , boolean] {\r\n    let exists = false;\r\n    let node_name:string = '-name-not-found-';\r\n    const currentFloor = floors[floor_index];\r\n    if (currentFloor.route_points !== undefined) {\r\n        for (let i = 0; i < currentFloor.route_points.length; i++) {\r\n            if (vertex.x == currentFloor.route_points[i].node.x && vertex.y == currentFloor.route_points[i].node.y) {\r\n                exists = true;\r\n                node_name = currentFloor.route_points[i].name;\r\n                break;\r\n            }\r\n        }\r\n        if (!exists) {\r\n            node_name = next_node_name(node_count);\r\n            // draw_points([{ x: vertex.x, y: vertex.y }]);\r\n        }\r\n    }\r\n    return [node_name, exists];\r\n}","// import {SVGResultPaths} from \"three/examples/jsm/loaders/SVGLoader\";\r\nimport { SVGResultPaths } from \"three-stdlib\";\r\nimport {Graph} from \"ngraph.graph\";\r\nimport {Color, LineCurve, Vector2, Vector3} from \"three\";\r\nimport {get_node_name} from \"./nodesUtils\";\r\nimport {MeshType} from \"./getMaterialAndGeometry\";\r\nimport { IConfig, IFloorData } from \"../../types\";\r\n\r\nexport const getMeshParams = (path: SVGResultPaths, paths: SVGResultPaths[], floors: IFloorData[], floor_index: number, config: IConfig, nodeCount: number, allNodesFloor: Record<string, number>, pathFinderGraph: Graph) => {\r\n    const consolePrefix = 'MeshParams';\r\n    let mesh_type:MeshType = null;\r\n    var layer_color: Color | string = path.color.clone();\r\n    var extrude = 0;\r\n    var z_index = 0;\r\n    var mesh_visible = true;\r\n    var mesh_draw = true;\r\n    var mesh_transparent = false;\r\n    var line_thickness = config.WALL_THICKNESS;\r\n    var interactiveMesh = true;\r\n    var layer_name = path.userData?.node.id;\r\n    if (layer_name != undefined) {\r\n        if (layer_name.startsWith('boundary')) {\r\n            mesh_type = 'boundary';\r\n            layer_color = config.BOUNDARY_COLOR;\r\n            line_thickness = config.BOUNDARY_THICKNESS;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 9;\r\n            }\r\n        } else if (layer_name.startsWith('wall')) {\r\n            mesh_type = 'wall';\r\n            layer_color = config.WALL_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 8.5;\r\n            }\r\n        } else if (layer_name.startsWith('outer-wall')) {\r\n            mesh_type = 'outer-wall';\r\n            layer_color = config.WALL_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                mesh_draw = false;\r\n            }\r\n        } else if (layer_name.startsWith('building-base')) {\r\n            mesh_type = 'building-base';\r\n            layer_color = config.BUILDING_BASE_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 12;\r\n                z_index = -12;\r\n            }\r\n        } else if (layer_name.startsWith('base')) {\r\n            mesh_type = 'base';\r\n            layer_color = config.BASE_COLOR;\r\n        } else if (layer_name.startsWith('store')) {\r\n            mesh_type = 'store';\r\n            layer_color = config.STORE_DEFAULT_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 8;\r\n            }\r\n            if (layer_name.startsWith('store-underlay')) {\r\n                interactiveMesh = false;\r\n            }\r\n        } else if (layer_name.startsWith('big-store')) {\r\n            mesh_type = 'big-store';\r\n            layer_color = config.BIG_STORE_DEFAULT_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 16;\r\n            }\r\n        } else if (layer_name.startsWith('route-path')) {\r\n            mesh_type = 'route-path';\r\n            mesh_draw = false;\r\n            path.subPaths.forEach(subPath => {\r\n                if (subPath.curves.length == 0) {\r\n                    console.warn(consolePrefix + 'Route-path standalone anchor point exists, layer_name: \"%s\"', layer_name);\r\n                }\r\n\r\n                subPath.curves.forEach(curve => {\r\n                    //@ts-ignore\r\n                    const v1:Vector2 = curve.v1;\r\n                    //@ts-ignore\r\n                    const v2:Vector2 = curve.v2;\r\n\r\n                    const [node1_name, exists1] = get_node_name(v1, floor_index, floors, nodeCount);\r\n                    if (!exists1) {\r\n                        floors[floor_index].route_points?.push({\r\n                            name: node1_name,\r\n                            node: new Vector3(v1.x, v1.y, 1)\r\n                        });\r\n                        allNodesFloor[node1_name] = floor_index;\r\n                    }\r\n                    const [node2_name, exists2] = get_node_name(v2, floor_index, floors, nodeCount);\r\n                    if (!exists2) {\r\n                        floors[floor_index].route_points?.push({\r\n                            name: node2_name,\r\n                            node: new Vector3(v2.x, v2.y, 1)\r\n                        });\r\n                        allNodesFloor[node2_name] = floor_index;\r\n                    }\r\n                    pathFinderGraph.addNode(node1_name, { ...v1 });\r\n                    pathFinderGraph.addNode(node2_name, { ...v2 });\r\n\r\n                    // pathFinderGraph.addLink(node1_name, node2_name);\r\n                    pathFinderGraph.addLink(node1_name, node2_name, { weight: v1.distanceTo(v2) });\r\n                    pathFinderGraph.addLink(node2_name, node1_name, { weight: v1.distanceTo(v2) });\r\n                });\r\n            });\r\n        } else if (layer_name.startsWith('escalator-')) {\r\n            mesh_type = 'escalator';\r\n            mesh_visible = false;\r\n        } else if (layer_name.startsWith('kiosk-')) {\r\n            mesh_type = 'kiosk';\r\n            mesh_transparent = true;\r\n        } else if (layer_name.startsWith('amenity-')) {\r\n            mesh_type = 'amenity';\r\n            mesh_transparent = true;\r\n            z_index = 1;\r\n        } else if (layer_name.startsWith('overlay')) {\r\n            mesh_type = 'overlay';\r\n        } else if (layer_name.startsWith('special-shape')) {\r\n            mesh_type = 'special-shape';\r\n        } else {\r\n            extrude = 1;\r\n        }\r\n    } else {\r\n        console.warn(consolePrefix + 'Layer name is undefined, path', path)\r\n    }\r\n\r\n\r\n    /*console.debug({\r\n        mesh_type,\r\n        layer_color,\r\n        extrude,\r\n        z_index,\r\n        mesh_visible,\r\n        mesh_draw,\r\n        mesh_transparent,\r\n        line_thickness,\r\n        interactiveMesh,\r\n        path,\r\n        layer_name,\r\n    })*/\r\n    return {\r\n        mesh_type,\r\n        layer_color,\r\n        extrude,\r\n        z_index,\r\n        mesh_visible,\r\n        mesh_draw,\r\n        mesh_transparent,\r\n        line_thickness,\r\n        interactiveMesh,\r\n        path,\r\n        layer_name,\r\n    }\r\n}","import createGraph from \"ngraph.graph\";\nimport {IRetailer, MapObj} from \"./mapitApiTypes\";\nimport type {Mesh} from \"three\";\nimport path from \"ngraph.path\";\n\nexport const meshByObjectId = new Map<string,Mesh>();\nexport const allMapObjects:string[] = [];\nexport const allIndexedMapObjects = {} as Record<string, MapObj>;\nexport const allIndexedRetailers = {} as Record<string, IRetailer>;\nexport const allNodesFloor = {} as Record<string, number>;\n\n//<{ x:number, y:number }, { weight: number }>\nexport const pathFinderGraph = createGraph();\nexport const ngraphPath = path;\n","import {Color} from \"three\";\n\nexport function hex_to_color(hex_code: string) {\n    return new Color(parseInt('0x' + hex_code, 16));\n}","import {BackSide, Color, DoubleSide, ExtrudeGeometry, Mesh, MeshLambertMaterial, ShapeGeometry, Vector3} from \"three\";\r\nimport {getWallShape} from \"./getWallShape\";\r\n// import {mergeGeometries} from \"three/examples/jsm/utils/BufferGeometryUtils\";\r\nimport { mergeBufferGeometries as mergeGeometries } from \"three-stdlib\";\r\nimport {allMapObjects} from \"../../globals\";\r\nimport {IConfig, IExtMesh, IMeshValues, TMapMode} from \"../../types\";\r\nimport {hex_to_color} from \"../../helpers/misc\";\r\n\r\nimport {IRetailer, MapObj} from \"../../mapitApiTypes\";\r\n\r\n\r\nconst renderOrders = {\r\n    'route-path': 0,\r\n    'escalator': 0,\r\n    'underlay': 0,\r\n    'overlay': 1,\r\n    'building-base': 1,\r\n    'base': 2,\r\n    'store': 3,\r\n    'big-store': 4,\r\n    'kiosk': 5,\r\n    'wall': 6,\r\n    'outer-wall': 7,\r\n    'boundary': 8,\r\n    'amenity': 9,\r\n    'layer-image': 10,\r\n    'layer-text': 11,\r\n    'route-tube': 12,\r\n    'special-shape': 13,\r\n};\r\n\r\nexport type MeshType = keyof typeof renderOrders | null;\r\n\r\nexport function getRenderOrder(mesh_type: MeshType): number {\r\n    if (mesh_type !== undefined && mesh_type !== null && renderOrders[mesh_type] !== undefined) {\r\n        return renderOrders[mesh_type];\r\n    }\r\n    // console.warn(`Unknown mesh type: ${mesh_type}`)\r\n    return 0;\r\n}\r\n\r\nexport const getMaterialAndGeometry = (config: IConfig, mesh_type: MeshType, layer_name: string, layer_color: Color | string, mesh_transparent: boolean, mesh_visible: boolean, z_index: number, extrude: number, line_thickness: number, floors: any, floor_index: number, allIndexedMapObjects: Record<string, MapObj>, allIndexedRetailers: Record<string, IRetailer>, path: any, mode?: TMapMode): IMeshValues => {\r\n    const consolePrefix = 'MaterialAndGeometry';\r\n\r\n    const material_settings = {\r\n        color: layer_color instanceof Color ? layer_color : hex_to_color(layer_color),\r\n        side: DoubleSide,\r\n        transparent: false,\r\n        depthWrite: true,\r\n        depthTest: true,\r\n        opacity: 1,\r\n    }\r\n    if (config.STYLE == '2D' || mesh_type == 'base' || mesh_type == null) {\r\n        if (mesh_type != 'boundary') {\r\n            material_settings.depthWrite = false;\r\n            material_settings.depthTest = false;\r\n        }\r\n    }\r\n    if (mesh_type == 'overlay') {\r\n        material_settings.color = config.OVERLAY_COLOR;\r\n        material_settings.opacity = config.OVERLAY_OPACITY;\r\n    }\r\n    if (mesh_type && ['store', 'big-store', 'kiosk'].includes(mesh_type) && config.ROLE != 'PORTAL' && allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].transparent == 1) {\r\n        material_settings.opacity = 0;\r\n    }\r\n    var material = new MeshLambertMaterial(material_settings);\r\n    if (mesh_type && ['store', 'big-store', 'kiosk', 'amenity'].includes(mesh_type)) {\r\n        //@ts-ignore\r\n        material.colorDefault = material.color;\r\n        if (allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].bg_color != '') {\r\n            material.color = hex_to_color(allIndexedMapObjects[layer_name].bg_color);\r\n            //@ts-ignore\r\n            material.colorDefault = material.color;\r\n        }\r\n        //@ts-ignore\r\n        material.active = false;\r\n    }\r\n    if (config.ROLE != 'PORTAL' && mesh_transparent) {\r\n        material.opacity = 0;\r\n        material.transparent = true;\r\n    }\r\n\r\n    material.transparent = material.opacity !== 1;\r\n\r\n    let shapes = path.toShapes(true);\r\n\r\n    // shapes.forEach((shape, index) => {\r\n    let extrude_meshes;\r\n    if (config.STYLE == '2D') {\r\n        extrude_meshes = ['building-base'];\r\n    } else {\r\n        extrude_meshes = ['store', 'big-store', 'base', 'building-base'];\r\n    }\r\n\r\n    let wall_meshes = ['wall', 'outer-wall', 'boundary'];\r\n\r\n    var geometry;\r\n    if (mesh_type && extrude_meshes.includes(mesh_type)) {\r\n        geometry = new ExtrudeGeometry(shapes, {\r\n            depth: -extrude,\r\n            bevelEnabled: false,\r\n        });\r\n    } else if (mesh_type && wall_meshes.includes(mesh_type)) {\r\n        //@ts-ignore\r\n        let wall_geometries = [];\r\n        //@ts-ignore\r\n        path.subPaths.forEach(subPath => {\r\n            //@ts-ignore\r\n            subPath.curves.forEach(curve => {\r\n                if (curve.type == 'LineCurve') {\r\n                    let shape_extend = 0;\r\n                    if (mesh_type == 'boundary') {\r\n                        shape_extend = 1;\r\n                    } else if (mesh_type == 'wall') {\r\n                        // shape_extend = 1 / 3;\r\n                    }\r\n                    let shape1 = getWallShape(curve, line_thickness, shape_extend);\r\n                    let wall_geometry = new ExtrudeGeometry(shape1, {\r\n                        depth: -extrude,\r\n                        bevelEnabled: false,\r\n                    });\r\n                    wall_geometries.push(wall_geometry);\r\n                } else {\r\n                    console.warn(consolePrefix + '\"%s\" found in walls. Check layer \"%s\"', curve.type, layer_name);\r\n                }\r\n            });\r\n        });\r\n\r\n        if (wall_geometries.length == 1) {\r\n            //@ts-ignore\r\n            geometry = wall_geometries[0];\r\n        } else if (wall_geometries.length > 1) {\r\n            //@ts-ignore\r\n            geometry = mergeGeometries(wall_geometries);\r\n        } else {\r\n            console.warn(consolePrefix + 'Unneccessary wall exists \"%s\"', layer_name);\r\n        }\r\n    } else {\r\n        geometry = new ShapeGeometry(shapes);\r\n        try {\r\n            //@ts-ignore\r\n            if (geometry.attributes.position.count == 0) {\r\n                console.warn(consolePrefix + 'Unneccessary map shape \"%s\"', layer_name, path.userData.node);\r\n            }\r\n        } catch (e: any) {\r\n            console.error(e.message);\r\n        }\r\n    }\r\n\r\n    const mesh = new Mesh(geometry, material) as IExtMesh;\r\n    mesh.object_id = layer_name;\r\n    mesh.mesh_type = mesh_type;\r\n    mesh.floor_index = floor_index;\r\n    mesh.visible = mesh_visible;\r\n    mesh.position.z = z_index;\r\n    let storeName = '';\r\n    if (['retail_name', 'retail_text', 'custom_text'].includes(allIndexedMapObjects[layer_name]?.layer_type)) {\r\n        if (allIndexedMapObjects[layer_name].layer_type && allIndexedMapObjects[layer_name].layer_type == 'retail_name' && allIndexedMapObjects[layer_name].retailer_id && allIndexedRetailers[allIndexedMapObjects[layer_name].retailer_id]) {\r\n            storeName = allIndexedRetailers[allIndexedMapObjects[layer_name].retailer_id].retail_name;\r\n        } else if (['retail_text', 'custom_text'].includes(allIndexedMapObjects[layer_name].layer_type)) {\r\n            storeName = allIndexedMapObjects[layer_name].custom_text;\r\n        }\r\n    }\r\n    mesh.userData.storeName = storeName;\r\n    if (config.STYLE == '2D') {\r\n        mesh.renderOrder = getRenderOrder(mesh_type);\r\n        if (layer_name && layer_name.includes('underlay')) {\r\n            mesh.renderOrder = getRenderOrder('underlay');\r\n        }\r\n    }\r\n\r\n    floors[floor_index].objsGroup.add(mesh);\r\n\r\n    if (mesh_type == 'escalator') {\r\n        floors[floor_index].escalatorsNodes[layer_name] = null;\r\n        floors[floor_index].escalatorsObjs.push(mesh);\r\n        mesh.escalator_id = floor_index + '-' + layer_name;\r\n    }\r\n\r\n    if (mesh_type && ['store', 'big-store', 'kiosk', 'amenity'].includes(mesh_type)) {\r\n        //@ts-ignore\r\n        mesh.route_node_id = null;\r\n\r\n        // add floor_index to the kiosks\r\n        if (allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].layer_type == 'kiosk') {\r\n            var kiosk_id = allIndexedMapObjects[layer_name].kiosk_id;\r\n            /*if (kiosk_id != null && ngCtrlElem.scope().kiosks[kiosk_id]) {\r\n                ngCtrlElem.scope().kiosks[kiosk_id].floor_index = floor_index;\r\n            }*/\r\n        }\r\n\r\n        if (config.ROLE == 'PORTAL') {\r\n            allMapObjects.push(layer_name);\r\n        }\r\n        if (\r\n            (config.ROLE == 'PORTAL') ||\r\n            (config.ROLE != 'PORTAL' && mesh_type == 'kiosk') ||\r\n            (config.ROLE != 'PORTAL' && config.ROLE != 'PORTAL_KIOSK' && allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].obj_type == 'retailer' && allIndexedMapObjects[layer_name].retailer_id != null) ||\r\n            (config.ROLE != 'PORTAL' && config.ROLE != 'PORTAL_KIOSK' && allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].layer_type == 'amenity' && allIndexedMapObjects[layer_name].value != '') ||\r\n            (mode === 'edit' && (allIndexedMapObjects[layer_name]) && (allIndexedMapObjects[layer_name].obj_type === 'special' || allIndexedMapObjects[layer_name].obj_type === 'custom')) ||\r\n            (mode === 'edit' && ['store', 'kiosk', 'amenity'].includes(mesh.mesh_type?? ''))\r\n        ) {\r\n            // if (interactiveMesh) {\r\n            floors[floor_index].interactiveObjs.push(mesh);\r\n            // }\r\n        }\r\n    }\r\n\r\n    // if (['store', 'big-store'].includes(mesh_type as string)) {\r\n    //     console.debug({allIndexedMapObjects: allIndexedMapObjects[layer_name]});\r\n    // }\r\n\r\n    return {\r\n        mesh,\r\n        geometry,\r\n        material,\r\n        object_id: layer_name,\r\n        mesh_type,\r\n        floor_index,\r\n        visible: mesh_visible,\r\n        renderOrder: mesh.renderOrder,\r\n    }\r\n    // });\r\n\r\n}","import {LineCurve, Shape, Vector3} from \"three\";\r\n\r\nexport function getWallShape(curve: LineCurve, thickness = 3, shape_extend = 0) {\r\n    let wallShape = new Shape();\r\n    let point1 = new Vector3(curve.v1.x, curve.v1.y, 0);\r\n    let point2 = new Vector3(curve.v2.x, curve.v2.y, 0);\r\n\r\n    // form help and formulas in /assets/threejs/help/\r\n    let dir = point2.clone().sub(point1).normalize().multiplyScalar(-thickness * shape_extend);\r\n    let point1_center = point1.clone().add(dir);\r\n\r\n    dir = point1.clone().sub(point2).normalize().multiplyScalar(-thickness * shape_extend);\r\n    let point2_center = point2.clone().add(dir);\r\n\r\n    let distance = point1.distanceTo(point2_center);\r\n\r\n    let point1_above = {\r\n        x: point1_center.x - (point2.y - point1_center.y) * thickness / distance,\r\n        y: point1_center.y - (point1_center.x - point2.x) * thickness / distance\r\n    };\r\n    let point1_below = {\r\n        x: point1_center.x + (point2.y - point1_center.y) * thickness / distance,\r\n        y: point1_center.y + (point1_center.x - point2.x) * thickness / distance\r\n    };\r\n\r\n    let point2_above = {\r\n        x: point2_center.x + (point1.y - point2_center.y) * thickness / distance,\r\n        y: point2_center.y + (point2_center.x - point1.x) * thickness / distance\r\n    };\r\n    let point2_below = {\r\n        x: point2_center.x - (point1.y - point2_center.y) * thickness / distance,\r\n        y: point2_center.y - (point2_center.x - point1.x) * thickness / distance\r\n    };\r\n\r\n    wallShape.moveTo(point1_above.x, point1_above.y);\r\n    wallShape.lineTo(point1_below.x, point1_below.y);\r\n    wallShape.lineTo(point2_below.x, point2_below.y);\r\n    wallShape.lineTo(point2_above.x, point2_above.y);\r\n\r\n    // shape.moveTo(point1_above.x, point1_above.y);\r\n    // shape.bezierCurveTo(point1_above.x, point1_above.y, point1_long_center.x, point1_long_center.y, point1_below.x, point1_below.y);\r\n    // shape.lineTo(point2_below.x, point2_below.y);\r\n    // shape.bezierCurveTo(point2_below.x, point2_below.y, point2_long_center.x, point2_long_center.y, point2_above.x, point2_above.y);\r\n\r\n    return wallShape;\r\n}","import {\n    BufferGeometry,\n    CanvasTexture,\n    Color,\n    CurvePath,\n    DoubleSide,\n    LineCurve3,\n    Mesh,\n    MeshBasicMaterial,\n    Object3D,\n    Raycaster,\n    Scene,\n    TubeGeometry,\n    Vector3,\n} from \"three\";\nimport {getRenderOrder} from \"Hooks/useMeshFloors/getMaterialAndGeometry\";\nimport {allNodesFloor} from \"../globals\";\nimport * as ngraphPath from \"ngraph.path\";\nimport {PathFinder} from \"ngraph.path\";\nimport {IRetailer, MapObj} from \"../mapitApiTypes\";\nimport {IExtMesh, IFloorData} from \"../types\";\nimport {Graph, Node} from \"ngraph.graph\";\n\nconst consolePrefix = 'ROUTE: ';\nlet route_exists = null;\nlet activeMapObjectName: string | null = null;\n\nfunction makeObjectActive(object_id: string | null = null, accentColor: string | Color, scene: Scene) {\n    clearActiveEffect(scene);\n    if (object_id != null) activeMapObjectName = object_id;\n    let obj = scene.getObjectByProperty('object_id', activeMapObjectName as string) as IExtMesh;\n    // obj.material.color = config.ACCENT_COLOR;\n    //@ts-ignore\n    obj.material.color = new Color(`#${accentColor}`);\n    //@ts-ignore\n    obj.material.active = true;\n    return obj;\n}\n\nfunction clearActiveEffect(scene: Scene) {\n    if (activeMapObjectName) {\n        let obj = scene.getObjectByProperty('object_id', activeMapObjectName) as IExtMesh;\n        //@ts-ignore\n        obj.material.color = { ...obj.material.colorDefault };\n        //@ts-ignore\n        obj.material.active = false;\n        activeMapObjectName = null;\n    }\n}\n\nexport function delete_route_path(floors: IFloorData[]) {\n    for (let floor_index = 0; floor_index < floors.length; floor_index++) {\n        const floor = floors[floor_index];\n        floor.route_active = false;\n\n        if (floor.route_tube != null) {\n            floor.route_tube.geometry.dispose();\n            //@ts-ignore\n            floor.route_tube.material.dispose();\n            floor.objsGroup?.remove(floor.route_tube);\n        }\n\n        floor.route_tube = undefined;\n        floor.route_texture = null;\n        floor.escalatorMeshes = [];\n    }\n}\n\nexport function create_route(from_mesh_object_id: string, to_mesh_object_id: string, scene: Scene, floors: IFloorData[], escalator_nodes: string[], pathFinderGraph: Graph, style: string): Mesh[] {\n    if (from_mesh_object_id === to_mesh_object_id) {\n        return [];\n    }\n    const routePaths = create_route_paths(from_mesh_object_id, to_mesh_object_id, scene, allNodesFloor, escalator_nodes, floors, pathFinderGraph, style);\n    if (!routePaths.length) console.warn(consolePrefix + 'No route found in between \"%s\" and \"%s\"', from_mesh_object_id, to_mesh_object_id);\n\n    return routePaths;\n}\n\nfunction create_route_paths(from_mesh_object_id: string, to_mesh_object_id: string, scene: Scene, allNodesFloor: Record<string, number>, escalator_nodes: any[] , floors: IFloorData[], pathFinderGraph: Graph, style: string, routeCallback = null) {\n    // TODO: remove scene dependency and scene.getObjectByProperty\n    const routePaths = [] as any[];\n    delete_route_path(floors);\n    let from_obj = scene.getObjectByProperty('object_id', from_mesh_object_id) as IExtMesh;\n    let to_obj = scene.getObjectByProperty('object_id', to_mesh_object_id) as IExtMesh;\n    let from_node_name = from_obj.route_node_id;\n    let to_node_name = to_obj.route_node_id;\n\n    // console.log({\n    //     from_mesh_object_id,\n    //     to_mesh_object_id,\n    //     from_obj,\n    //     to_obj,\n    //     from_node_name,\n    //     to_node_name,\n    // })\n\n    // from_node_name = 'node-147';\n    // to_node_name = 'node-221';\n\n    if (!from_node_name) console.error(consolePrefix + 'Route Anchor point missing for \"%s\"', from_mesh_object_id);\n    if (!to_node_name) console.error(consolePrefix + 'Route Anchor point missing for \"%s\"', to_mesh_object_id);\n\n    if (!from_node_name || !to_node_name) return routePaths;\n\n    const from_route_floor_index = from_obj.floor_index;\n    const to_route_floor_index = to_obj.floor_index;\n\n    const aStarPathFinder = ngraphPath.aStar(pathFinderGraph, {\n        distance: function (fromNode, toNode, link) {\n            if (link.data) return link.data.weight;\n            return false;\n        },\n        //@ts-ignore\n        debug: true,\n    });\n    const routeNodes = get_route_nodes(from_node_name, to_node_name, aStarPathFinder);\n    const routeNodesEsclators = [];\n    if (!routeNodes) {\n        return [];\n    }\n    const floor_routes = [];\n\n    for (let index = 0; index < routeNodes.length; index++) {\n        const routeNode = routeNodes[index];\n        if (floor_routes[allNodesFloor[routeNode.id]]) {\n            floor_routes[allNodesFloor[routeNode.id]].push(routeNode);\n        } else {\n            floor_routes[allNodesFloor[routeNode.id]] = [routeNode];\n        }\n\n        if (escalator_nodes.includes(routeNode.id) && escalator_nodes.includes(routeNodes[index - 1].id) && escalator_nodes.includes(routeNodes[index + 1].id)) {\n            // don't consider these middle escalators nodes\n        } else {\n            routeNodesEsclators.push(routeNode);\n        }\n    }\n    for (let index = 0; index < routeNodesEsclators.length; index++) {\n        const routeNode = routeNodesEsclators[index];\n        if (\n            allNodesFloor[routeNodesEsclators[0].id] !== allNodesFloor[routeNodesEsclators[routeNodesEsclators.length - 1].id] // proceed only if the start node and end node is not on the same floor\n            && escalator_nodes.includes(routeNode.id) // proceed only if the current node is a escalator\n        ) {\n            const escalator_id = Object.keys(floors[allNodesFloor[routeNode.id]].escalatorsNodes as object).find(key => floors[allNodesFloor[routeNode.id]]?.escalatorsNodes?.[key] === routeNode.id);\n            const escalator_mesh: IExtMesh = scene.getObjectByProperty('escalator_id', allNodesFloor[routeNode.id] + '-' + escalator_id) as IExtMesh;\n            let goToFloor = null;\n\n            if (allNodesFloor[routeNode.id] !== allNodesFloor[routeNodesEsclators[index + 1].id] && escalator_nodes.includes(routeNodesEsclators[index + 1].id)) {\n                goToFloor = {\n                    index: allNodesFloor[routeNodesEsclators[index + 1].id],\n                    direction: 'Next',\n                };\n            }\n\n            if (allNodesFloor[routeNode.id] !== allNodesFloor[routeNodesEsclators[index - 1].id] && escalator_nodes.includes(routeNodesEsclators[index - 1].id)) {\n                goToFloor = {\n                    index: allNodesFloor[routeNodesEsclators[index - 1].id],\n                    direction: 'Previous',\n                };\n            }\n\n            if (goToFloor && escalator_mesh) {\n                escalator_mesh.goToFloor = goToFloor;\n                //@ts-ignore\n                floors[allNodesFloor[routeNode.id]]?.escalatorMeshes?.push(escalator_mesh);\n            }\n        }\n\n    }\n    for (let floor_index = 0; floor_index < floor_routes.length; floor_index++) {\n        const floor_route = floor_routes[floor_index];\n        if (floor_route && floor_route.length > 1) {\n            const routePath = create_route_path(floor_route, floor_index, floors, style);\n            routePaths[floor_index] = routePath;\n\n            floors[floor_index].route_active = true;\n            floors[floor_index].routeMeshes = [ routePath ];\n            if (floor_index === from_route_floor_index) {\n                //@ts-ignore\n                floors[floor_index]?.routeMeshes?.push(from_obj);\n            }\n            if (floor_index === to_route_floor_index) {\n                //@ts-ignore\n                floors[floor_index]?.routeMeshes?.push(to_obj);\n            }\n        }\n    }\n\n    // setTimeout(function () {\n    //     //TODO openFloorMap functionality\n    //     // openFloorMap(from_route_floor_index);\n    // });\n\n    return routePaths;\n}\n\nfunction create_route_path(\n    routeNodes: Node<any>[],\n    floor_index: number,\n    floors: IFloorData[],\n    style = '2D',// config.STYLE\n) {\n    let distance = 0;\n    let route_path = new CurvePath<Vector3>();\n    for (let i = 1; i < routeNodes.length; i++) {\n        let from_node = new Vector3(routeNodes[i - 1].data.x, routeNodes[i - 1].data.y, 0);\n        let to_node = new Vector3(routeNodes[i].data.x, routeNodes[i].data.y, 0);\n        route_path.add(new LineCurve3(from_node, to_node));\n        distance += from_node.distanceTo(to_node);\n    };\n    var geometry: TubeGeometry = new TubeGeometry(route_path, 400, 6, 8);\n    //@ts-ignore\n    geometry = new BufferGeometry().copy(geometry);\n    var material = new MeshBasicMaterial({\n        map: get_route_texture(distance, floor_index, floors),\n        transparent: true,\n        side: DoubleSide,\n        depthTest: false,\n        depthWrite: false,\n    });\n\n    let route_tube = new Mesh(geometry, material) as IExtMesh;\n    if (style == '2D') {\n        route_tube.position.z = -10;\n    }\n    route_tube.position.z = 0;\n    route_tube.renderOrder = getRenderOrder('route-tube');\n    route_tube.mesh_type = 'route-tube';\n    //@ts-ignore\n    route_tube.geometry.setDrawRange(0, route_tube.geometry.index.count);\n    // draw_route_tube(route_tube, geometry.attributes.position.count, floors);\n\n    floors[floor_index].route_tube = route_tube;\n    floors[floor_index].objsGroup?.add(route_tube);\n\n    return route_tube;\n}\n\nfunction get_route_nodes(from_node_name: string, to_node_name: string, aStarPathFinder: PathFinder<any>) {\n    let routeNodes = aStarPathFinder.find(to_node_name, from_node_name);\n    if (routeNodes.length == 0) return false;\n    return routeNodes;\n}\n\n//TODO\nfunction get_nodes_distance(from_node_name: string, to_node_name: string, aStarPathFinder: PathFinder<any>, pathFinderGraph: Graph) {\n    let distance = 0;\n\n    let routeNodes = aStarPathFinder.find(to_node_name, from_node_name);\n    if (routeNodes.length == 0) return false;\n\n    for (let i = 1; i < routeNodes.length; i++) {\n        let link = pathFinderGraph.getLink(routeNodes[i - 1].id, routeNodes[i].id);\n        distance += link?.data.weight || 0;\n    };\n    return distance;\n}\n\nfunction draw_route_tube(route_tube: IExtMesh, total_faces: number) {\n    //@ts-ignore\n    route_tube.geometry.setDrawRange(0, total_faces);\n    /*createjs.Ticker.framerate = 60;\n    createjs.Tween.get({ x: 0 },\n        {\n            onChange: function (event) {\n                route_tube.geometry.setDrawRange(0, event.target.target.x);\n            },\n            onComplete: function () {\n                animate_route_path(floors);\n            }\n        })\n        .to({ x: total_faces }, 1000, createjs.Ease.cubicInOut);\n    */\n}\n\nfunction get_route_texture(distance: number, floor_index: number, floors: IFloorData[]) {\n    let canvas = document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    if (ctx) {\n        ctx.canvas.width = distance;\n        ctx.canvas.height = 80;\n\n        ctx.fillStyle = \"#4ea5ff\";\n        ctx.fillRect(0, 0, distance, 80);\n\n        let grd_width = 0.1 * distance;\n        const min_grd_width = 60;\n        const max_grd_width = 120;\n        if (grd_width < min_grd_width) grd_width = min_grd_width;\n        if (grd_width > max_grd_width) grd_width = max_grd_width;\n\n        let grd = ctx.createLinearGradient(0, 0, grd_width, 0);\n        grd.addColorStop(0, \"#4ea5ff\");\n        grd.addColorStop(0.4, \"white\");\n        grd.addColorStop(0.6, \"white\");\n        grd.addColorStop(1, \"#4ea5ff\");\n\n        ctx.fillStyle = grd;\n        ctx.fillRect(10, 0, grd_width, 80);\n\n    let route_texture = new CanvasTexture(ctx.canvas);\n    route_texture.offset.x = 1;\n    route_texture.colorSpace = 'srgb';\n\n        floors[floor_index].route_texture = route_texture;\n\n        return route_texture;\n    } else {\n        return undefined;\n    }\n}\n\n//TODO\nfunction animate_route_path(floors: IFloorData[]) {\n    /*floors.forEach(floor => {\n        if (floor.route_texture != null) {\n            createjs.Ticker.framerate = 60;\n            createjs.Tween.get(floor.route_texture.offset, { loop: true })\n                .to({ x: -1 }, 2000, createjs.Ease.cubicInOut)\n        }\n    });*/\n}\n\nexport function assign_route_nodes_to_stores(\n    floor_index: number,\n     floors: IFloorData[],\n     allIndexedMapObjects: Record<string, MapObj>,\n     allIndexedRetailers: Record<string, IRetailer>,\n     allNodesFloor: Record<string, number>,\n     escalator_nodes: string[],\n     find_store_node_raycaster: Raycaster,\n     role: string, //config.ROLE\n     ) {\n    const result = new Map();\n    const currentFloor = floors[floor_index];\n    if (currentFloor && currentFloor.route_points) {\n        currentFloor.route_points.forEach(point => {\n            let origin_point = new Vector3(point.node.x, point.node.y, -10);\n            let target_direction = new Vector3(0, 0, 1);\n            find_store_node_raycaster.set(origin_point, target_direction);\n            //@ts-ignore\n            var storeIntersects = find_store_node_raycaster.intersectObjects(floors[floor_index].interactiveObjs);\n            if (storeIntersects.length) {\n                //@ts-ignore\n                storeIntersects[0].object.route_node_id = point.name;\n                //@ts-ignore\n                result.set(storeIntersects[0].object.object_id, point.name);\n                if (role != 'PORTAL') {\n                    //@ts-ignore\n                    var retailer_id = allIndexedMapObjects[storeIntersects[0].object.object_id].retailer_id;\n                    if (retailer_id != null && allIndexedRetailers[retailer_id]) {\n                        var retailer_index = allIndexedRetailers[retailer_id].index;\n                        // ngCtrlElem.scope().allRetailers[retailer_index].has_route = true;\n                    }\n                }\n            }\n\n            var escalatorIntersects = find_store_node_raycaster.intersectObjects(floors[floor_index].escalatorsObjs as Object3D[]);\n            if (escalatorIntersects.length) {\n                const obj: IExtMesh = escalatorIntersects[0].object as IExtMesh;\n                let escalator_obj_id = obj.object_id;\n                const escalatorNodes = floors[floor_index].escalatorsNodes;\n                if (escalatorNodes) {\n                    escalatorNodes[escalator_obj_id as string] = point.name;\n                    allNodesFloor[point.name] = floor_index;\n                    escalator_nodes.push(point.name);\n                }\n            }\n        });\n    }\n    return result;\n}\n\nexport function linkFloorEscalators(floors: IFloorData[], pathFinderGraph: Graph) {\n    // console.log('linkFloorEscalators', floors)\n    if (floors.length > 1) {\n        for(let i=0; i < (floors.length-1); i++) {\n            // console.log('floors[i]',i, floors[i])\n            const floor_escalators = floors[i].escalatorsNodes;\n            // console.log('floor_escalators', floor_escalators);\n            Object.keys(floor_escalators as object).forEach(escalator => {\n                if (floors[i].escalatorsNodes?.[escalator] != null && floors[i+1].escalatorsNodes?.[escalator] != null) {\n                    // console.log('escalator, add link from floor %d to %d (and back)', i, i+1, escalator)\n                    const nodeIdFrom = floors[i].escalatorsNodes?.[escalator];\n                    const nodeIdTo = floors[i+1].escalatorsNodes?.[escalator];\n                    if (nodeIdFrom && nodeIdTo) {\n                        pathFinderGraph.addLink(nodeIdFrom, nodeIdTo, { weight: 1 });\n                        pathFinderGraph.addLink(nodeIdTo, nodeIdFrom, { weight: 1 });\n                    }\n                } else {\n                    // console.error(consolePrefix + 'Escalator route anchor point missing \"%s\"', escalator);\n                }\n            })\n        }\n    }\n}\n\nexport function make_amenity_route(kiosk_obj_name: string, amenity_type: string, scene: Scene, allIndexedMapObjects: Record<string, MapObj>, pathFinderGraph: Graph, floors: IFloorData[], escalator_nodes: string[], style: string ): Mesh[] {\n    let kiosk_obj: IExtMesh = scene.getObjectByProperty('object_id', kiosk_obj_name) as IExtMesh;\n    if (!kiosk_obj) return [];\n    let kiosk_node_name = kiosk_obj.route_node_id;\n\n    var to_obj_name = null;\n\n    var shortest_distance = 9999;\n    // var map_objs = ngCtrlElem.scope().amenities[amenity_type];\n    const map_objs: string[] = [];\n    for(let key in allIndexedMapObjects) {\n        const mapObject = allIndexedMapObjects[key];\n        if (\n            mapObject.layer_type === 'amenity'\n            && mapObject.obj_type === 'special'\n            && mapObject.value === amenity_type\n        ) {\n            map_objs.push(key);\n        }\n    }\n    map_objs.forEach((amenity_obj_name: string, index: number) => {\n        let amenity_obj: IExtMesh = scene.getObjectByProperty('object_id', amenity_obj_name) as IExtMesh;\n\n    const aStarPathFinder = ngraphPath.aStar(pathFinderGraph, {\n        distance: function (fromNode, toNode, link) {\n            if (link.data) return link.data.weight;\n            return false;\n        },\n        //@ts-ignore\n        debug: true,\n    });\n\n    if (amenity_obj) {\n        var amenity_node_name = amenity_obj.route_node_id;\n        try {\n            var route_distance = get_nodes_distance(kiosk_node_name ?? '', amenity_node_name ?? '', aStarPathFinder, pathFinderGraph);\n            if (route_distance && route_distance < shortest_distance) {\n                shortest_distance = route_distance;\n                to_obj_name = amenity_obj_name;\n            }\n        } catch(e: any) {\n            console.warn(`Amenity Path: ${e.message}`);\n        }\n    }\n    });\n    return create_route(kiosk_obj_name, to_obj_name?? '', scene, floors, escalator_nodes, pathFinderGraph, style);\n}\n\n","import {getMeshParams} from \"./getMeshParams\";\r\n// import {SVGResult} from \"three/examples/jsm/loaders/SVGLoader\";\r\nimport { SVGResult } from \"three-stdlib\";\r\nimport {IConfig, IFloorData, IMeshValues, TMapMode} from \"../../types\";\r\nimport {allIndexedMapObjects, allIndexedRetailers, allNodesFloor, pathFinderGraph} from \"../../globals\";\r\nimport {getMaterialAndGeometry} from \"./getMaterialAndGeometry\";\r\nimport {Raycaster} from \"three\";\r\nimport {assign_route_nodes_to_stores, linkFloorEscalators} from \"helpers/route.helpers\";\r\n\r\n// TODO: get rid of this global variable\r\nlet node_count = 0;\r\n\r\nexport function loadFloors(floors:IFloorData[], config:IConfig, results:SVGResult[], mode?: TMapMode) {\r\n    const GeometriesAndMaterials: Array<IMeshValues[]> = [];\r\n    // let floor = floors[floors_loaded];\r\n    // let floor_index = floors_loaded;\r\n    const escalator_nodes: string[] = [];\r\n    results.forEach((result, floor_index) => {\r\n        if (result.paths && result.paths.length) {\r\n            const pathIds = [];\r\n            for (let i = 0; i < result.paths.length; i++) {\r\n                pathIds.push(result.paths[i]?.userData?.node.id);\r\n            }\r\n            const paths = result.paths;\r\n            for (let i = 0; i < paths.length; i++) {\r\n                const {\r\n                    mesh_type,\r\n                    layer_color,\r\n                    extrude,\r\n                    z_index,\r\n                    mesh_visible,\r\n                    mesh_draw,\r\n                    mesh_transparent,\r\n                    line_thickness,\r\n                    interactiveMesh,\r\n                    path,\r\n                    layer_name,\r\n                } = getMeshParams(\r\n                    paths[i],\r\n                    paths,\r\n                    floors,\r\n                    floor_index,\r\n                    config,\r\n                    ++node_count,\r\n                    //@ts-ignore\r\n                    allNodesFloor,\r\n                    pathFinderGraph\r\n                );\r\n\r\n                if (mesh_draw) {\r\n                    const meshParams = getMaterialAndGeometry(\r\n                        config,\r\n                        mesh_type,\r\n                        layer_name,\r\n                        layer_color,\r\n                        mesh_transparent,\r\n                        mesh_visible,\r\n                        z_index,\r\n                        extrude,\r\n                        line_thickness,\r\n                        floors,\r\n                        floor_index,\r\n                        allIndexedMapObjects,\r\n                        allIndexedRetailers,\r\n                        path,\r\n                        mode\r\n                    );\r\n                    if (!GeometriesAndMaterials[floor_index]) {\r\n                        GeometriesAndMaterials[floor_index] = [];\r\n                    }\r\n\r\n                    GeometriesAndMaterials[floor_index].push(meshParams);\r\n                }\r\n            }\r\n            const findStoreNodeRaycaster = new Raycaster();\r\n            const routeNodeIds = assign_route_nodes_to_stores(\r\n                floor_index,\r\n                floors,\r\n                allIndexedMapObjects,\r\n                allIndexedRetailers,\r\n                allNodesFloor,\r\n                escalator_nodes,\r\n                findStoreNodeRaycaster,\r\n                config.ROLE\r\n            );\r\n\r\n            if (routeNodeIds.size && GeometriesAndMaterials[floor_index].length) {\r\n                for (let i = 0; i < GeometriesAndMaterials[floor_index].length; i++) {\r\n                    if (routeNodeIds.has(GeometriesAndMaterials[floor_index][i].mesh.object_id)) {\r\n                        GeometriesAndMaterials[floor_index][i].mesh.route_node_id = routeNodeIds.get(GeometriesAndMaterials[floor_index][i].mesh.object_id);\r\n                    }\r\n                }\r\n            }\r\n\r\n            linkFloorEscalators(floors, pathFinderGraph);\r\n\r\n        }\r\n    })\r\n\r\n    return { GeometriesAndMaterials, graph: pathFinderGraph, escalator_nodes};\r\n}","import { allIndexedMapObjects } from \"../globals\";\nimport { DoubleSide, MeshPhongMaterial, Mesh, CanvasTexture, MeshBasicMaterial, PlaneGeometry, Vector3, BufferGeometry, Box3, Color, SphereGeometry } from \"three\";\nimport type { Object3D, Scene } from \"three\";\n// import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { TextGeometry } from \"three-stdlib\";\nimport {IExtMesh} from \"../types\";\nimport {getRenderOrder} from \"../Hooks/useMeshFloors/getMaterialAndGeometry\";\nimport {hex_to_color} from \"./misc\";\nimport { IRetailer, MapObj } from \"../mapitApiTypes\";\n\n\nexport function drawTextLogoStoreOnMap(allNonIndexedMapObjects: Record<any, any>[], scene: Scene, textLogoNamePrefix: string, allIndexedMapObjects: Record<string, MapObj>, allIndexedRetailers: Record<string, IRetailer>, config: Record<any, any>, myFont: any, floors: Record<any, any>[]) {\n    for (let textLogoLayerAddedIndex = 0; textLogoLayerAddedIndex < allNonIndexedMapObjects.length; textLogoLayerAddedIndex++) {\n        addTextOrLogoOnStore(allNonIndexedMapObjects[textLogoLayerAddedIndex], scene, textLogoNamePrefix, allIndexedMapObjects, allIndexedRetailers, config, myFont, floors);\n    }\n}\n\nfunction addTextOrLogoOnStore(map_obj: any, scene: Scene, textLogoNamePrefix: string, allIndexedMapObjects: Record<string, MapObj>, allIndexedRetailers: Record<any, any>, config: Record<any, any>, myFont: any, floors: Record<any, any>[]) {\n    //@ts-ignore\n    let mesh = scene.getObjectByProperty('object_id', map_obj.map_obj_name);\n    if (mesh) {\n        //@ts-ignore\n        add_store_name_logo(mesh, textLogoNamePrefix, allIndexedMapObjects, allIndexedRetailers, config, myFont, floors, scene);\n    }\n}\n\nfunction deleteMeshByObjectID(object_id: string, scene: Scene, floors: Record<any, any>) {\n    if (object_id) {\n        let mesh = scene.getObjectByProperty('object_id', object_id);\n        if (mesh) {\n            //@ts-ignore\n            mesh.geometry.dispose();\n            //@ts-ignore\n            mesh.material.dispose();\n            //@ts-ignore\n            floors[mesh.floor_index].objsGroup.remove(mesh);\n        }\n    }\n}\n\nfunction getCenterPoint(mesh: Mesh) {\n    var mesh_center_point = new Vector3();\n    getMeshGroupBoundingBox(mesh).getCenter(mesh_center_point);\n    return mesh_center_point;\n}\n\nfunction getMeshSize(mesh: Mesh) {\n    var point = new Vector3();\n    //@ts-ignore\n    getMeshGroupBoundingBox(mesh).getSize(point);\n    return point;\n}\n\nexport function getMeshGroupBoundingBox(mesh: Mesh | Array<Mesh>) {\n    if (!Array.isArray(mesh)) {\n        mesh = [mesh];\n    }\n    const box = mesh.reduce((box, obj) => {\n        if (!obj.geometry.boundingBox) {\n            obj.geometry.computeBoundingBox();\n        }\n        //@ts-ignore\n        box.union(obj.geometry.boundingBox);\n        return box;\n    }, new Box3());\n    return box;\n}\n\nfunction layer_text_logo_position(mesh: Mesh, newMeshPos: Vector3, mesh_size: Vector3, newMesh: Mesh, allIndexedMapObjects: Record<any, any>) {\n    const object_id = (mesh as IExtMesh).object_id;\n    if (!object_id) return;\n    return layer_text_logo_position_by_id(object_id, newMeshPos, mesh_size, newMesh, allIndexedMapObjects);\n}\nfunction layer_text_logo_position_by_id(object_id: string, newMeshPos: Vector3, mesh_size: Vector3, newMesh: Mesh, allIndexedMapObjects: Record<any, any>) {\n    let map_obj = allIndexedMapObjects[object_id];\n\n    let offsetX = parseInt(map_obj.offsetX);\n    let offsetY = parseInt(map_obj.offsetY);\n\n    newMeshPos.z = -mesh_size.z;\n\n    //@ts-ignore\n    newMesh.obj_angle = parseInt(map_obj.rotate); //-180 to 180\n    //@ts-ignore\n    newMesh.rotateZ(newMesh.obj_angle * Math.PI / 180);\n\n    newMesh.scale.y *= -1;\n\n    newMeshPos.x += offsetX;\n    newMeshPos.y += offsetY;\n\n    newMesh.position.set(newMeshPos.x, newMeshPos.y, newMeshPos.z + 1);\n}\n\n/*function add_store_name_logo(mesh: Mesh, textLogoNamePrefix: string, allIndexedMapObjects: Record<any, any>, allIndexedRetailers: Record<any, any>, config: Record<any, any>, myFont: any, floors: Record<any, any>, scene: Scene) {\n    //@ts-ignore\n    var new_object_id = textLogoNamePrefix + mesh.object_id;\n    deleteMeshByObjectID(new_object_id, scene, floors);\n\n    var mesh_center_point = getCenterPoint(mesh);\n    var mesh_size = getMeshSize(mesh);\n    //@ts-ignore\n    let map_obj = allIndexedMapObjects[mesh.object_id];\n\n    if (['retail_name', 'retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n        let text = '';\n        if (map_obj.layer_type == 'retail_name' && map_obj.retailer_id && allIndexedRetailers[map_obj.retailer_id]) {\n            text = allIndexedRetailers[map_obj.retailer_id].retail_name;\n        } else if (['retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n            text = map_obj.custom_text;\n        } else {\n            return false;\n        }\n\n        let text_color = config.STORE_TEXT_COLOR;\n        if (map_obj.text_color != null) {\n            text_color = hex_to_color(map_obj.text_color);\n        }\n\n        const material_settings = {\n            color: text_color,\n            transparent: true,\n            side: DoubleSide,\n            depthWrite: false,\n            depthTest: false,\n        };\n        let text_material = new MeshPhongMaterial(material_settings);\n        let text_geometry = new TextGeometry(text, {\n            font: myFont,\n            size: parseInt(map_obj.size),\n            height: 0.01,\n            curveSegments: 4,\n        });\n        text_geometry.center();\n\n        const textMesh = new Mesh(text_geometry, text_material);\n        layer_text_logo_position(mesh, mesh_center_point, mesh_size, textMesh, allIndexedMapObjects);\n        //@ts-ignore\n        textMesh.object_id = new_object_id;\n        //@ts-ignore\n        textMesh.floor_index = mesh.floor_index;\n        textMesh.renderOrder = getRenderOrder('layer-text');\n        //@ts-ignore\n        floors[mesh.floor_index].objsGroup.add(textMesh);\n        scene.add(textMesh);\n        console.debug({UpdateTexts: scene});\n\n        // Show bounding sphere\n\n        const wireframeMaterial = new MeshBasicMaterial({\n            color: 0x0000ff,\n            wireframe: true,\n            transparent: true,\n            opacity: 0.25,\n        });\n        textMesh.geometry.computeBoundingSphere();\n        const BoundingSphereMesh = new Mesh(\n            new SphereGeometry(textMesh.geometry.boundingSphere?.radius || 1, 32, 32),\n            wireframeMaterial\n        )\n        @ts-ignore\n        BoundingSphereMesh.position.copy(textMesh.geometry.boundingSphere.center || [0, 0, 0]);\n        scene.add(BoundingSphereMesh);\n        \n    }\n\n     else if (\n        map_obj.layer_type === 'retail_logo' ||\n        map_obj.layer_type === 'custom_image' ||\n        (map_obj.obj_type === 'special' && map_obj.layer_type === 'kiosk' && map_obj.kiosk_id !== null) ||\n        (map_obj.obj_type === 'special' && map_obj.layer_type === 'amenity' && map_obj.value !== '')\n    ) {\n        //@ts-ignore\n        getImageLogo(allIndexedRetailers, map_obj, mesh, mesh_center_point, mesh_size);\n    }\n}*/\n\nfunction getImageLogo(allIndexedRetailers: Record<string, any>, map_obj: Record<string, any>, mesh: BufferGeometry,object_id: string, new_object_id: string | null, mesh_center_point: Vector3, mesh_size: Vector3, floors: any, handleAsync: (meshLogo: {storeLogo: Object3D}) => void): void {\n\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    if (map_obj.obj_type == 'retailer') {\n        img.src = allIndexedRetailers[map_obj.retailer_id].logo;\n    } else if (map_obj.obj_type == 'special') {\n        \n        let svg_image_name = map_obj.value;\n        if (map_obj.layer_type == 'kiosk') svg_image_name = 'kiosk';\n        if (svg_image_name) {\n            let svg_color = '222222';\n            if (map_obj.text_color != null) {\n                svg_color = map_obj.text_color;\n            }\n\n            const svg_block = document.getElementById('map-special-svg-' + svg_image_name)\n            if (!svg_block) {\n                console.error('svg_block not found', svg_image_name);\n                return;\n            }\n            const svg_element = svg_block.querySelector(\"svg\");\n            if (!svg_element) {\n                console.error('svg_element not found', svg_image_name);\n                return;\n            }\n\n            const svgColoredParts = svg_element.querySelectorAll('[fill]');\n            svgColoredParts.forEach((svgColoredPart) => {\n                svgColoredPart.setAttribute('fill', '#' + svg_color);\n            })\n\n            const svgData = (new XMLSerializer()).serializeToString(svg_element);\n            img.src = \"data:image/svg+xml;base64,\" + window.btoa(unescape(encodeURIComponent(svgData)));\n        }\n        \n    } else {\n        img.src = map_obj.custom_image;\n   }\n    img.onload = function () {\n        const c = document.createElement(\"canvas\");\n        const ctx = c.getContext(\"2d\");\n\n        c.width = img.width;\n        c.height = img.height;\n\n        ctx?.drawImage(img, 0, 0);\n\n        let texture = new CanvasTexture(c);\n        texture.colorSpace = 'srgb'\n\n        const geometry = new PlaneGeometry(map_obj.size, map_obj.size * img.height / img.width);\n        const material = new MeshBasicMaterial({\n            map: texture,\n            transparent: true,\n            side: DoubleSide,\n            depthTest: false,\n            depthWrite: false,\n        });\n        const logoMesh = new Mesh(geometry, material) as IExtMesh;\n\n        // @ts-ignore\n        const floor_index = mesh.floor_index;\n        layer_text_logo_position_by_id(object_id, mesh_center_point, mesh_size, logoMesh, allIndexedMapObjects);\n        logoMesh.object_id = new_object_id;\n        logoMesh.floor_index = floor_index;\n        logoMesh.renderOrder = getRenderOrder('layer-image');\n        floors[floor_index]?.objsGroup.add(logoMesh);\n\n        /*const wireframeMaterial = new MeshBasicMaterial({\n            color: 0x0000ff,\n            wireframe: true,\n            transparent: true,\n            opacity: 0.25,\n        });\n        logoMesh.geometry.computeBoundingSphere();\n        const BoundingSphereMesh = new Mesh(\n            new SphereGeometry(logoMesh.geometry.boundingSphere?.radius || 1, 32, 32),\n            wireframeMaterial\n        )\n        //@ts-ignore\n        BoundingSphereMesh.position.copy(logoMesh.geometry.boundingSphere.center || [0, 0, 0]);\n        \n        handleAsync({storeLogo: BoundingSphereMesh});\n        */\n        handleAsync({storeLogo: logoMesh});\n    };\n}\n\n\n\nexport function get_store_name_logo_geo(geometry: BufferGeometry, object_id:string, floor_index: number, textLogoNamePrefix: string, allIndexedMapObjects: Record<any, any>, allIndexedRetailers: Record<any, any>, config: Record<any, any>, myFont: any, floors: Record<any, any>, handleAsync: (meshLogo: any) => void): {textMesh: IExtMesh} | null | false {\n    const new_object_id = textLogoNamePrefix + object_id;\n    // deleteMeshByObjectID(new_object_id, scene, floors);\n    let result = null;\n\n    if (!geometry.boundingBox) {\n        geometry.computeBoundingBox();\n    }\n    if (!geometry.boundingBox) {\n        return null;\n    }\n\n    const boundingBox = geometry.boundingBox;\n\n    const mesh_center_point = new Vector3();\n    boundingBox.getCenter(mesh_center_point);\n\n    const mesh_size = new Vector3();\n    boundingBox.getSize(mesh_size);\n\n    //@ts-ignore\n    const map_obj = allIndexedMapObjects[object_id];\n\n    if (['retail_name', 'retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n        let text = '';\n        if (map_obj.layer_type == 'retail_name' && map_obj.retailer_id && allIndexedRetailers[map_obj.retailer_id]) {\n            text = allIndexedRetailers[map_obj.retailer_id].retail_name;\n        } else if (['retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n            text = map_obj.custom_text;\n        } else {\n            return false;\n        }\n\n        let text_color = config.STORE_TEXT_COLOR;\n        if (map_obj.text_color != null) {\n            text_color = hex_to_color(map_obj.text_color);\n        }\n\n        const material_settings = {\n            color: text_color,\n            transparent: true,\n            side: DoubleSide,\n            depthWrite: false,\n            depthTest: false,\n        };\n        let text_material = new MeshPhongMaterial(material_settings);\n        let text_geometry = new TextGeometry(text, {\n            font: myFont,\n            size: parseInt(map_obj.size),\n            height: 0.01,\n            curveSegments: 4,\n        });\n        text_geometry.center();\n\n        const textMesh = new Mesh(text_geometry, text_material) as IExtMesh;\n        textMesh.userData.font = myFont;\n        layer_text_logo_position_by_id(object_id, mesh_center_point, mesh_size, textMesh, allIndexedMapObjects);\n        textMesh.object_id = new_object_id;\n        textMesh.floor_index = floor_index;\n        textMesh.renderOrder = getRenderOrder('layer-text');\n        if (map_obj.layer_type === 'retail_name') {\n            textMesh.userData.retail_name = text;\n        }\n\n        floors[floor_index].objsGroup.add(textMesh);\n\n        //scene.add(textMesh);\n        //console.debug({UpdateTexts: scene});\n\n        // Show bounding sphere\n\n        /*const wireframeMaterial = new MeshBasicMaterial({\n            color: 0x0000ff,\n            wireframe: true,\n            transparent: true,\n            opacity: 0.25,\n        });\n        textMesh.geometry.computeBoundingSphere();\n        const BoundingSphereMesh = new Mesh(\n            new SphereGeometry(textMesh.geometry.boundingSphere?.radius || 1, 32, 32),\n            wireframeMaterial\n        )\n        @ts-ignore\n        BoundingSphereMesh.position.copy(textMesh.geometry.boundingSphere.center || [0, 0, 0]);\n        scene.add(BoundingSphereMesh);\n        */\n        result = { textMesh };\n    }\n\n    else if (\n       map_obj.layer_type == 'retail_logo' ||\n       map_obj.layer_type == 'custom_image' ||\n       (map_obj.obj_type == 'special' && map_obj.layer_type == 'kiosk' && map_obj.kiosk_id != null) ||\n       (map_obj.obj_type == 'special' && map_obj.layer_type == 'amenity' && map_obj.value != '')\n   ) {\n        getImageLogo(allIndexedRetailers, map_obj, geometry, object_id, new_object_id, mesh_center_point, mesh_size, floors, handleAsync);\n\n\n   }\n   return result;\n}","import {\n    Group,\n    Scene,\n    Object3D,\n    Mesh,\n    BufferGeometry,\n    Color,\n} from \"three\";\nimport { useLoader } from \"@react-three/fiber\";\n// import { SVGLoader } from \"three/examples/jsm/loaders/SVGLoader\";\nimport { SVGLoader } from \"three-stdlib\";\nimport {useCallback, useEffect, useMemo, useState} from \"react\";\nimport createGraph, { Graph } from \"ngraph.graph\";\nimport data from \"demo/data.json\";\nimport {loadFloors} from \"./loadFloors\";\nimport type {IConfig, IExtMesh, IFloorData, IMeshParams, IMeshValues, TMapMode} from \"../../types\";\nimport {defaultVars, mapit2DefaultVars} from \"../../defaults\";\nimport {allIndexedMapObjects, allIndexedRetailers} from \"../../globals\";\nimport {drawTextLogoStoreOnMap, get_store_name_logo_geo} from \"helpers/draw.logo.helpers\";\n// import { FontLoader } from \"three/examples/jsm/loaders/FontLoader\";\nimport { FontLoader, Font } from \"three-stdlib\";\nimport { IJsonConfig, IMeshParamsTmp} from \"../../types\";\nimport {hex_to_color} from \"../../helpers/misc\";\nimport {Kiosk, Floor, MapIt2Response, MapObj} from \"../../mapitApiTypes\";\nimport { EventedType } from \"ngraph.events\";\nimport fontData from './optimer_regular.typeface.json'\nimport { FontData, useFont } from \"@react-three/drei\";\n\n// if (!isDefined(typeof MAPIT2)) window.MAPIT2 = { ...defaultVars };\n// window.MAPIT2 = { ...defaultVars, ...MAPIT2 };\n\nexport const textLogoNamePrefix = 'custom-layer-';\n\nconst config: IJsonConfig = { ...defaultVars, ...mapit2DefaultVars}\n\nconst defaultMapObjValues = {\n\tid: null,\n\tcenter_id: config.CENTER_ID,\n\tretailer_id: null,\n\tkiosk_id: null,\n\tmap_obj_name: '',\n\tobj_type: 'retailer',\n\tlayer_type: 'retail_name',\n\tvalue: '',\n\tcustom_text: '',\n\tcustom_image: '',\n\thover_text: '',\n\tbg_color: '',\n\ttransparent: 0,\n\ttext_color: '',\n\tsize: 8,\n\trotate: 0,\n\toffsetX: 0,\n\toffsetY: 0,\n} as Record<string, string | number | null| undefined>;\n\n\nlet allNonIndexedMapObjects: MapObj[] = [];\n\nconst extraMapObjects = []\nlet activeMapObjectName = null;\nconst floorsData:IFloorData[] = [];\nconst floors = [] as Floor[];\nlet floors_loaded = 0;\nconst BASE_URL = 'https://test.mycenterdeals.com/data/mapit2/';\n\nfunction select<T>(...values: T[]) {\n    return values.find(value => value !== '' && value != null) || values.at(-1);\n}\n\nconst clearObject = (obj: Record<string, MapObj>) => {\n\tfor (let key in obj) {\n\t\tdelete obj[key];\n\t}\n}\n\nfunction makeIndexedMapObjects(map_objs: MapObj[]) {\n\tclearObject(allIndexedMapObjects);\n\n    allNonIndexedMapObjects = map_objs;\n\n    for (let i = 0; i < map_objs.length; i++) {\n        const obj = map_objs[i];\n        allIndexedMapObjects[obj.map_obj_name] = obj;\n        for (let key in defaultMapObjValues) {\n            const value = defaultMapObjValues[key];\n            //@ts-ignore\n            if (value != null && obj[key] == null) {\n                //@ts-ignore\n                allIndexedMapObjects[obj.map_obj_name][key] = value;\n            }\n        }\n    }\n}\n\nconst init = (config: IJsonConfig, floors:IFloorData[], response: MapIt2Response) => {\n\n    const KIOSKS:Record<string, Kiosk> = {};\n    response.kiosks.forEach((kiosk) => {\n        KIOSKS[kiosk.id] = kiosk;\n    });\n\n\n    for (let index in response.retailers) {\n        const retailer = response.retailers[index];\n        allIndexedRetailers[retailer.id] = retailer;\n        allIndexedRetailers[retailer.id].index = index;\n    }\n\n    // ngCtrlElem.scope().amenitiesNav.bg_color = response.settings.AMENITIES_NAV_BG_COLOR;\n    // ngCtrlElem.scope().amenitiesNav.icon_color = response.settings.AMENITIES_NAV_ICON_COLOR;\n\n    makeIndexedMapObjects(response.map_objs);\n\n    floors.length = 0;\n    response.floors.forEach((value: IFloorData, index: number) => {\n        const objsGroup = new Group();\n        objsGroup.scale.y *= -1;\n        objsGroup.lookAt(0, 1, 0);\n\n        floors.push({\n            id: value.id,\n            // svg_map: BASE_URL + 'data/mapit2/' + value.svg,\n            svg_map: BASE_URL + value.svg,\n            title: value.title,\n            objsGroup: objsGroup,\n            interactiveObjs: [],\n            escalatorsObjs: [],\n            escalatorsNodes: {},\n            escalatorMeshes: [],\n            route_points: [],\n            route_tube: undefined,\n            route_texture: null,\n            routeMeshes: [],\n            route_active: false,\n        });\n    });\n\n    const processedConfig: IConfig = {\n        ACCENT_COLOR: hex_to_color(response.settings.ACCENT_COLOR ? response.settings.ACCENT_COLOR : config.ACCENT_COLOR),\n        BASE_COLOR: hex_to_color(response.settings.BASE_COLOR ? response.settings.BASE_COLOR : config.BASE_COLOR),\n        BIG_STORE_DEFAULT_COLOR: hex_to_color(response.settings.BIG_STORE_DEFAULT_COLOR ? response.settings.BIG_STORE_DEFAULT_COLOR : config.BIG_STORE_DEFAULT_COLOR),\n        BOUNDARY_COLOR: hex_to_color(response.settings.BOUNDARY_COLOR ? response.settings.BOUNDARY_COLOR : config.BOUNDARY_COLOR),\n        BOUNDARY_THICKNESS: parseFloat(response.settings.BOUNDARY_THICKNESS ? response.settings.BOUNDARY_THICKNESS : config.BOUNDARY_THICKNESS),\n        BUILDING_BASE_COLOR: hex_to_color(config.BUILDING_BASE_COLOR),\n        CAMERA: null,\n        CAMERA_CONTROLS_STATES: response.camera_controls_states[config.DEVICE],\n        CENTER_ID: config.CENTER_ID,\n        CONTROLS: null,\n        DEBUG: config.DEBUG, // config.DEBUG === 'true' || config.DEBUG === '1'\n        DEFAULT_CAMERA_POSITION: config.DEFAULT_CAMERA_POSITION,\n        DEFAULT_CONTROLS_TARGET: config.DEFAULT_CONTROLS_TARGET,\n        DEFAULT_SELECTED_STORE: config.DEFAULT_SELECTED_STORE,\n        DEVICE: config.DEVICE,\n        KIOSK: config.KIOSK,\n        KIOSKS: KIOSKS,\n        MAP_BACKGROUND_COLOR: hex_to_color(response.settings.MAP_BACKGROUND_COLOR ? response.settings.MAP_BACKGROUND_COLOR : config.MAP_BACKGROUND_COLOR),\n        ORIGINAL_CAMERA_POSITION: config.ORIGINAL_CAMERA_POSITION,\n        OVERLAY_COLOR: hex_to_color(response.settings.OVERLAY_COLOR ? response.settings.OVERLAY_COLOR : config.OVERLAY_COLOR),\n        OVERLAY_OPACITY: parseFloat(response.settings.OVERLAY_OPACITY ? response.settings.OVERLAY_OPACITY : config.OVERLAY_OPACITY),\n        ROLE: config.ROLE,\n        STATS: config.STATS === 'true' || config.STATS === '1',\n        STORE_DEFAULT_COLOR: hex_to_color(response.settings.STORE_DEFAULT_COLOR ? response.settings.STORE_DEFAULT_COLOR : config.STORE_DEFAULT_COLOR),\n        STORE_TEXT_COLOR: hex_to_color(response.settings.STORE_TEXT_COLOR ? response.settings.STORE_TEXT_COLOR : config.STORE_TEXT_COLOR),\n        STYLE: config.STYLE,\n        WALL_COLOR: hex_to_color(response.settings.WALL_COLOR ? response.settings.WALL_COLOR : config.WALL_COLOR),\n        WALL_THICKNESS: parseFloat(response.settings.WALL_THICKNESS ? response.settings.WALL_THICKNESS : config.WALL_THICKNESS),\n        FLOORS: response.floors,\n        AMENITIES: response.amenities,\n        RETAILERS: response.retailers\n    };\n\n    // AMENITIES_NAV_BG_COLOR: string;\n    // AMENITIES_NAV_ICON_COLOR: string;\n\n    return processedConfig;\n}\n\n/*function get_node_name(vertex: any, floor_index: any) {\n    let exists = false;\n    let node_name = null;\n    for (let i = 0; i < floors[floor_index].route_points.length; i++) {\n        if (vertex.x == floors[floor_index].route_points[i].node.x && vertex.y === floors[floor_index].route_points[i].node.y) {\n            exists = true;\n            node_name = floors[floor_index].route_points[i].name;\n            break;\n        }\n    }\n    if (!exists) {\n        node_name = next_node_name();\n        floors[floor_index].route_points.push({\n            name: node_name,\n            node: new Vector3(vertex.x, vertex.y, 1)\n        });\n        //@ts-ignore\n        allNodesFloor[node_name] = floor_index;\n\n        // draw_points([{ x: vertex.x, y: vertex.y }]);\n    }\n    return node_name;\n}*/\n\n/*function next_node_name() {\n    node_count++;\n    return 'node-' + node_count;\n}*/\n\n\nconst useMeshFloors = (data: MapIt2Response|null, jsonConfig?:IJsonConfig, mode?: TMapMode): IMeshParamsTmp => {\n    const [meshParams, setMeshParams] = useState<IMeshValues[][]>([]);\n    const [textParams, setTextParams] = useState<Array<{textMesh:IExtMesh}[]>>([]);\n    const [storeLogos, setStoreLogos] = useState<{storeLogo: Mesh}[][]>([]);\n    const [pathFinderGraph, setPathFinderGraph] = useState<Graph & EventedType>();\n    const [escalatorNodes, setEscalatorNodes] = useState<string[]>([]);\n    const [urls, setUrls] = useState<string[]>([]);\n    const [ processedConfig, setProcessedConfig ] = useState<IConfig|null>(null);\n    let result = useLoader(SVGLoader, urls);\n\n    const consolePrefix = 'MAPIT2';\n    // const myFont = useLoader(FontLoader, 'assets/threejs/threejs/examples/fonts/optimer_regular.typeface.json')\n    const myFont = useFont(fontData as unknown as FontData);\n\n    // const getWallShape = (...params: any): Shape | Shape[] => {\n    //     return []\n    // }\n\n\n    const handleAsyncStoreLogos = useCallback((floorIndex: number) => ((meshLogo: {storeLogo: Mesh}) => {\n        setStoreLogos((prevLogos) => {\n            // console.debug({floorIndex});\n            if (prevLogos[floorIndex]) {\n                prevLogos[floorIndex].push({...meshLogo});\n            } else {\n                prevLogos[floorIndex] = [{...meshLogo}];\n            }\n            // console.debug({prevLogos});\n            return [...prevLogos];\n        });\n    }), [])\n\n\n    useEffect(() => {\n        if (!data) return;\n\n\n        // console.log('useMeshFloors[data]', {data})\n\n        const processedConfig = init(jsonConfig ?? config, floorsData, data as MapIt2Response);\n        const values: string[] = [];\n        processedConfig.FLOORS.forEach((value) => {\n            values.push(`${BASE_URL}${value.svg}`);\n        });\n\n        setProcessedConfig(processedConfig);\n        setUrls([...values]);\n    // }, [JSON.stringify(data)]);\n    return () => {\n        if (meshParams) {\n            meshParams.forEach(floor => {\n                if (floor) {\n                    floor.forEach(value => {\n                        value.mesh.removeFromParent();\n                    })\n                }\n            })\n        }\n\n        if (textParams) {\n            textParams.forEach(floor => {\n                if (floor) {\n                    floor.forEach(value => {\n                        value.textMesh.removeFromParent();\n                    })\n                }\n            })\n        }\n\n        if (storeLogos) {\n            storeLogos.forEach(floor => {\n                if (floor) {\n                    floor.forEach(value => {\n                        value.storeLogo.removeFromParent();\n                    })\n                }\n            })\n        }\n\n        setMeshParams([]);\n        setTextParams([]);\n        setStoreLogos([]);\n    }\n    }, [data]);\n\n    useEffect(() => {\n        if (!processedConfig || !urls.length || !myFont || !result) return;\n\n        const { GeometriesAndMaterials, graph, escalator_nodes } = loadFloors(floorsData, processedConfig, result, mode);\n        const TextsAndLogos:Array<{textMesh:IExtMesh}[]> = [];\n        allNonIndexedMapObjects.forEach((params) => {\n            let values: IMeshValues | undefined;\n            for (let i = 0; i < GeometriesAndMaterials.length; i++) {\n                //@ts-ignore\n                values = GeometriesAndMaterials[i].find(item => item.object_id === params.map_obj_name);\n                if (values !== undefined) {\n                    break;\n                } \n            }\n            if (!values) return null;\n            const textParams = get_store_name_logo_geo(values.geometry, params.map_obj_name, values.floor_index, textLogoNamePrefix, allIndexedMapObjects, allIndexedRetailers, config, myFont, floorsData, handleAsyncStoreLogos(values.floor_index));\n            if (textParams) {\n                if (!TextsAndLogos[values.floor_index]) {\n                    TextsAndLogos[values.floor_index] = [];\n                }\n                TextsAndLogos[values.floor_index].push(textParams);\n            }\n        })\n        setMeshParams(GeometriesAndMaterials);\n        setTextParams(TextsAndLogos);\n        setPathFinderGraph(graph);\n        setEscalatorNodes([...escalator_nodes]);\n\n    }, [processedConfig, urls, result, myFont]);\n\n    return useMemo(() => {\n        return {\n            config: processedConfig,\n            meshParams,\n            textParams,\n            storeLogos,\n            floors: floorsData,\n            pathFinderGraph,\n            escalator_nodes: escalatorNodes,\n        }\n    }, [ processedConfig, meshParams, textParams, storeLogos, floorsData, pathFinderGraph, escalatorNodes ])\n}\n\nexport default useMeshFloors","import {IJsonConfig} from \"./types\";\n\nexport const mapit2DefaultVars: Partial<IJsonConfig> = {\n    ROLE: 'WEBSITE',\n    DEVICE: 'display_app',\n    CENTER_ID: '8',\n    // KIOSK: '51',\n    KIOSK: '108',\n    STYLE: '3D',\n    DEFAULT_SELECTED_STORE: '',\n    DEBUG: '1',\n\n    MAP_BACKGROUND_COLOR: \"FFFFFF\",\n    ACCENT_COLOR: \"4EA5FF\",\n    STORE_DEFAULT_COLOR: \"E2E2E2\",\n    BIG_STORE_DEFAULT_COLOR: \"3D3D3D\",\n    WALL_THICKNESS: '0.6',\n    WALL_COLOR: \"888888\",\n    BOUNDARY_THICKNESS: '0.8',\n    BOUNDARY_COLOR: \"888888\",\n    BASE_COLOR: \"25292B\",\n    STORE_TEXT_COLOR: \"222222\",\n    OVERLAY_COLOR: \"FFFFFF\",\n    OVERLAY_OPACITY: '0.7',\n    // AMENITIES_NAV_BG_COLOR: \"000000\",\n    // AMENITIES_NAV_ICON_COLOR: \"FFFFFF\"\n}\n\nexport const defaultVars: IJsonConfig = {\n    MAP_BACKGROUND_COLOR: '',\n    ROLE: 'WEBSITE', // PORTAL, WEBSITE, DISPLAY_APP, WP_SITE, PORTAL_KIOSK, PORTAL_RESPONSIVE\n    DEVICE: 'display_app',\n    KIOSK: '-',\n    FLOORS: [],\n    KIOSKS: {},\n    CENTER_ID: null,\n    STATS: 'false',\n    STYLE: '3D', // 2D, 3D\n    DEBUG: '0',\n    ACCENT_COLOR: '4EA5FF',\n    STORE_DEFAULT_COLOR: 'E2E2E2',\n    BIG_STORE_DEFAULT_COLOR: '3D3D3D',\n    WALL_THICKNESS: '0.6',\n    BOUNDARY_THICKNESS: '0.8',\n    WALL_COLOR: '888888',\n    BOUNDARY_COLOR: '888888',\n    BASE_COLOR: '25292B',\n    BUILDING_BASE_COLOR: 'DADADA',\n    STORE_TEXT_COLOR: '222222',\n    OVERLAY_COLOR: 'FFFFFF',\n    OVERLAY_OPACITY: '0.7',\n    CAMERA_CONTROLS_STATES: null, // all devices camera and controls states\n    ORIGINAL_CAMERA_POSITION: null, // loaded and fit to canvas loaded area without any custom positions\n    DEFAULT_CAMERA_POSITION: null, // custom default camera position\n    DEFAULT_CONTROLS_TARGET: null, // custom default controls target\n    DEFAULT_SELECTED_STORE: null,\n};","import {useThree} from \"@react-three/fiber\";\r\nimport {Color} from \"three\";\r\n\r\ninterface IScenePropertiesProps {\r\n    background?: Color | string;\r\n}\r\n\r\nexport const SceneProperties = (params:IScenePropertiesProps) => {\r\n    const { scene } = useThree();\r\n    if (params.background) {\r\n        scene.background = new Color(params.background);\r\n    }\r\n    return null;\r\n}","import {useThree} from \"@react-three/fiber\";\r\nimport { ICameraPropertiesProps } from \"types\";\r\nimport {PerspectiveCamera} from \"three\";\r\n\r\nexport const CameraProperties = (props:ICameraPropertiesProps) => {\r\n    const { camera } = useThree();\r\n\r\n    const cameraProjectionNeedsUpdate = props.far || props.near || props.fov;\r\n    if (props.far) {\r\n        camera.far = props.far;\r\n    }\r\n    if (props.near) {\r\n        camera.near = props.near;\r\n    }\r\n\r\n    if (camera instanceof PerspectiveCamera) {\r\n        if (props.fov) {\r\n            camera.fov = props.fov;\r\n        }\r\n    }\r\n\r\n    if (cameraProjectionNeedsUpdate) {\r\n        camera.updateProjectionMatrix();\r\n    }\r\n\r\n    return null;\r\n}","export function easeInOutCubic(x: number): number {\n    return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;\n}","import React, {useEffect, useRef} from \"react\";\nimport type {Mesh} from \"three\";\nimport {easeInOutCubic} from \"../../helpers/easing\";\nimport {MeshBasicMaterial} from \"three\";\nimport {useFrame} from \"@react-three/fiber\";\n\ninterface IRouteTubeProps {\n    mesh?: Mesh;\n}\n\nexport function RouteTube({mesh}: IRouteTubeProps) {\n    const animateRoute = useRef<Function | null>(null);\n\n    useEffect(() => {\n        if (!mesh) {\n            return;\n        }\n\n        if (!mesh.geometry.index?.count) {\n            console.log('NO ROUTE TUBE GEOMETRY INDEX COUNT');\n            return;\n        }\n\n        if (!(mesh.material instanceof MeshBasicMaterial)) {\n            return;\n        }\n        if (!mesh.material.map) {\n            console.log('NO ROUTE TEXTURE');\n            return;\n        }\n\n        mesh.geometry.setDrawRange(0, 0);\n\n        const end = mesh.geometry.index.count;\n        const animateTube = (\n            () => {\n                const length = 1000;\n                const startTime = performance.now();\n                return () => {\n                    const progress = (performance.now() - startTime) / length;\n                    const drawRangeEnd = Math.floor(easeInOutCubic(progress) * end);\n\n                    if (progress >= 1) {\n                        animateRoute.current = animateTexture;\n                    }\n\n                    mesh.geometry.setDrawRange(0, drawRangeEnd);\n                }\n            }\n        )();\n\n        const animateTexture = (() => {\n            if (!(mesh.material instanceof MeshBasicMaterial)) {\n                return null;\n            }\n            if (!mesh.material.map) {\n                return null;\n            }\n            const offsetVector = mesh.material.map.offset;\n            const length = 2000;\n            const startTime = performance.now();\n            return () => {\n                const progress = (performance.now() - startTime) / length % 1;\n                offsetVector.x = -easeInOutCubic(progress);\n            }\n        })();\n\n        animateRoute.current = animateTube;\n\n        return () => {\n            animateRoute.current = null;\n            mesh.removeFromParent();\n            if (mesh.material instanceof MeshBasicMaterial) {\n                mesh.material.dispose();\n            }\n            if (mesh.geometry) {\n                mesh.geometry.dispose();\n            }\n        }\n\n    }, [mesh]);\n\n    useFrame(() => {\n        if (animateRoute.current) {\n            try {\n                animateRoute.current();\n            } catch( e: any ) {\n                console.error(`ERROR ANIMATE ROUTE: ${e.message}`)\n                animateRoute.current = null;\n            }\n        }\n    });\n\n    if (!mesh) return null;\n    return <primitive object={mesh}></primitive>\n}","import {IMeshParams, TMapMode} from \"../../types\";\r\nimport {ThreeEvent} from \"@react-three/fiber\";\r\nimport React, {MouseEventHandler} from \"react\";\r\nimport {Mesh, MeshLambertMaterial, MeshStandardMaterial, RGB} from \"three\";\r\nimport {RouteTube} from \"./RouteTube\";\r\nimport {Html} from \"@react-three/drei\";\r\n\r\ninterface IMapProps {\r\n    floorIndex: number,\r\n    meshFloors: IMeshParams;\r\n    currKioskObj: Mesh | null;\r\n    activeObjectId?: string;\r\n    hoverObjectId?: string;\r\n    routeTube?: Mesh;\r\n    visible: boolean,\r\n    onPointerEnter?: (e: ThreeEvent<PointerEvent>) => void;\r\n    onPointerLeave?: (e: ThreeEvent<PointerEvent>) => void;\r\n    onPointerMove?: (e: ThreeEvent<PointerEvent>) => void;\r\n    onClick?: (e: ThreeEvent<MouseEvent>) => void;\r\n    handleChangeFloor: (index: number) => MouseEventHandler<HTMLDivElement>;\r\n    mode?: TMapMode;\r\n}\r\n\r\nconst getDarkerColor = (color: RGB) => {\r\n    if (color) {\r\n        var newColor = { ...color }\r\n        newColor.r = color.r * 0.92;\r\n        newColor.g = color.g * 0.92;\r\n        newColor.b = color.b * 0.92;\r\n        return newColor;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const Map = (params: IMapProps) => {\r\n    const {meshFloors, routeTube, floorIndex, activeObjectId, hoverObjectId, visible, handleChangeFloor, mode} = params;\r\n\r\n    const { config, meshParams, textParams, storeLogos} = meshFloors;\r\n    const floor = meshFloors.floors[floorIndex];\r\n\r\n    const onPointerMove = params.onPointerMove;\r\n    const onPointerOver = params.onPointerEnter;\r\n    const onPointerOut = params.onPointerLeave;\r\n    const onClick = params.onClick;\r\n\r\n    const floorMeshParams = meshParams[floorIndex];\r\n    const floorTextParams = textParams[floorIndex];\r\n    const floorStoreLogos = storeLogos[floorIndex];\r\n    const escalatorMeshes = meshFloors.floors[floorIndex].escalatorMeshes;\r\n\r\n    // console.log('Map', floorIndex, { meshParams, floorIndex, floorMeshParams, floorTextParams, floorStoreLogos, routeTubes})\r\n    return (\r\n        <group visible={visible}>\r\n            {floorMeshParams?.map((params) => {\r\n                if (!params.mesh) return null;\r\n\r\n                const interactive = (visible && params.mesh.visible && floor.interactiveObjs && floor.interactiveObjs.includes(params.mesh));\r\n                const hovered = hoverObjectId && params.mesh.object_id === hoverObjectId;\r\n                const active = activeObjectId && params.mesh.object_id === activeObjectId;\r\n                if (interactive) {\r\n                    // TODO: move those colorDefault, active, etc to userData of mesh or material\r\n                    if ((active || hovered) && (params.mesh.material instanceof MeshLambertMaterial || params.mesh.material instanceof MeshStandardMaterial)) {\r\n                        // @ts-ignore\r\n                        const baseColor = active ? config.ACCENT_COLOR : params.mesh.material.colorDefault;\r\n                        //console.log('Map', {baseColor, active, hovered})\r\n                        params.mesh.material.color = hovered ? getDarkerColor(baseColor) : baseColor;\r\n                    } else {\r\n                        // @ts-ignore\r\n                        params.mesh.material.color = params.mesh.material.colorDefault;\r\n                    }\r\n                }\r\n\r\n                return <group key={params.mesh.uuid} {...(interactive? {onPointerOver, onPointerMove, onPointerOut, onClick } : {})}>\r\n                    <primitive object={params.mesh}></primitive>\r\n                </group>\r\n            })}\r\n            {floorTextParams?.map((params) => {\r\n                if (!params.textMesh) return null;\r\n                return <primitive key={params.textMesh.uuid} object={params.textMesh}>\r\n                </primitive>\r\n            })}\r\n            {floorStoreLogos?.map((params) => {\r\n                if (!params.storeLogo) return null;\r\n\r\n                return <primitive key={params.storeLogo.uuid} object={params.storeLogo}>\r\n                    {visible && params.storeLogo.userData.htmlContent? <Html>{params.storeLogo.userData.htmlContent}</Html> : null}\r\n                </primitive>\r\n            })}\r\n            {escalatorMeshes?.map((params) => {\r\n                //@ts-ignore\r\n                return <primitive key={`escalator-${params.object_id}`} object={params}>\r\n                    <Html visible={false} position={params.geometry.boundingSphere?.center}>\r\n                        <div onClick={handleChangeFloor(params.goToFloor?.index || 0)} id=\"escalator_elems\" style={{ display: visible ? 'block' : 'none' }}>\r\n                            <div className=\"element\" id={params.object_id as string}>\r\n                                <div className=\"label\">{params.goToFloor?.direction}: Floor {params.goToFloor ? params.goToFloor.index + 1 : ''}</div>\r\n                            </div>\r\n                        </div>\r\n                    </Html>\r\n                </primitive>\r\n            })}\r\n            <RouteTube mesh={routeTube} />\r\n        </group>\r\n    )\r\n}","import {IExtMesh, IFloorData, IMeshParams, TMapMode} from \"../../types\";\nimport {Map} from \"./Map\";\nimport React, {MouseEventHandler, useCallback, useEffect, useRef, useState} from \"react\";\nimport {Group, Mesh, PerspectiveCamera, Vector3} from \"three\";\nimport {ThreeEvent, useThree} from \"@react-three/fiber\";\nimport {get_camera_focus_object} from \"../../helpers/camera.helpers\";\nimport {MapControls} from \"@react-three/drei\";\nimport {create_route, make_amenity_route} from \"../../helpers/route.helpers\";\nimport {allIndexedMapObjects} from \"../../globals\";\nimport { IZoomData } from \"./SceneComponent\";\n\ninterface IFloorsMapProps {\n    meshFloors: IMeshParams;\n    currentFloorIndex: number;\n    onPointerEnter?: (e: ThreeEvent<PointerEvent>) => void;\n    onPointerLeave?: (e: ThreeEvent<PointerEvent>) => void;\n    onPointerMove?: (e: ThreeEvent<PointerEvent>) => void;\n    onClick?: (e: ThreeEvent<MouseEvent>) => void;\n    onCameraMove?: (e: any) => void;\n    currKioskObj: Mesh;\n    routeTargetId?: string;\n    amenityTargetType: string;\n    activeObjectId?: string;\n    hoverObjectId?: string;\n    handleChangeFloor: (index: number) => MouseEventHandler<HTMLDivElement>,\n    escalatorNodes: string[];\n    zoom: IZoomData | null;\n    mode?: TMapMode;\n}\n\n\nexport const FloorsMap = (params:IFloorsMapProps) => {\n    const { meshFloors, currentFloorIndex, currKioskObj, routeTargetId, amenityTargetType, handleChangeFloor, escalatorNodes, zoom, mode } = params;\n    const { floors } = meshFloors;\n\n    const groupRef = useRef<Group>(null);\n    const [ routeTubes, setRouteTubes ] = useState<Mesh[]>([]);\n    const mapControlRef = useRef<any>(null);\n    const { camera, scene } = useThree();\n    const cameraFocus = useRef<{ position:Vector3, target:Vector3, animationStartTime:number, cameraTime:number, targetTime:number } | null>(null);\n\n    const style = meshFloors.config.STYLE;\n    const accentColor = meshFloors.config.ACCENT_COLOR;\n    const pathFinderGraph = meshFloors.pathFinderGraph;\n    const from = (currKioskObj as IExtMesh).object_id;\n\n    useEffect(() => {\n        (() => {\n            let n = 0;\n            scene.traverse(() => ++n);\n\n            console.debug('Count:', n);\n        })()\n    }, [params.meshFloors, scene])\n\n    useEffect(() => {\n        if (!amenityTargetType || mode === 'edit') {\n            setRouteTubes([]);\n            return;\n        }\n        const route = make_amenity_route(from?? '', amenityTargetType, scene, allIndexedMapObjects, pathFinderGraph, floors, escalatorNodes, style);\n        setRouteTubes(route);\n    }, [amenityTargetType, scene, pathFinderGraph, floors, escalatorNodes, style, from])\n\n    useEffect(() => {\n        if (!from || !routeTargetId || mode === 'edit') {\n            setRouteTubes([]);\n            return;\n        }\n        if (!amenityTargetType) {\n            floors.forEach(floor => {\n                floor.escalatorMeshes = [];\n            });\n        }\n\n\n        console.log('Make route from %s to %s', from, routeTargetId, pathFinderGraph);\n\n        /* MAKE ROUTE PATH */\n\n        const route = create_route(from, routeTargetId, scene, floors, meshFloors.escalator_nodes, pathFinderGraph, style);\n\n        // TODO: activate object (moved out of create_route function)\n        // makeObjectActive(to_mesh_object_id, accentColor, scene);\n\n        // TODO: focus object (moved out of create_route function)\n        // if (!routePaths.length) {\n        //     let obj = scene.getObjectByProperty('object_id', to_mesh_object_id);\n        //     const {position, target} =get_camera_focus_object([obj], camera.fov, camera.aspectRatio, '2D');\n        //     camera.position.copy(position);\n        // }\n\n\n        console.log('new route', route)\n        setRouteTubes(route);\n\n    }, [ from, routeTargetId, scene, camera, floors, accentColor, pathFinderGraph, style, meshFloors.escalator_nodes ]);\n\n    const selectedFloorMeshParams = meshFloors.meshParams[currentFloorIndex];\n    useEffect(() => {\n\n        if (!(camera instanceof PerspectiveCamera)) {\n            console.error('Camera is not a PerspectiveCamera');\n            return;\n        }\n\n        if (!selectedFloorMeshParams.length) {\n            console.warn('objects not loaded yet');\n            return;\n        }\n\n        let meshes:Mesh[];\n        if (routeTubes[currentFloorIndex]) {\n            meshes = [routeTubes[currentFloorIndex]];\n\n            const currentActiveObject = routeTargetId && selectedFloorMeshParams.find(item => item.mesh.object_id === routeTargetId);\n            if (currentActiveObject) {\n                meshes.push(currentActiveObject.mesh);\n            }\n        } else {\n            meshes = selectedFloorMeshParams.map(item => item.mesh);\n        }\n\n        const cameraSpeed = 0.1; // per second\n        const targetSpeed = 0.1;\n        const focus = get_camera_focus_object(meshes, camera.fov, camera.aspect, style);\n        const distance = mapControlRef.current.object.position.distanceTo(focus.position);\n        const targetDistance = mapControlRef.current.target.distanceTo(focus.target);\n        cameraFocus.current = {\n            ...focus,\n            animationStartTime: performance.now(),\n            cameraTime: targetDistance/cameraSpeed/1000, // how long it takes to move camera to get to new position\n            targetTime: targetDistance/targetSpeed/1000, // how long it takes to move camera to get to new position\n        };\n        // console.log({focus, meshes, camera});\n\n        mapControlRef.current.target.copy(focus.target);\n        mapControlRef.current.object.position.copy(focus.position);\n        mapControlRef.current.object.lookAt(focus.target);\n        mapControlRef.current.object.updateProjectionMatrix();\n\n\n        return () => {\n            cameraFocus.current = null;\n        };\n    }, [ routeTubes, selectedFloorMeshParams, currentFloorIndex, style, camera, routeTargetId ]);\n\n    useEffect(() => {\n        if (zoom?.direction && mapControlRef.current) {\n            const vector = new Vector3();\n            vector.copy(mapControlRef.current.target);\n            vector.sub(mapControlRef.current.object.position);\n            vector.setLength(vector.length() * 0.4);\n\n            if (zoom.direction === 'in') {\n                camera.position.add(vector);\n            } else {\n                camera.position.sub(vector);\n            }\n        }\n    }, [zoom])\n\n    const onCameraMove = useCallback((e: any) => {\n        // console.warn('onCameraMove', e);\n        // debugger\n        cameraFocus.current = null;\n    }, [])\n\n    // useFrame(() => {\n    //     if (cameraFocus.current) {\n    //         console.log('animate camera')\n    //         const focus = cameraFocus.current;\n    //         const animationTime = performance.now() - focus.animationStartTime;\n    //         const cameraProgress = Math.min(1, animationTime / focus.cameraTime);\n    //         const targetProgress = Math.min(1, animationTime / focus.targetTime);\n    //         console.log({cameraProgress, targetProgress, animationTime, focus});\n    //\n    //         mapControlRef.current.target.lerp(focus.target, targetProgress);\n    //         mapControlRef.current.object.position.lerp(focus.position, cameraProgress);\n    //         mapControlRef.current.object.lookAt(focus.target);\n    //         mapControlRef.current.object.updateProjectionMatrix();\n    //\n    //         if (cameraProgress === 1 && targetProgress === 1) {\n    //             cameraFocus.current = null;\n    //         }\n    //     }\n    // })\n\n    return (<group rotation={[Math.PI / 2, 0, 0]} ref={groupRef}>\n        <>\n            <MapControls\n\n                onChange={onCameraMove}\n                ref={mapControlRef}\n                maxPolarAngle={Math.PI / 2}\n                />\n\n            {floors && floors.map(( value: IFloorData, index: number) => (\n                <Map\n                    key={`Map-${index}`}\n                    visible={currentFloorIndex === index}\n                    floorIndex = {index}\n                    currKioskObj={params.currKioskObj}\n                    activeObjectId={params.activeObjectId}\n                    hoverObjectId={params.hoverObjectId}\n                    meshFloors={meshFloors}\n                    routeTube={routeTubes && routeTubes[index]}\n                    onPointerEnter={params.onPointerEnter}\n                    onPointerLeave={params.onPointerLeave}\n                    onPointerMove={params.onPointerMove}\n                    onClick={params.onClick}\n                    handleChangeFloor={handleChangeFloor}\n                    mode={mode}\n                />\n            ))}\n        </>\n    </group>)\n}","import type {Mesh} from \"three\";\r\nimport {Box3, Vector3} from \"three\";\r\n\r\nexport function get_camera_focus_object(objs:Mesh[], fov:number, aspectRatio: number, style: string) {\r\n    // config.STYLE\r\n    // config.CAMERA.fov\r\n\r\n    if (!Array.isArray(objs)) {\r\n        objs = [objs];\r\n    }\r\n    if (!objs.length) {\r\n        console.warn('get_camera_focus_object: no objects passed');\r\n        return { position: new Vector3(), target: new Vector3() };\r\n    }\r\n\r\n    const objsBoundingBox = objs.reduce((box, obj) => {\r\n        if (!obj.geometry.boundingBox) {\r\n            obj.geometry.computeBoundingBox();\r\n        }\r\n        if (obj.geometry.boundingBox) {\r\n            box.union(obj.geometry.boundingBox);\r\n        }\r\n        return box;\r\n    }, new Box3());\r\n\r\n    const obj_size = new Vector3();\r\n    objsBoundingBox.getSize(obj_size);\r\n\r\n    const center = new Vector3();\r\n    objsBoundingBox.getCenter(center);\r\n\r\n    objs[0].localToWorld(center);\r\n\r\n    // var max_length = (obj_size.x > obj_size.y && aspectRatio() < 1 ? obj_size.x : obj_size.y) / 2;\r\n    // var padding = max_length * 0.2;\r\n    // if (padding > 50) padding = 50;\r\n    // max_length += padding;\r\n    // var new_y = max_length / Math.tan(camera.fov * Math.PI / 360);\r\n\r\n    let tanFOV = Math.tan(Math.PI * fov / 360);\r\n    let padding = 1.1;\r\n    let new_width = (obj_size.x * padding) / 2 / (tanFOV * aspectRatio);\r\n    let new_height = (obj_size.y * padding) / 2 / tanFOV;\r\n    let new_y = Math.max(new_width, new_height);\r\n    let new_z = getCameraTiltPosition(new_y, style);\r\n\r\n    const target = new Vector3(center.x, 0, center.z);\r\n    const position = new Vector3(center.x, new_y, center.z + new_z);\r\n\r\n    // createjs.Ticker.framerate = 60;\r\n    // createjs.Tween.get(config.CONTROLS.target)\r\n    //     .to({ x: center.x, z: center.z }, 400);\r\n    // createjs.Tween.get(config.CAMERA.position)\r\n    //     .to({ x: center.x, y: new_y, z: center.z + new_z }, 400);\r\n\r\n    return {position, target};\r\n}\r\n\r\nfunction getCameraTiltPosition(y:number, style:string): number {\r\n    let angle = 60;\r\n    if (style == '2D') angle = 89.9;\r\n    return y / Math.tan(angle * Math.PI / 180);\r\n}","import { IFloorSelectorProps } from \"types\";\n\nconst FloorSelector = ({floors, selectedFloorIndex, handleFloorChange, accentColor}: IFloorSelectorProps) => {\n    const floorButtons = [];\n    for (let i = 0; i < floors; i++) {\n        const style = {display: 'flex', cursor: 'pointer', background: 'white'};\n        if (i === selectedFloorIndex) {\n            style.background = accentColor;\n        }\n        floorButtons.push(<div key={`floor-change-btn-${i}`} className={`floor control_btn ${i === selectedFloorIndex? 'active' : ''}`}  onClick={handleFloorChange(i)}>Floor {i + 1}</div>)\n    }\n\n    return (\n        <div className=\"floors btn_group\">\n            {floorButtons}\n        </div>\n    );\n}\n\nexport default FloorSelector;\n","import { IAmenitiesInteractiveList, IFloorSelectorProps } from \"types\"\nimport FloorSelector from \"./FloorSelector\"\nimport { MouseEventHandler } from \"react\";\nimport styles from '../../MapBox.module.css';\n\nconst UIComponent = ({\n    floors,\n    accentColor,\n    selectedFloorIndex,\n    handleFloorChange,\n    amenitiesList,\n    zoomIn,\n    zoomOut,\n    reset,\n    clearRoute,\n    handleAmenityClick,\n}: IFloorSelectorProps & {\n    amenitiesList: IAmenitiesInteractiveList[],\n    zoomIn?: MouseEventHandler<HTMLDivElement>,\n    zoomOut?: MouseEventHandler<HTMLDivElement>,\n    reset?: () => void,\n    clearRoute?: MouseEventHandler<HTMLDivElement>,\n    handleAmenityClick: (type: string) => void\n}\n) => {\n    const handleResetClick: MouseEventHandler = (e) => {\n        e.preventDefault();\n        if (reset instanceof Function) {\n            reset();\n        }\n    }\n return(\n        <div id={styles['threejs-map-wrapper']}>\n            <div id={styles['threejs-map']}>\n                <div id={styles['map_controls']} className={`${!floors? 'hide' : ''}`}>\n                    <div className={styles['btn_group']}>\n                        <div onClick={handleResetClick} className={`${styles['reset']} ${styles['control_btn']}`}>RESET</div>\n                        <div onClick={clearRoute} className={`${styles['clear_route']} ${styles['control_btn']} ${clearRoute? '' : styles.hide}`}>Clear Route</div>\n                    </div>\n                    <FloorSelector  accentColor={accentColor} floors={floors} selectedFloorIndex={selectedFloorIndex} handleFloorChange={handleFloorChange}/>\n                    <div className={`${styles['btn_group']} ${styles['zoom_btns']}`}>\n                        <div onClick={zoomOut} className={`${styles['zoom-out']} ${styles['control_btn']}`}>–</div>\n                        <div onClick={zoomIn} className={`${styles['zoom-in']} ${styles['control_btn']}`}>+</div>\n                    </div>\n                </div>\n                <div id={styles['mapit2_loader']} className={styles['hide']}>Loading map, please wait...</div>\n                <div className={`${styles.amenities} ${styles['ng-scope']}`} style={{ display: 'none' }}>\n                    {amenitiesList.map((amenity, index) => (\n                        <div key={`amenity-${amenity.name}-${index}`} className={`${styles.amenity} ${styles['ng-scope']}`} style={{ backgroundColor: '#000000' }} onClick={() => handleAmenityClick(amenity.type)}>\n                            <div className={styles.img}>\n                                <img src={amenity.imageUrl} alt=\"\" />\n                            </div>\n                            <div className={`${styles.name} ${styles['ng-binding']}`}>{amenity.name}</div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n )   \n}\n\nexport default UIComponent;\n","import React, {useEffect} from \"react\";\n\nexport const MapCenterMarker = () => {\n    const kioskElementRef = React.useRef<HTMLDivElement>(null);\n\n    // todo figure out better way\n    useEffect(() => {\n        if (!kioskElementRef.current) return;\n        const kioskElement = kioskElementRef.current;\n        const svgOrigin = document.querySelector('#map-special-svg-kiosk svg');\n        let svgClone:Node;\n        if (svgOrigin) {\n            svgClone = svgOrigin.cloneNode(true);\n            kioskElement.appendChild(svgClone);\n        }\n\n        return () => {\n            if (svgClone) {\n                kioskElement.removeChild(svgClone);\n            }\n        }\n    }, []);\n\n    return <>\n        <div className=\"mapCenterMarker\"></div>\n        <div className=\"kioskMarker\" ref={kioskElementRef}></div>\n    </>\n}","import { createContext, useContext, useState } from \"react\"\nimport { Object3D } from \"three\";\nimport { IExtMesh } from \"types\";\n\n\ntype TMeshObjectContext = {\n    MeshObject: IExtMesh[] | null;\n    SetMeshObject: React.Dispatch<React.SetStateAction<IExtMesh[] | null>>;\n}\n\nconst MeshObjectContext = createContext<TMeshObjectContext | null>(null);\n\nexport default function MeshObjectContextProvider({children}: {children: React.ReactNode}) {\n    const [MeshObject, SetMeshObject] = useState<IExtMesh[] | null>(null);\n\n    return (\n        <MeshObjectContext.Provider\n            value={{\n                MeshObject,\n                SetMeshObject,\n            }}\n        >\n            {children}\n        </MeshObjectContext.Provider>\n    )\n}\n\nexport function useMeshObjectContext() {\n    const context = useContext(MeshObjectContext);\n\n    if (context === undefined) {\n        throw new Error(\"useMeshObjectContext must be used within MeshObjectContextProvider\");\n    }\n\n    return context;\n}\n","import { HtmlProps } from \"@react-three/drei/web/Html\";\nimport { useThree } from \"@react-three/fiber\";\nimport { useMeshObjectContext } from \"contexts/MeshObjectContextProvider\";\nimport { hex_to_color } from \"helpers/misc\";\nimport { MapObj } from \"mapitApiTypes\";\nimport { MouseEventHandler, SyntheticEvent, useEffect, useRef, useState, useTransition } from \"react\";\nimport { Button, Col, Form, FormControl, FormControlProps, Row, Tab, Tabs } from \"react-bootstrap\"\nimport { DoubleSide, Euler, MeshBasicMaterial, MeshPhongMaterial, Object3D, Vector3 } from \"three\";\n// import { TextGeometry } from \"three/examples/jsm/geometries/TextGeometry\";\nimport { TextGeometry } from \"three-stdlib\";\n\n\n\ninterface IMapboxForm {\n    data: any;\n    setData: (data: unknown) => void;\n    selectedId: string;\n    centerId: string;\n}\n\nconst mainTabs = ['retailer', 'special', 'custom', ''] as const;\ntype TMainTabsKey = (typeof mainTabs)[number];\nconst isTMainTabsKey = (x: any): x is TMainTabsKey => mainTabs.includes(x);\n\nconst retailerTabs = ['retail_name', 'retail_text', 'retail_logo', 'custom_text', 'custom_image', ''] as const;\ntype TRetailerTabsKey = (typeof retailerTabs)[number];\nconst isTRetailerTabsKey = (x: any): x is TRetailerTabsKey => retailerTabs.includes(x);\n\nconst specialTabs = ['kiosk', 'amenity', ''] as const;\ntype TSpecialTabsKey = (typeof specialTabs)[number];\nconst isTSpecialTabsKey = (x: any): x is TSpecialTabsKey => specialTabs.includes(x);\n\nconst getDefaultMapOjbValues = (centerId: string): MapObj => ({\n\tid: '',\n\tcenter_id: centerId,\n\tretailer_id: '',\n\tkiosk_id: null,\n\tmap_obj_name: '',\n\tobj_type: 'retailer',\n\tlayer_type: 'retail_name',\n\tvalue: '',\n\tcustom_text: '',\n\tcustom_image: '',\n\thover_text: '',\n\tbg_color: '',\n\ttransparent: 0,\n\ttext_color: '',\n\tsize: '8',\n\trotate: '0',\n\toffsetX: '0',\n\toffsetY: '0',\n});\n\nconst MapboxForm = (params: IMapboxForm) => {\n\n    const {data, setData, selectedId, centerId} = params;\n\n    const [mainTabKey, setMainTabKey] = useState<TMainTabsKey>('');\n    const [retailerTabsKey, setRetailerTabsKey] = useState<TRetailerTabsKey>('');\n    const [specialTabsKey, setSpecialTabsKey] = useState<TSpecialTabsKey>('');\n    const [formData, setFormData] = useState<MapObj>(getDefaultMapOjbValues(centerId));\n    const [rotation, setRotation] = useState<number | undefined>(undefined);\n    const context = useMeshObjectContext();\n    const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n    const [isPending, startTransition] = useTransition();\n\n    const handleChangeTab = (k:  any | null) => {\n        const key: TMainTabsKey | TRetailerTabsKey | TSpecialTabsKey | null = k;\n        if (key !== null) {\n            if (isTMainTabsKey(key)) {\n                setMainTabKey(key);\n                if (formData.id && formData.obj_type !== key && mainTabKey && key && mainTabKey !== key) {\n                    formData.obj_type = key;\n                    if (key === 'retailer') {\n                        formData.layer_type = 'retail_name';\n                    } else if (key === 'special') {\n                        formData.layer_type = 'kiosk';\n                        formData.retailer_id = '';\n                    } else if (key === 'custom') {\n                        formData.layer_type = 'custom_text';\n                        formData.retailer_id = '';\n                    }\n                    setMainTabKey('');\n                    setRetailerTabsKey('');\n                    setSpecialTabsKey('');\n                    setFormData({...formData});\n                    updateData({\n                        ...formData,\n                    });\n                }\n            } else if (isTRetailerTabsKey(key)) {\n                setRetailerTabsKey(key);\n                if (formData.id && formData.layer_type !== key && retailerTabsKey && key && retailerTabsKey !== key) {\n                    formData.layer_type = key;\n                    setRetailerTabsKey('');\n                    setFormData({...formData});\n                    updateData({\n                        ...formData,\n                    })\n                }\n            } else if (isTSpecialTabsKey(key)) {\n                setSpecialTabsKey(key);\n                if (formData.id && formData.layer_type !== key && specialTabsKey && key && specialTabsKey !== key) {\n                    formData.layer_type = key;\n                    formData.kiosk_id = '';\n                    formData.retailer_id = '';\n                    formData.value = '';\n                    setFormData({ ...formData });\n                    updateData({ ...formData });\n                }\n            }\n        }\n    }\n\n    const handleRotateChange = (e: any) => {\n        formData.rotate = e.target.value;\n        setFormData({...formData});\n        const index = data.map_objs.findIndex((value: MapObj) => value.id === formData.id);\n        if (index !== -1) {\n            data.map_objs[index] = {...formData};\n            setData({...data});\n        }\n    }\n\n    const handleReset = () => {\n        const defaultValues = getDefaultMapOjbValues(formData.center_id);\n        setFormData({\n            ...defaultValues,\n            id: formData.id,\n        });\n        updateData({\n            ...defaultValues,\n            id: formData.id,\n        });\n    }\n\n    const updateData = (formData: MapObj) => {\n        // setFormData({...formData});\n        const index = data.map_objs.findIndex((value: MapObj) => value.id === formData.id);\n        if (index !== -1) {\n            data.map_objs[index] = { ...formData };\n            setData({ ...data });\n            // if (timeoutRef.current) {\n            //     clearTimeout(timeoutRef.current);\n            // }\n\n            // timeoutRef.current = setTimeout(() => {\n            // }, 300);\n        }\n    }\n\n    const handleChangeRetailer = (e: any) => {\n        if (e.target.value) {\n            formData.retailer_id = e.target.value;\n            formData.kiosk_id = '';\n            setFormData({...formData});\n            updateData({...formData});\n        }\n    }\n\n    const handleChangeKiosk = (e: any) => {\n        if (e.target.value) {\n            formData.kiosk_id = e.target.value;\n            formData.retailer_id = '';\n            setFormData({...formData});\n            updateData({...formData});\n        }\n    }\n\n    const handleChangeAmenity = (e: any) => {\n        if (e.target.value) {\n            formData.value = e.target.value; \n            setFormData({...formData});\n            updateData({...formData});\n        }\n    }\n\n    const handleChange = (e: any) => {\n        const target = e.target as HTMLInputElement;\n        const value = target.value;\n        const name = target.name;\n        if (name === 'custom_image' && context?.MeshObject && context.MeshObject.length <= 1) {\n            formData.custom_image = value;\n            setFormData({...formData});\n            updateData({...formData});\n        }\n        context?.MeshObject?.forEach((obj, index) => {\n            if (index === 0) return;\n            if (!obj.userData.position) {\n                obj.userData.position = new Vector3();\n                obj.userData.position.copy(obj.position);\n            }\n            const position = new Vector3();\n            position.copy(obj.userData.position);\n            switch (name) {\n                case 'custom_text':\n                    formData.custom_text = value;\n                    if (['retail_text', 'custom_text'].includes(formData.layer_type)) {\n                        let text_geometry = new TextGeometry(formData.custom_text, {\n                            font: obj.userData.font,\n                            size: parseInt(formData.size),\n                            height: 0.01,\n                            curveSegments: 4,\n                        });\n                        text_geometry.center();\n                        obj.geometry.dispose();\n                        obj.geometry = text_geometry;\n                    }\n                    break;\n                case 'custom_image':\n                    formData.custom_image = value;\n                    updateData({\n                        ...formData,\n                    })\n                    break;\n                case 'size':\n                    formData.size = value;\n                    if (!(['retail_logo', 'kiosk', 'amenity', 'custom_image'].includes(formData.layer_type))) {\n                        let text = '';\n                        if (formData.layer_type === 'retail_name' && obj.userData.retail_name) {\n                            text = obj.userData.retail_name;\n                        } else if (['retail_text', 'custom_text'].includes(formData.layer_type)) {\n                            text = formData.custom_text;\n                        }\n                        let text_geometry = new TextGeometry(text, {\n                            font: obj.userData.font,\n                            size: parseInt(formData.size),\n                            height: 0.01,\n                            curveSegments: 4,\n                        });\n                        text_geometry.center();\n                        obj.geometry.dispose();\n                        obj.geometry = text_geometry;\n                    } else if (formData.layer_type === 'retail_logo' || formData.layer_type === 'custom_image') {\n                        if (timeoutRef.current) {\n                            clearInterval(timeoutRef.current);\n                        }\n                        timeoutRef.current = setTimeout(() => {\n                            updateData({ ...formData });\n                        }, 300);\n                    } else if (['amenity', 'kiosk'].includes(formData.layer_type)) {\n                        startTransition(() => {\n                            setFormData({ ...formData });\n                            updateData({ ...formData });\n                        })\n                    } \n                    break;\n\n                case 'rotate':\n                    formData.rotate = value;\n                    obj.rotation.set(\n                        obj.rotation.x,\n                        obj.rotation.y,\n                        parseFloat(formData.rotate) * Math.PI / 180\n                    );\n                    break;\n\n                case 'offsetX':\n                    position.x += parseFloat(value);\n                    obj.position.setX(position.x);\n                    formData.offsetX = value;\n                    break;\n\n                case 'offsetY':\n                    position.y += parseFloat(value);\n                    obj.position.setY(position.y);\n                    formData.offsetY = value;\n                    break;\n\n                case 'text_color':\n                    formData.text_color = value;\n                    if (['retail_name', 'retail_text', 'custom_text'].includes(formData.layer_type)) {\n                        const material_settings = {\n                            // color: hex_to_color(formData.text_color),\n                            color: formData.text_color,\n                            transparent: true,\n                            side: DoubleSide,\n                            depthWrite: false,\n                            depthTest: false,\n                        };\n                        let text_material = new MeshPhongMaterial(material_settings);\n                        obj.material = text_material;\n                    } else if (\n                        formData.layer_type === 'retail_logo' ||\n                        formData.layer_type === 'custom_image' ||\n                        (formData.obj_type === 'special' && formData.layer_type === 'kiosk' && formData.kiosk_id != null) ||\n                        (formData.obj_type === 'special' && formData.layer_type === 'amenity' && formData.value !== '')) {\n                        startTransition(() => {\n                            updateData({\n                                ...formData,\n                                text_color: formData.text_color.replace('#', ''),\n                            });\n                        })\n                    }\n                    break;\n\n                case 'bg_color':\n                    formData.bg_color = value;\n                    updateData({...formData});\n                    break;\n            \n                default:\n                    break;\n            }\n            startTransition(() => setFormData({ ...formData }));\n        })\n    }\n\n    useEffect(() => {\n        if (data && data.map_objs && selectedId) {\n            const index = data.map_objs.findIndex((value: any) => value.map_obj_name === selectedId);\n            if (index !== -1) {\n                setFormData({...data.map_objs[index]});\n            }\n        }\n        return () => {\n            setRetailerTabsKey('');\n        }\n    }, [data, selectedId])\n\n    useEffect(() => {\n        if (formData.obj_type) {\n            handleChangeTab(formData.obj_type);\n        }\n        if (formData.layer_type) {\n            handleChangeTab(formData.layer_type);\n        }\n    }, [formData])\n\n\n    return (\n        <>\n            {/* \n            //@ts-ignore */}\n            <Button variant=\"danger\" className=\"mb-3\" onClick={handleReset}>Reset</Button>\n            <Tabs\n                id=\"main-tab-form\"\n                activeKey={mainTabKey}\n                onSelect={handleChangeTab}\n                className=\"mb-3\"\n                justify\n            >\n                <Tab eventKey=\"retailer\" title=\"Retailer\">\n                    <Form.Select className=\"mb-3\" aria-label=\"Choose a Retailer\" value={formData.retailer_id?? ''} onChange={handleChangeRetailer}>\n                        <option value={''} disabled hidden>Choose a Retalier...</option>\n                        {data.retailers?.map((value: any) => <option key={`retailer-${value.id}`} value={value.id}>{value.retail_name} - {value.location}</option>)}\n                    </Form.Select>\n                    <Tabs\n                        variant=\"pills\"\n                        id=\"retail-tab-form\"\n                        activeKey={retailerTabsKey}\n                        onSelect={handleChangeTab}\n                    >\n                        <Tab eventKey=\"retail_name\" title=\"Retail Name\">retail name</Tab>\n                        <Tab eventKey=\"retail_logo\" title=\"Retail Logo\">retail logo</Tab>\n                        <Tab eventKey=\"retail_text\" title=\"Custom Text\">\n                            <Form.Group className=\"m-3\">\n                                <Row className=\"align-items-center mb-3\">\n                                    <Col sm=\"2\">\n                                        <Form.Label className=\"mb-0\">Text</Form.Label>\n                                    </Col>\n                                    <Col sm=\"10\">\n                                        <Form.Control\n                                            as=\"textarea\"\n                                            name=\"custom_text\"\n                                            rows={3}\n                                            value={formData.custom_text}\n                                            onChange={handleChange}\n                                        />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Tab>\n\n                    </Tabs>\n                </Tab>\n                <Tab eventKey=\"special\" title=\"Special\">\n                    <Tabs\n                        variant=\"pills\"\n                        id=\"special-tab-form\"\n                        activeKey={specialTabsKey}\n                        onSelect={handleChangeTab}\n                     >\n                        <Tab eventKey=\"kiosk\" title=\"Kiosk\">\n                            <Form.Select className=\"m-3\" aria-label=\"Choose a Retailer\" value={formData.kiosk_id?? ''} onChange={handleChangeKiosk}>\n                                <option value={''} disabled hidden>Choose a Kiosk...</option>\n                                {data.kiosks?.map((value: any) => <option key={`kiosk-${value.id}`} value={value.id}>{value.title}</option>)}\n                            </Form.Select>\n                        </Tab>\n                        <Tab eventKey=\"amenity\" title=\"Amenity\">\n                            <Form.Select className=\"m-3\" aria-label=\"Choose a Retailer\" value={formData.value} onChange={handleChangeAmenity}>\n                                <option value={''} disabled hidden>Choose Amenity...</option>\n                                {Object.keys(data.amenities)?.map((value: string) => (\n                                    <option key={`amenity-${value}`} value={value}>{data.amenities[value].name}</option>\n                                ))}\n                            </Form.Select>\n                        </Tab>\n                    </Tabs>\n                </Tab>\n                <Tab eventKey=\"custom\" title=\"Custom\">\n                    <Tabs\n                        variant=\"pills\"\n                        id=\"custom-tab-form\"\n                        activeKey={retailerTabsKey}\n                        onSelect={handleChangeTab}\n                     >\n                        <Tab eventKey=\"custom_text\" title=\"Text\">\n                            <Form.Group className=\"m-3\">\n                                <Row className=\"align-items-center mb-3\">\n                                    <Col sm=\"2\">\n                                        <Form.Label className=\"mb-0\">text</Form.Label>\n                                    </Col>\n                                    <Col sm=\"10\">\n                                        <Form.Control\n                                            name=\"custom_text\"\n                                            as=\"textarea\"\n                                            rows={3}\n                                            value={formData.custom_text}\n                                            onChange={handleChange}\n                                        />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Tab>\n                        <Tab eventKey=\"custom_image\" title=\"Image\">\n                            <Form.Group className=\"m-3\">\n                                <Row className=\"align-items-center mb-3\">\n                                    <Col sm=\"2\">\n                                        <Form.Label className=\"mb-0\">Image URL</Form.Label>\n                                    </Col>\n                                    <Col sm=\"10\">\n                                        <Form.Control\n                                            type=\"string\"\n                                            name=\"custom_image\"\n                                            value={formData.custom_image}\n                                            onChange={handleChange}\n                                        />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Tab>\n                    </Tabs>\n                </Tab>\n            </Tabs>\n            <Form.Group className=\"mb-3\">\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"2\">\n                        <Form.Label className=\"mb-0\">Size</Form.Label>\n                    </Col>\n                    <Col sm=\"10\">\n                        <Form.Control\n                            name=\"size\"\n                            type=\"number\"\n                            value={formData.size}\n                            onChange={handleChange}\n                        />\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"2\">\n                        <Form.Label className=\"mb-0\">Rotate</Form.Label>\n                    </Col>\n                    <Col sm=\"10\">\n                        <Form.Control\n                            name=\"rotate\"\n                            type=\"number\"\n                            value={rotation?? formData.rotate}\n                            onChange={handleChange}\n                        />\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"2\">\n                        <Form.Label className=\"mb-0\">Offset X</Form.Label>\n                    </Col>\n                    <Col sm=\"10\">\n                        <Form.Control\n                            name=\"offsetX\"\n                            type=\"number\"\n                            value={formData.offsetX}\n                            onChange={handleChange}\n                        />\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"2\">\n                        <Form.Label className=\"mb-0\">Offset Y</Form.Label>\n                    </Col>\n                    <Col sm=\"10\">\n                        <Form.Control\n                            name=\"offsetY\"\n                            type=\"number\"\n                            value={formData.offsetY}\n                            onChange={handleChange}\n                        />\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"3\">\n                        <Form.Label className=\"mb-0\">BG Color</Form.Label>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Form.Control\n                            name=\"bg_color\"\n                            type=\"string\"\n                            value={formData.bg_color}\n                            onChange={handleChange}\n                        />\n                    </Col>\n                    <Col sm=\"3\">\n                        <Form.Control\n                            type=\"color\"\n                            name=\"bg_color\"\n                            value={formData.bg_color}\n                            onChange={handleChange}\n                        />\n                    </Col>\n                </Row>\n                {['retail_name', 'custom_text', 'retail_text'].includes(formData.layer_type) && \n                    <Row className=\"align-items-center mb-3\">\n                        <Col sm=\"3\">\n                            <Form.Label className=\"mb-0\">Text Color</Form.Label>\n                        </Col>\n                        <Col sm=\"6\">\n                            <Form.Control\n                                type=\"string\"\n                                name=\"text_color\"\n                                value={formData.text_color}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                        <Col sm=\"3\">\n                            <Form.Control\n                                name=\"text_color\"\n                                type=\"color\"\n                                value={formData.text_color}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                    </Row>\n                }\n                {['kiosk', 'amenity'].includes(formData.layer_type) && \n                    <Row className=\"align-items-center mb-3\">\n                        <Col sm=\"3\">\n                            <Form.Label className=\"mb-0\">Icon Color</Form.Label>\n                        </Col>\n                        <Col sm=\"6\">\n                            <Form.Control\n                                type=\"string\"\n                                name=\"text_color\"\n                                value={formData.text_color}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                        <Col sm=\"3\">\n                            <Form.Control\n                                type=\"color\"\n                                name=\"text_color\"\n                                value={formData.text_color}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                    </Row>\n                }\n            </Form.Group>\n        </>\n    );\n}\n\nexport default MapboxForm;\n","import React, {MouseEventHandler, useCallback, useEffect, useMemo, useRef, useState} from \"react\";\nimport {Canvas, ThreeEvent, useThree} from \"@react-three/fiber\";\nimport useMeshFloors, { textLogoNamePrefix } from \"Hooks/useMeshFloors\";\nimport {SceneProperties} from \"./SceneProperties\";\nimport {CameraProperties} from \"./CameraProperties\";\nimport {Mesh, Object3D} from \"three\";\nimport {IAmenitiesInteractiveList, IExtMesh, IJsonConfig, IMeshParams, TMapMode} from \"types\";\nimport {FloorsMap} from \"./FloorsMap\";\nimport {useMapit2Data} from \"../../useMapit2Data\";\nimport {MapIt2Response} from \"../../mapitApiTypes\";\nimport { Stats } from '@react-three/drei';\nimport UIComponent from \"components/UIComponent\";\nimport {MapCenterMarker} from \"./MapCenterMarker\";\nimport { delete_route_path } from \"helpers/route.helpers\";\nimport { useMeshObjectContext } from \"contexts/MeshObjectContextProvider\";\nimport MapboxForm from \"components/MapboxForm/MapboxForm\";\nimport styles from '../../MapBox.module.css';\n\n\nconst amenitiesList: IAmenitiesInteractiveList[] = [\n    {\n        name: 'ATM',\n        type: 'atm',\n        imageUrl: '/assets/threejs/assets/img/amenities/atm.svg?color=FFFFFF',\n    },\n    {\n        name: 'Management',\n        type: 'management',\n        imageUrl: '/assets/threejs/assets/img/amenities/management.svg?color=FFFFFF',\n    },\n    {\n        name: 'Kids Area',\n        type: 'playarea',\n        imageUrl: '/assets/threejs/assets/img/amenities/playarea.svg?color=FFFFFF',\n    },\n    {\n        name: 'Restroom',\n        type: 'restroom',\n        imageUrl: '/assets/threejs/assets/img/amenities/restroom.svg?color=FFFFFF',\n    },\n    {\n        name: 'Elevator',\n        type: 'elevator',\n        imageUrl: '/assets/threejs/assets/img/amenities/elevator.svg?color=FFFFFF',\n    },\n    {\n        name: 'Security',\n        type: 'security',\n        imageUrl: '/assets/threejs/assets/img/amenities/security.svg?color=FFFFFF',\n    },\n] \n\ninterface ISceneComponentProps {\n    CENTER_ID?: string;\n    mapitData?: MapIt2Response;\n    config?: IJsonConfig;\n    stats?: boolean;\n    selectedActiveObjectId: string;\n    setSelectedActiveObjectId: React.Dispatch<React.SetStateAction<string>>;\n    mode?: TMapMode;\n    handleChangeMapitData: (data: unknown) => void;\n}\n\nexport interface IZoomData {\n    direction: 'in' | 'out';\n}\n\nconst SceneComponent = (params:ISceneComponentProps) => {\n    const data = useMapit2Data({ mapitData:params.mapitData, CENTER_ID: params.CENTER_ID });\n    const [selectedFloorIndex, setSelectedFloorIndex] = useState<number>(-1);\n\n    const { selectedActiveObjectId, setSelectedActiveObjectId } = params;\n\n    const [amenityTargetType, setAmenityTargetType] = useState<string>('');\n    const [zoom, setZoom] = useState<IZoomData | null>(null);\n\n    const handleFloorChange = (floorIndex: number): MouseEventHandler<HTMLDivElement> => (e) => {\n        setSelectedFloorIndex(floorIndex);\n    }\n\n    const { mode, handleChangeMapitData } = params;\n\n    const meshFloors = useMeshFloors(data, params.config, mode);\n    const mapCenterMarkerRef = useRef(null);\n    const labelRef = useRef<HTMLDivElement>(null);\n    const [ currentHoveredObject, setCurrentHoveredObject ] = useState<Object3D | null>(null);\n    const meshObjectContext = useMeshObjectContext();\n\n    const config = meshFloors.config;\n    const floors = meshFloors.floors;\n    const meshParams = meshFloors.meshParams;\n\n\n    // if selectedActiveObjectId is not -1, then it is set to the DEFAULT_SELECTED_STORE\n    let activeObjectId = config?.DEFAULT_SELECTED_STORE ?? '';\n    if (selectedActiveObjectId) {\n        activeObjectId = selectedActiveObjectId;\n    } else if (amenityTargetType) {\n        activeObjectId = '';\n    }\n\n    useEffect(() => {\n        // console.log('useEffect currentHoveredObject', currentHoveredObject)\n        document.body.style.cursor = currentHoveredObject? 'pointer' : 'default';\n    }, [currentHoveredObject]);\n\n    const [ currKioskObj, currKioskFloorIndex, kioskError ]: [ Mesh | null, number, string ] = useMemo(() => {\n        if (!config) {\n            return [ null, 0, '' ] // not an error - loading/initializing\n        }\n        let kioskError = '';\n        let currKioskObj: Mesh | null = null;\n        let currKioskFloorIndex = 0;\n        if (config.KIOSKS && config.KIOSKS[config.KIOSK]) {\n            // console.log('looking for kiosk', config.KIOSK, config.KIOSKS[config.KIOSK])\n            // console.log('config.KIOSKS', config.KIOSKS)\n            // console.log('meshParams', meshParams)\n            const kioskMapObjName = config.KIOSKS[config.KIOSK].map_obj_name;\n            const currKioskMeshParams = meshParams.flat().find(mesh => mesh.object_id === kioskMapObjName);\n            if (currKioskMeshParams) {\n                currKioskObj = currKioskMeshParams.mesh;\n                currKioskFloorIndex = currKioskMeshParams.floor_index;\n            }\n        } else {\n            if (config?.ROLE === 'WEBSITE') {\n                kioskError = \"This Kiosk is not assigned in MAP, so routes won't work. Please assign the Kiosk from Edit Map first.\";\n            }\n\n            console.error('Kiosk not found in config');\n            kioskError = 'Map initialization error';\n        }\n\n        return [ currKioskObj, currKioskFloorIndex, kioskError]\n    }, [config, meshParams]);\n\n    const resetHandle = () => {\n        setSelectedFloorIndex(currKioskFloorIndex);\n        setSelectedActiveObjectId('');\n    }\n\n    useEffect(() => {\n        const currKioskLogo = meshFloors.storeLogos.flat().find(storeLogo => storeLogo.storeLogo.object_id === 'custom-layer-' + (currKioskObj as IExtMesh).object_id)?.storeLogo;\n        if (currKioskLogo && mode !== 'edit') {\n            currKioskLogo.userData.htmlContent = <MapCenterMarker />\n        }\n        return () => {\n            if (currKioskLogo) {\n                currKioskLogo.userData.htmlContent = null;\n            }\n        }\n    }, [meshFloors, currKioskObj]);\n\n    useEffect(() => {\n        if (meshFloors.meshParams && meshFloors.meshParams.length && selectedActiveObjectId && meshObjectContext?.SetMeshObject) {\n            const object = meshFloors.meshParams[selectedFloorIndex === -1? 0 : selectedFloorIndex].find((value) => value.object_id === selectedActiveObjectId);\n            if (object) {\n                //@ts-ignore\n                handleMeshObjectContext(object);\n            }\n            //@ts-ignore\n        }\n    }, [meshFloors])\n\n    const handleMeshObjectContext = (object: IExtMesh) => {\n        if (meshObjectContext?.SetMeshObject) {\n            const textParams = meshFloors.textParams[selectedFloorIndex === -1? 0 : selectedFloorIndex]?.find(value => {\n                return value.textMesh.object_id === `${textLogoNamePrefix}${(object as IExtMesh).object_id}`\n            })\n\n            const logoParams = meshFloors.storeLogos[selectedFloorIndex === -1? 0 : selectedFloorIndex]?.find(value => {\n                return value.storeLogo.object_id === `${textLogoNamePrefix}${(object as IExtMesh).object_id}`\n            })\n\n            const result = [object as IExtMesh];\n\n            if (textParams) {\n                result.push(textParams.textMesh);\n            }\n\n            if (logoParams) {\n                result.push(logoParams.storeLogo)\n            }\n\n            meshObjectContext.SetMeshObject([...result]);\n        }\n    }\n\n    const onClick = useCallback((e: ThreeEvent<MouseEvent>) => {\n        e.stopPropagation();\n        // console.log('onClick', e.object)\n\n        const targetId = (e.object as IExtMesh).object_id;\n        handleMeshObjectContext(e.object as IExtMesh);\n        setSelectedActiveObjectId(targetId ?? '');\n        // console.log('set active object', targetId);\n        setAmenityTargetType('');\n    }, [selectedFloorIndex, meshFloors.meshParams.length]);\n\n    const handleAmenityClick = useCallback((type: string) => {\n        setAmenityTargetType(type)\n        setSelectedActiveObjectId('')\n    }, []);\n\n    const onCameraMove = useCallback((e: any) => {\n        if (!mapCenterMarkerRef || !mapCenterMarkerRef.current) {\n            return\n        }\n    }, []);\n\n    const onPointerEnter = useCallback((e: ThreeEvent<PointerEvent>) => {\n        e.stopPropagation();\n        // console.log('onPointerEnter', e.object)\n        if (!e.object.userData.storeName) {\n            // console.warn('onPointerEnter no storeName', e.object);\n            return;\n        }\n        setCurrentHoveredObject(e.object);\n    }, []);\n\n    const onPointerLeave = useCallback((e: ThreeEvent<PointerEvent>) => {\n        e.stopPropagation();\n        // console.log('onPointerLeave', e.object)\n        setCurrentHoveredObject(null);\n    }, []);\n\n    const onPointerMove = (e: ThreeEvent<PointerEvent>) => {\n        e.stopPropagation();\n        // console.log('onPointerMove', e.object)\n\n        if (labelRef && labelRef.current && e.object.userData.storeName && e.object.userData.storeName !== '') {\n            labelRef.current.style.top = `${e.offsetY - 65}px`;\n            labelRef.current.style.left = `${e.offsetX}px`;\n            labelRef.current.style.display = 'block';\n        }\n    }\n\n    if (!config || !meshFloors.meshParams.length) {\n        console.warn('LOADING MAP')\n        return <div>Loading Map</div>\n    }\n\n    if (kioskError) {\n        return <div>{kioskError}</div>\n    }\n\n    const currentFloorIndex = selectedFloorIndex > -1 ? selectedFloorIndex : currKioskFloorIndex;\n\n    if (!currKioskObj) {\n        console.error('NO KIOSK OBJECT FOUND');\n        return <div>Map initialization error</div>\n    }\n\n    // make sure that meshFloors conditionals are not null\n    const meshFloorsChecked: IMeshParams = meshFloors as IMeshParams;\n\n\n    let hoverObject = currentHoveredObject as IExtMesh\n    let hoverObjectId = '';\n    if (hoverObject && hoverObject.object_id) {\n        hoverObjectId = hoverObject.object_id;\n    }\n\n\n\n    return (\n        <>\n            {mode === 'edit' &&\n                <div className={styles['mapbox-admin-form']}>\n                    <MapboxForm\n                        data={data}\n                        setData={handleChangeMapitData}\n                        selectedId={selectedActiveObjectId}\n                        centerId={params.CENTER_ID as string}\n                    />\n                </div>\n            }\n            <div style={{ position: 'relative' }}>\n                <UIComponent accentColor={config.ACCENT_COLOR.getStyle()} floors={floors.length} selectedFloorIndex={currentFloorIndex} handleFloorChange={handleFloorChange} amenitiesList={amenitiesList} handleAmenityClick={handleAmenityClick} reset={resetHandle} zoomIn={() => setZoom({ direction: 'in' })} zoomOut={() => setZoom({ direction: 'out' })} />\n                <Canvas flat>\n                    {/* {params.stats? <Stats /> : null } */}\n                    <SceneProperties background={config.MAP_BACKGROUND_COLOR} />\n                    <CameraProperties near={1} far={10000} />\n                    {/*<axesHelper args={[5000]} />*/}\n\n                    <ambientLight intensity={1} color={'#c4c4c4'} />\n                    <directionalLight position={[0, 400, 0]} color={'#ffffff'} intensity={0.3} />\n                    <directionalLight position={[0, 0, 400]} color={'#c4c4c4'} intensity={0.2} />\n                    <directionalLight position={[0, 0, -400]} color={'#c4c4c4'} intensity={0.2} />\n                    <FloorsMap\n                        onCameraMove={onCameraMove}\n                        meshFloors={meshFloorsChecked}\n                        activeObjectId={activeObjectId}\n                        hoverObjectId={hoverObjectId}\n                        currKioskObj={currKioskObj}\n                        routeTargetId={activeObjectId}\n                        currentFloorIndex={currentFloorIndex}\n                        onPointerEnter={onPointerEnter}\n                        onPointerLeave={onPointerLeave}\n                        onPointerMove={onPointerMove}\n                        onClick={onClick}\n                        handleChangeFloor={handleFloorChange}\n                        amenityTargetType={amenityTargetType}\n                        escalatorNodes={meshFloors.escalator_nodes}\n                        zoom={zoom}\n                        mode={mode}\n                    />\n                </Canvas>\n                <div ref={labelRef}\n                    style={{\n                        position: 'absolute',\n                        padding: 10,\n                        background: '#ffffff',\n                        fontWeight: 600,\n                        color: '#000000',\n                        fontSize: 16,\n                        display: currentHoveredObject ? 'block' : 'none',\n                        top: 300,\n                        left: 400,\n                        opacity: .8,\n                    }}\n                >\n                    <div>\n                        {currentHoveredObject && currentHoveredObject.userData.storeName}\n                    </div>\n                </div>\n\n            </div>\n        </>\n    )\n};\n\n\n\nexport default SceneComponent;\n","import {useEffect, useState} from \"react\";\nimport {MapIt2Response} from \"./mapitApiTypes\";\n\ninterface useMapIt2DataProps {\n    CENTER_ID?: string;\n    mapitData?: MapIt2Response;\n}\n\n/**\n * This is a hook that fetches the mapit2 data from the server by CENTER_ID. or uses the data passed in.\n * @param CENTER_ID\n * @param mapitData\n */\nexport function useMapit2Data({ CENTER_ID, mapitData }: useMapIt2DataProps) {\n    const [data, setData] = useState<MapIt2Response|null>(null);\n\n    if (!CENTER_ID && !mapitData) {\n        console.error('useMapit2Data requires either CENTER_ID or mapitData');\n    }\n\n    useEffect(() => {\n        if (mapitData) {\n            setData(mapitData);\n            return;\n        }\n\n        if (!CENTER_ID) {\n            return;\n        }\n        // const url = '/data/mapit2/' + CENTER_ID + '.json';\n        const url = `https://test.mycenterdeals.com/api/mapit2/data?center=${CENTER_ID}&time=1693919608355`;\n        console.log('URL', url);\n\n        fetch(url)\n            .then(response => response.json())\n            .then((response: MapIt2Response) => {\n                setData({...response});\n            });\n\n    }, [CENTER_ID, mapitData]);\n\n    return data;\n}","import React, { useEffect, useState } from 'react';\nimport styles from './MapBox.module.css';\nimport SceneComponent from './components/SceneComponent/SceneComponent';\nimport {isMapIt2Response, MapIt2Response} from \"./mapitApiTypes\";\nimport {IJsonConfig, TMapMode} from \"./types\";\nimport MeshObjectContextProvider from 'contexts/MeshObjectContextProvider';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport interface IAppProps {\n    CENTER_ID?: string;\n    mapitData?: unknown;\n    config?: IJsonConfig;\n    stats?: boolean;\n    mode: TMapMode;\n}\n\nconsole.debug({styles});\n\nfunction MapBox({ CENTER_ID, mapitData, config, stats, mode }: IAppProps) {\n\n  const [selectedActiveObjectId, setSelectedActiveObjectId] = useState<string>('');\n  const [mapData, setMapData] = useState<unknown>(undefined);\n\n  useEffect(() => {\n    setMapData(mapitData);\n  }, [mapitData])\n\n  const handleChangeMapitData = (newData: unknown) => {\n    setMapData(newData);\n  }\n\n  if (!mapitData && !CENTER_ID) {\n    console.error('Please provide either mapitData or CENTER_ID');\n    return null;\n  }\n  if (!CENTER_ID && !isMapIt2Response(mapitData)) {\n    console.error('mapitData is not a valid MapIt2Response');\n    return null;\n  }\n\n  return (\n    <MeshObjectContextProvider>\n      <div className={styles['mapbox-component']}>\n          <SceneComponent setSelectedActiveObjectId={setSelectedActiveObjectId} selectedActiveObjectId={selectedActiveObjectId} stats={stats} mapitData={mapData as MapIt2Response} CENTER_ID={CENTER_ID} config={config} mode={mode} handleChangeMapitData={handleChangeMapitData}  />\n        <div className={styles.hide}>\n          <div id=\"map-special-svg-kiosk\">\n            <svg id=\"Layer_2\" data-name=\"Layer 2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 443.83 787.21\">\n              <path d=\"M451,587.7V8.14H7.14V589.5H111.43V730.89H71.27L38.59,763.58v31.78H416.36V764.93l-34.05-34H345.78V587.7ZM396.91,71.23v452.7H59.85V71.23Z\" transform=\"translate(-7.14 -8.14)\" fill=\"#222222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-atm\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 248.08 247.92\">\n              <path d=\"M122,257.27c-5.39-1-10.81-1.79-16.17-2.92C46.21,241.73,4.83,187.22,8.2,125.78,11.48,65.91,58.61,16.49,118.57,10.07a123.9,123.9,0,0,1,136.17,105.3c9.72,65.14-34,126.76-99,139.57-4.56.9-9.16,1.56-13.74,2.33Zm119.67-124c0-60.41-49.38-109.74-109.76-109.66S22.16,73.17,22.33,133.47A109.8,109.8,0,0,0,131.87,242.79C192.39,242.87,241.67,193.71,241.67,133.26Z\" transform=\"translate(-8.01 -9.35)\" fill=\"#222\" />\n              <path d=\"M142.74,209.12v17.52h-20V209.15c-16.35-2.42-30.49-8.31-39.37-22.87-5.29-8.67-7.81-18.17-8.61-28.56H104c.63,12.29,6,21.26,18.19,26a31.6,31.6,0,0,0,.46-3.66c0-11.83-.09-23.66.1-35.49,0-3-.93-4.26-3.86-5.14-6.36-1.9-12.81-3.81-18.77-6.68-24.22-11.66-29.61-43.54-10.9-63.07,7.4-7.74,16.65-12,27-14.3,1.94-.43,3.89-.79,6.33-1.28V38.43H142.7c0,4.09.19,8-.06,12-.21,3.14,1,4.26,4,4.9C161.3,58.39,173.8,65,180.47,79.1c2.7,5.7,3.82,12.15,5.84,18.89h-29c-2.52-5-4.56-9.87-7.34-14.25-1.3-2-4-3.16-6.85-5.24-.21,2.37-.43,3.76-.43,5.15,0,9,.2,18-.12,27-.15,4,1,5.68,5,6.81a120.71,120.71,0,0,1,19.6,7.27c29.52,14.08,31.09,54.34,5.8,72.94a60.33,60.33,0,0,1-25.11,10.52Zm.17-25.19c12.19-2.62,18.79-10.58,18-21.25-.58-8.26-7.84-14.53-18-15.4Zm-20.7-73.36V79.24c-8.71,1.32-14.1,7.27-14.38,15.45C107.55,103.15,112,108.2,122.21,110.57Z\" transform=\"translate(-8.01 -9.35)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-management\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 772.14 772.14\">\n              <path d=\"M12.61,738.09V58.45C28.35,20.11,40.21,12.29,82.7,12.29q319.74,0,639.46,0c41.63,0,62.59,21,62.59,62.6q0,319.73,0,639.46c0,42.33-7.5,53.72-46.15,70.07H59C35.27,777.22,19.94,761.66,12.61,738.09ZM400.34,61.77c-107.07,0-214.15.2-321.22-.26-12.89-.06-16.48,3.72-16.45,16.58q.55,319.68,0,639.36c0,12.41,2.94,17,16.27,16.93q319.68-.57,639.36,0c13.72,0,17.24-4.07,17.22-17.54q-.62-318.92.09-637.82c0-15.33-5.44-17.56-18.71-17.5C611.41,62,505.88,61.77,400.34,61.77Z\" transform=\"translate(-12.61 -12.29)\" fill=\"#222\" />\n              <path d=\"M262.69,306.22V651.6H192.15V166.28c30.74,0,61.46-.43,92.13.58,3.59.11,8.35,7.62,10.16,12.58Q342.59,311.11,390.09,443c1.68,4.63,3.75,9.13,6.67,16.17,25-70.19,49-137.75,73-205.3,9.13-25.64,18-51.37,27.69-76.8,1.63-4.29,6.68-10.23,10.3-10.34,28.14-.86,56.31-.47,85.28-.47V651.68h-70.4V306.9l-3.4-.66c-40.49,114.34-81,228.68-122.82,346.81L266,305.68Z\" transform=\"translate(-12.61 -12.29)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-playarea\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 670 772.73\">\n              <path d=\"M148.12,16l38.67,19.35c-1.08,3.94-1,5.26-1.61,5.69C146.81,68.47,142,105.72,153.25,148.13c4,15,10.9,27.7,8.38,46.15-3.85,28.24,2.4,58.08,5.93,87,7.47,61.24,15.95,122.37,24.06,183.54.22,1.7,1,3.32,5.06,4.77,0-6.85-.19-13.72,0-20.57q3.48-108,7-216.07c.49-15.79-.36-28.92-15.76-41.44-31.82-25.87-40.12-82.17-21.82-117.88,12.56-24.5,42.67-39.33,70-34.48,29.31,5.19,52.71,28.25,56.62,55.79,6.76,47.64-31.32,101.11-82.12,110.92-3.34,93-6.71,186.81-10.08,280.64l2,.51c8.65-25.2,17.71-50.26,25.86-75.62,12.44-38.67,20.78-45.73,62-45.4,25.4.2,51.66-5.14,75.71,8.28h0c10,20.57,21.3,40.63,29.58,61.87,8.15,20.92,13.22,43,22.11,64.6,0-22.62-1-45.31.36-67.85.9-14.63,2.86-30.09,8.56-43.36,15.8-36.77,49.23-48,85.26-51.6,53.64-5.4,91.8,16.8,118.08,67.53,4.33-48.86,8.76-95.83,12.54-142.85,1.47-18.36,2-36.83,1.8-55.24,0-4.14-3.6-9.86-7.24-12.11-38.47-23.86-61.06-77.9-50.47-122.24,7.85-32.89,45-57.77,80.43-53.93,34.42,3.72,64.49,35.87,65.08,69.56.87,50.08-32.63,99.45-78.55,111.54-8,98.49-16.21,198.19-24,297.92-1.24,15.88-.18,31.94-.77,47.89-.61,16.7-9.35,26.37-22.36,25.79-12.72-.56-20.17-9.65-20.3-25.88-.23-31.43,0-62.86-.16-94.28,0-5.15-.88-10.3-1.35-15.45l-4.94,0c-.44,5.2-1.27,10.39-1.28,15.59q-.09,149.16,0,298.31c0,6.16.36,12.61-1.28,18.41-3.27,11.61-9.78,20.13-23.7,20.13-13.76,0-20.67-8.24-24.18-19.78-1.75-5.74-1.29-12.24-1.29-18.4,0-55.13.07-110.26,0-165.39,0-5.75-1.1-11.49-1.68-17.24l-4.78-.27c-.79,5.38-2.25,10.76-2.26,16.14-.14,55.13,0,110.26,0,165.39,0,5.65.47,11.51-.8,16.92-3.05,13-9.77,22.67-25,22.54-12.68-.11-22.84-8.63-24.07-23.15-1.39-16.37-.93-32.92-.93-49.4q0-132.15.09-264.3c0-4.84-.76-9.69-1.16-14.53l-4.29-.33c-.77,4.87-2.16,9.73-2.2,14.6-.21,31.95.12,63.89-.24,95.83-.22,20.06-10.43,27-30.12,22.18-3.33-.82-7.64.15-10.89,1.63C405.73,577.45,398.51,575.6,393,561c-6.64-17.8-11.54-36.25-17.17-54.42-4.77-15.39-9.5-30.79-16.31-45.56,4.61,66.85,34.83,126.95,50.18,192.46H356c-.4,6.2-1,11.09-1,16-.07,30.92.13,61.83,0,92.74-.09,17.27-7.59,26.31-21.15,26.44s-21.28-8.67-21.46-26.19c-.33-30.39.05-60.8-.24-91.19-.05-5.32-1.93-10.62-3-15.92l-5.05.34c-.55,5.2-1.55,10.39-1.57,15.59-.14,27.31,0,54.62,0,81.92,0,4.12.27,8.27-.08,12.36-1.21,14.52-9.54,23.29-21.64,23.09s-20.85-9.05-21.09-23.66c-.51-30.9-.11-61.82-.09-92.74,0-5.55,0-11.1,0-18.3h-54.7c15.54-65.55,45.77-125.27,48.86-192.3a75.07,75.07,0,0,0-3.63,8.3c-9,29.51-17.65,59.11-26.79,88.56C220,569.27,213.22,577.24,200.64,574c-13.58-3.53-12.34-14-12.36-25.82-.06-33.23-.45-66.69-4.26-99.64-8.85-76.66-19.93-153.07-29.78-229.61-2.15-16.73-7.5-28.15-25.78-34.52-36.3-12.65-68.26-62.14-66.11-99.94,1.71-30,18.74-50.32,45.57-62.84,4.11-1.92,8.25-3.76,12.38-5.64Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n              <path d=\"M366.14,374.32c-10.69-26.47-3.48-53.71-3.51-80.64,0-5.71-.5-11.43-.77-17.14l-6.36-.05c0,7.36-.44,14.76.07,22.08,2.61,37.58-28.14,62.52-64,51.69-22.85-6.91-35.81-29.12-32.36-54.56.85-6.27.13-12.75.13-19.13l-7-.39c-.36,6.46-1.24,12.95-1,19.38.8,18.49,2.46,36.94,2.93,55.43.15,6-2.36,12-3.42,16.92-8-28.07-16.1-55.61-23.69-83.28-5.76-21-.8-30.34,20.52-31.34,21.48-1,43.14,2.79,64.75,3.44,7.73.23,15.57-3.86,23.32-3.71,15.13.3,30.72.3,45.19,4,11.92,3.08,10.3,15.27,7.59,25-4.42,15.82-10.3,31.26-14.23,47.19-3.64,14.79-5.54,30-8.21,45.07Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n              <path d=\"M573.81,274.55c-.08,26.89-23.52,50.26-50.32,50.17-27.05-.08-50.08-23.2-50.09-50.26,0-27.7,22.11-49.49,50.18-49.45S573.9,247,573.81,274.55Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-restroom\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 732.38 614.5\">\n              <path d=\"M129.05,159.85a55.6,55.6,0,1,1,55.6,55.6,55.69,55.69,0,0,1-55.6-55.6m55.7,69.6h-1.5a133.5,133.5,0,0,0-132,134.6v58.6a27,27,0,0,0,54,0v-58.9a78.92,78.92,0,0,1,18.9-52.2v366a27,27,0,1,0,53.9,0V472.65h13.2v204.9a27,27,0,0,0,54,0V311.35a78.75,78.75,0,0,1,18.9,50.4v60.9a27,27,0,0,0,54,0v-61.2c-.8-73.1-60.5-132-133.4-132m596.5,182.1c-3.7-8-7.3-16.8-11.1-26.2-25.9-62.1-64.9-155.9-157.8-155.9s-132,93.9-157.7,156c-3.9,9.3-7.6,18.1-11.2,26.1a27,27,0,0,0,13.5,35.7,26.17,26.17,0,0,0,11.1,2.4,26.93,26.93,0,0,0,24.6-15.9c3.9-8.5,7.7-17.8,11.8-27.6,19.4-46.8,37.7-86.1,63.7-106.9l-70.4,174.4c-10,24.6,3.7,44.8,30.2,44.8h23.8v159.1a27,27,0,0,0,54,0V518.45h13.1v159.1a27,27,0,0,0,54,0V518.45h23.9c26.6,0,40.2-20.2,30.3-44.8l-70.4-174.4c26,20.7,44.2,60,63.7,106.8,4,9.8,8,19.2,11.8,27.7a26.93,26.93,0,0,0,24.6,15.9,27.41,27.41,0,0,0,11.1-2.4,27.12,27.12,0,0,0,13.4-35.7m-169-196.2a55.65,55.65,0,1,0-55.6-55.6,55.61,55.61,0,0,0,55.6,55.6m-228-125.3a14.08,14.08,0,0,0-14.1,14.1v580.7a14.1,14.1,0,1,0,28.2,0V104.15a14.08,14.08,0,0,0-14.1-14.1\" transform=\"translate(-51.24 -90.05)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-family-restroom\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 648 604.44\">\n              <path d=\"M483.26,183.08v386.3c0,20.7,3.14,35.6,25.57,35.6,19.63,0,26.32-13.86,26.32-35.6v-214h10.61v214c0,22.64,8.55,35.6,28.5,35.6,19.25,0,27.17-11.72,27.17-35.6V183.08h12.24V322.52c0,20.29,1.88,32.84,20.75,32.84,15.42,0,21.58-12.38,21.58-32.84V193.68c0-60.18-27-74.85-90.31-74.85H515.52c-64.65,0-86.88,18.41-86.88,77.21V322.52c0,19,2.67,32.84,21.83,32.84,16.63,0,20.56-12.55,20.56-32.84V183.08\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M97.85,188.81,35.17,411.09H90V575.35c0,17.9,5.81,31.18,23,31.18,16.19,0,23.49-12.42,23.49-31.18V411.09h12.67V575.35c0,17.9,5.81,31.18,23.07,31.18,16.95,0,23.64-13.28,23.64-31.18V411.09h58.29L189.45,188.81l12.84-3.06L242,312.43c3.55,11.83,13.09,18.19,22.2,18.19,10.86,0,18.07-8.11,18.07-18.63,0-1.41,0-5.55-2.25-13.3L243.65,175.23c-12.45-42-35.09-56.37-75.2-56.37H127c-53.8,0-70.43,17.68-79.58,51.26L8,313.13c0,9.38,8.71,18,18.63,18,8.54,0,16.13-5.55,20-17.4l39-127,12.22,2.09\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M444.91,518.05l-12.71-42.8c-5.36-18.12-17.21-46.31-57.5-46.31H329.6c-40.48,0-52.27,28.19-57.94,46.31l-12.45,42.8c-3.94,11.24-.6,19.51,7.92,22,8.11,2.4,14.93-2.71,18.68-12.67l7.7-29.5c1.82-7,5.6-10,11-8.29,5.18,2.26,5.41,7.32,3.34,14.3,0,0-10.85,72.51-3.74,92,6.62,17.86,32,16,48,15.37,16.16.61,40.9,2.49,47.75-15.37,6.82-19.51-4.18-92-4.18-92-1.23-7-1.23-12,3.94-14.3,5-1.72,8.74,1.25,11,8.29l7.85,29.5c3.15,10,10.42,15.07,18.53,12.67,8.29-2.5,11.59-10.77,7.92-22m-93-102.53A48.95,48.95,0,1,0,303,366.57a48.87,48.87,0,0,0,48.83,48.95\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M542.27,104.18c25.92,0,47.77-21.76,47.77-49a48.11,48.11,0,0,0-47.77-48c-26,0-47.59,21.39-47.59,48,0,27.24,21.6,49,47.59,49\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M145.37,104.18c26,0,46.33-21.76,46.33-47.57S171.35,8.66,145.37,8.66s-46.91,22-46.91,48,21,47.57,46.91,47.57\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-elevator\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 581.01 581\">\n              <path d=\"M480.87,597H125.13A112.77,112.77,0,0,1,12.5,484.34V128.66A112.77,112.77,0,0,1,125.13,16H480.87A112.77,112.77,0,0,1,593.5,128.66V484.34A112.77,112.77,0,0,1,480.87,597ZM125.13,42.39a86.35,86.35,0,0,0-86.24,86.27V484.34a86.35,86.35,0,0,0,86.24,86.27H480.87a86.35,86.35,0,0,0,86.24-86.27V128.66a86.35,86.35,0,0,0-86.24-86.27Z\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n              <path d=\"M428.75,273.7a24.08,24.08,0,0,1-17.18-7.13L303,158,194.42,266.57A24.3,24.3,0,0,1,160,232.21l143-143L446,232.21a24.31,24.31,0,0,1-17.2,41.49\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n              <path d=\"M303,538.3,160.05,395.35A24.31,24.31,0,0,1,194.44,361L303,469.53,411.56,361A24.31,24.31,0,1,1,446,395.35Z\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-security\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 752.09 736.37\">\n              <path d=\"M28.78,317.59c2.71-4.8,5.33-9.66,8.15-14.4,11-18.36,31.75-27.56,53.13-23.59a49.46,49.46,0,0,1,40.14,39.7c.84,4.22,1.11,8.54,1.85,14.52h27.87c47.62,0,95.26-.18,142.88.32,10.18.1,15.63-2.52,18.93-12.91,19.06-60,38.82-119.85,58.39-179.92C350,120.53,340.16,99.37,349,73.44c6.33-18.56,27.67-33.56,47.89-33.67,21-.11,43.11,15.71,48.91,34.9,8.25,27.35-1.23,46.47-34.08,67.83,24.11,60,48.07,120.23,72.84,180.12,2,4.88,9.59,10.54,14.65,10.61,58.85.74,117.72.47,172.57.47,9.85-16.1,17.17-32.4,28.59-45,6.1-6.72,19.14-9.19,29.27-9.78,23.25-1.37,43.85,15.44,49.75,38,5.34,20.38-4.28,44.15-22.46,55.51-22.92,14.32-42.71,10.61-71.23-13.63-43,36.09-85.92,72.38-129.15,108.32-28,23.26-28.07,23-17.53,57.41q22.77,74.34,45.21,148.64c41.33,4,58.12,15.31,63.85,42.81,4.13,19.85-6.2,42.06-24.53,52.79-19.66,11.49-42.35,9.43-59.3-5.39-19.58-17.12-22.15-38.26-7.81-71.85-18.57-11.81-37.52-23.65-56.24-35.84-31.49-20.49-62.66-41.46-94.41-61.52-4.67-3-13.62-5-17.49-2.51-52.3,33.14-104,67.14-155.92,100.92,13.47,35.69,10.4,56.32-10.74,72.49-18,13.8-41,14.65-59.62,2.2s-26.72-35.64-20-58c7.12-23.77,26.9-35,63.15-34.91Q233,583.23,261.26,490.64L114.85,368c-17.47,11.79-38,19.64-57.78,5.48-11.49-8.21-19-22-28.29-33.28Z\" transform=\"translate(-28.78 -39.77)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-dog-poop-station\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 752.1 736.4\">\n              <ellipse transform=\"matrix(0.9488 -0.3159 0.3159 0.9488 -30.6034 83.2258)\" fill=\"#222\" cx=\"241.4\" cy=\"136\" rx=\"85.6\" ry=\"135.9\" />\n              <ellipse transform=\"matrix(0.3917 -0.9201 0.9201 0.3917 178.2635 541.6781)\" fill=\"#222\" cx=\"498.8\" cy=\"136\" rx=\"135.8\" ry=\"85.7\" />\n              <ellipse transform=\"matrix(0.665 -0.7469 0.7469 0.665 -223.1496 187.105)\" fill=\"#222\" cx=\"97\" cy=\"342.3\" rx=\"74.4\" ry=\"109.6\" />\n              <ellipse transform=\"matrix(0.6879 -0.7258 0.7258 0.6879 -19.9475 571.058)\" fill=\"#222\" cx=\"654\" cy=\"308.7\" rx=\"111.1\" ry=\"75.7\" />\n              <path fill=\"#222\" d=\"M747.3,578.7c-9.7-67.6-60.5-124.7-119.6-134.8l7.4,1.7c-48.9-3.7-96.1-32.2-126.4-76.3\n\t\tc-14.6-21.3-25.8-46.4-44.8-62.7c-15.5-13.3-34.9-19.4-54.1-22.6c-30.9-5.1-63.1-3.3-92.3,9.5s-55,37.1-68.5,69.4\n\t\tc-7.4,17.8-11,37.5-18.6,55.2C209.1,468,160.4,494,129.8,537c-22.6,31.8-34.8,73.1-33.6,114.1c0.3,10.8,1.6,22,6.5,31.3\n\t\tc4.9,9.5,13.1,16.1,21.4,21.7c40.2,27.1,90.4,34.1,135.1,19c56.2-19,105.8-71.2,164.1-65c21,2.2,40.7,12,60.7,19.4\n\tc73,27,154.5,22,224.6-13.7c9.8-5,19.6-10.8,26.8-19.9C748.9,626.8,750.6,601.3,747.3,578.7z\"/>\n            </svg>\n          </div>\n        </div>\n      </div>\n    </MeshObjectContextProvider>\n\n  );\n}\n\nexport default MapBox;\n","// API mapit2 data types\n\nimport { Group, Texture, Vector3 } from \"three\";\n\nexport type IRetailer = {\n    id: string;\n    index?: string;\n    retail_name: string;\n    slug: string;\n    location: string;\n    retailer_phone: string;\n    retailer_description: string;\n    logo: string;\n    map_obj_name: string;\n};\n\nexport type MapObj = {\n    id: string | number;\n    center_id: string;\n    retailer_id: string;\n    kiosk_id: string | null;\n    map_obj_name: string;\n    obj_type: string;\n    layer_type: string;\n    value: string;\n    custom_text: string;\n    custom_image: string;\n    hover_text: string;\n    bg_color: string;\n    transparent: string | number;\n    text_color: string;\n    size: string;\n    rotate: string;\n    offsetX: string;\n    offsetY: string;\n    goToFloor?: Function;\n};\n\nexport type Floor = {\n    id: string;\n    svg_map?: string;\n    objsGroup?: Group;\n    interactiveObjs?: any[];\n    escalatorsObjs?: any[];\n    escalatorsNodes?: Record<any, any>;\n    escalatorMeshes?: any[];\n    route_points?: IRoutePoint[];\n    route_tube?: any;\n    route_texture?: Texture | null | undefined;\n    routeMeshes?: any[];\n    route_active?: boolean;\n    center_id?: string;\n    title: string;\n    svg?: string;\n    status?: string;\n    created_at?: string;\n};\n\nexport type CameraControlsState = {\n    camera: null;\n    controls: null;\n};\n\nexport type Settings = {\n    MAP_BACKGROUND_COLOR: string;\n    ACCENT_COLOR: string;\n    STORE_DEFAULT_COLOR: string;\n    BIG_STORE_DEFAULT_COLOR: string;\n    WALL_THICKNESS: string;\n    WALL_COLOR: string;\n    BOUNDARY_THICKNESS: string;\n    BOUNDARY_COLOR: string;\n    BASE_COLOR: string;\n    STORE_TEXT_COLOR: string;\n    OVERLAY_COLOR: string;\n    OVERLAY_OPACITY: string;\n    AMENITIES_NAV_BG_COLOR: string;\n    AMENITIES_NAV_ICON_COLOR: string;\n};\n\nexport type Kiosk = {\n    id: string;\n    title: string;\n    map_obj_name: string;\n};\n\nexport type Amenity = {\n    name: string;\n    image: string;\n};\n\nexport type MapIt2Response = {\n    retailers: IRetailer[];\n    map_objs: MapObj[];\n    floors: Floor[];\n    camera_controls_states: {\n        display_app: CameraControlsState;\n        desktop: CameraControlsState;\n        tablet: CameraControlsState;\n        mobile: CameraControlsState;\n    };\n    settings: Settings;\n    kiosks: Kiosk[];\n    amenities: Record<string, Amenity>;\n};\n\nexport type IRoutePoint = {\n    name: string;\n    node: Vector3;\n}\n\nexport function isMapIt2Response(obj: unknown): obj is MapIt2Response {\n    if (typeof obj !== 'object' || obj === null) return false;\n\n    const response = obj as Record<string, unknown>;\n\n    return (\n        Array.isArray(response.retailers) &&\n        Array.isArray(response.map_objs) &&\n        Array.isArray(response.floors) &&\n        typeof response.camera_controls_states === 'object' &&\n        response.camera_controls_states !== null &&\n        typeof (response.camera_controls_states as Record<string, unknown>).display_app === 'object' &&\n        typeof (response.camera_controls_states as Record<string, unknown>).desktop === 'object' &&\n        typeof (response.camera_controls_states as Record<string, unknown>).tablet === 'object' &&\n        typeof (response.camera_controls_states as Record<string, unknown>).mobile === 'object' &&\n        typeof response.settings === 'object' &&\n        Array.isArray(response.kiosks) &&\n        typeof response.amenities === 'object'\n    );\n}"],"names":["get_node_name","vertex","floor_index","floors","node_count","exists","node_name","currentFloor","undefined","route_points","i","length","x","node","y","name","next_node_name","getMeshParams","path","paths","config","nodeCount","allNodesFloor","pathFinderGraph","_path$userData","consolePrefix","mesh_type","layer_color","color","clone","extrude","z_index","mesh_visible","mesh_draw","mesh_transparent","line_thickness","WALL_THICKNESS","interactiveMesh","layer_name","userData","id","startsWith","BOUNDARY_COLOR","BOUNDARY_THICKNESS","STYLE","WALL_COLOR","BUILDING_BASE_COLOR","BASE_COLOR","STORE_DEFAULT_COLOR","BIG_STORE_DEFAULT_COLOR","subPaths","forEach","subPath","curves","console","warn","curve","v1","v2","node1_name","exists1","_floors$floor_index$r","push","Vector3","node2_name","exists2","_floors$floor_index$r2","addNode","_extends","addLink","weight","distanceTo","allIndexedMapObjects","allIndexedRetailers","createGraph","hex_to_color","hex_code","Color","parseInt","renderOrders","escalator","underlay","overlay","base","store","kiosk","wall","boundary","amenity","getRenderOrder","getMaterialAndGeometry","mode","_allIndexedMapObjects","material_settings","side","DoubleSide","transparent","depthWrite","depthTest","opacity","OVERLAY_COLOR","OVERLAY_OPACITY","includes","ROLE","material","MeshLambertMaterial","colorDefault","bg_color","active","extrude_meshes","shapes","toShapes","geometry","ExtrudeGeometry","depth","bevelEnabled","wall_geometries","type","shape_extend","shape1","thickness","wallShape","Shape","point1","point2","dir","sub","normalize","multiplyScalar","point1_center","add","point2_center","distance","point1_above","point1_below","point2_above","point2_below","moveTo","lineTo","getWallShape","wall_geometry","mergeGeometries","ShapeGeometry","attributes","position","count","e","error","message","mesh","Mesh","object_id","visible","z","storeName","_mesh$mesh_type","layer_type","retailer_id","retail_name","custom_text","renderOrder","objsGroup","escalatorsNodes","escalatorsObjs","escalator_id","route_node_id","obj_type","value","interactiveObjs","create_route","from_mesh_object_id","to_mesh_object_id","scene","escalator_nodes","style","routePaths","routeCallback","floor","_floor$objsGroup","route_active","route_tube","dispose","remove","route_texture","escalatorMeshes","delete_route_path","from_obj","getObjectByProperty","to_obj","from_node_name","to_node_name","from_route_floor_index","to_route_floor_index","routeNodes","aStarPathFinder","find","get_route_nodes","ngraphPath","aStar","fromNode","toNode","link","data","debug","routeNodesEsclators","floor_routes","index","routeNode","Object","keys","key","_floors$allNodesFloor","escalator_mesh","goToFloor","_floors$allNodesFloor2","direction","floor_route","routePath","create_route_path","_floors$floor_index","_floors$floor_index2","routeMeshes","create_route_paths","_floors$floor_index$o","route_path","CurvePath","from_node","to_node","LineCurve3","TubeGeometry","BufferGeometry","copy","MeshBasicMaterial","map","get_route_texture","setDrawRange","ctx","document","createElement","getContext","canvas","width","height","fillStyle","fillRect","grd_width","min_grd_width","max_grd_width","grd","createLinearGradient","addColorStop","CanvasTexture","offset","colorSpace","loadFloors","results","GeometriesAndMaterials","result","meshParams","findStoreNodeRaycaster","Raycaster","routeNodeIds","find_store_node_raycaster","role","Map","point","origin_point","target_direction","set","storeIntersects","intersectObjects","object","escalatorIntersects","escalatorNodes","assign_route_nodes_to_stores","size","has","get","_floors$i$escalatorsN","_floors$escalatorsNod","_floors$i$escalatorsN2","_floors$escalatorsNod2","nodeIdFrom","nodeIdTo","linkFloorEscalators","graph","layer_text_logo_position_by_id","newMeshPos","mesh_size","newMesh","map_obj","offsetX","offsetY","obj_angle","rotate","rotateZ","Math","PI","scale","getImageLogo","new_object_id","mesh_center_point","handleAsync","img","Image","crossOrigin","src","logo","svg_image_name","svg_color","text_color","svg_block","getElementById","svg_element","querySelector","querySelectorAll","svgColoredPart","setAttribute","svgData","XMLSerializer","serializeToString","window","btoa","unescape","encodeURIComponent","custom_image","onload","c","drawImage","texture","PlaneGeometry","logoMesh","storeLogo","textLogoNamePrefix","defaultVars","MAP_BACKGROUND_COLOR","DEVICE","KIOSK","FLOORS","KIOSKS","CENTER_ID","STATS","DEBUG","ACCENT_COLOR","STORE_TEXT_COLOR","CAMERA_CONTROLS_STATES","ORIGINAL_CAMERA_POSITION","DEFAULT_CAMERA_POSITION","DEFAULT_CONTROLS_TARGET","DEFAULT_SELECTED_STORE","defaultMapObjValues","center_id","kiosk_id","map_obj_name","hover_text","allNonIndexedMapObjects","floorsData","BASE_URL","useMeshFloors","jsonConfig","setMeshParams","useState","textParams","setTextParams","storeLogos","setStoreLogos","setPathFinderGraph","setEscalatorNodes","urls","setUrls","processedConfig","setProcessedConfig","useLoader","SVGLoader","myFont","useFont","fontData","handleAsyncStoreLogos","useCallback","floorIndex","meshLogo","prevLogos","useEffect","init","response","kiosks","retailers","retailer","map_objs","obj","clearObject","makeIndexedMapObjects","Group","lookAt","svg_map","svg","title","settings","parseFloat","CAMERA","camera_controls_states","CONTROLS","AMENITIES","amenities","RETAILERS","values","removeFromParent","textMesh","TextsAndLogos","params","item","boundingBox","computeBoundingBox","getCenter","getSize","text","text_material","MeshPhongMaterial","text_geometry","TextGeometry","font","curveSegments","center","get_store_name_logo_geo","useMemo","SceneProperties","useThree","background","CameraProperties","props","camera","cameraProjectionNeedsUpdate","far","near","fov","PerspectiveCamera","updateProjectionMatrix","easeInOutCubic","pow","RouteTube","animateRoute","useRef","_mesh$geometry$index","log","end","animateTube","startTime","performance","now","progress","drawRangeEnd","current","animateTexture","offsetVector","useFrame","_jsx","meshFloors","routeTube","activeObjectId","hoverObjectId","handleChangeFloor","onPointerMove","onPointerOver","onPointerEnter","onPointerOut","onPointerLeave","onClick","floorMeshParams","floorTextParams","floorStoreLogos","_jsxs","children","interactive","hovered","MeshStandardMaterial","baseColor","newColor","r","g","b","getDarkerColor","uuid","htmlContent","Html","_params$geometry$boun","_params$goToFloor","_params$goToFloor2","boundingSphere","display","className","FloorsMap","currentFloorIndex","currKioskObj","routeTargetId","amenityTargetType","zoom","groupRef","routeTubes","setRouteTubes","mapControlRef","cameraFocus","accentColor","from","n","traverse","route","kiosk_obj_name","amenity_type","_to_obj_name","kiosk_obj","kiosk_node_name","to_obj_name","shortest_distance","mapObject","amenity_obj_name","amenity_obj","amenity_node_name","route_distance","getLink","get_nodes_distance","make_amenity_route","selectedFloorMeshParams","meshes","currentActiveObject","focus","objs","aspectRatio","Array","isArray","target","objsBoundingBox","reduce","box","union","Box3","obj_size","localToWorld","tanFOV","tan","new_y","max","new_z","angle","getCameraTiltPosition","get_camera_focus_object","aspect","targetDistance","animationStartTime","cameraTime","targetTime","vector","setLength","onCameraMove","rotation","ref","_Fragment","MapControls","onChange","maxPolarAngle","FloorSelector","selectedFloorIndex","handleFloorChange","floorButtons","UIComponent","amenitiesList","zoomIn","zoomOut","reset","clearRoute","handleAmenityClick","styles","preventDefault","Function","hide","backgroundColor","imageUrl","alt","MapCenterMarker","kioskElementRef","React","kioskElement","svgOrigin","svgClone","cloneNode","appendChild","removeChild","MeshObjectContext","createContext","MeshObjectContextProvider","MeshObject","SetMeshObject","Provider","useMeshObjectContext","context","useContext","Error","mainTabs","retailerTabs","specialTabs","getDefaultMapOjbValues","centerId","MapboxForm","_formData$retailer_id","_data$retailers","_formData$kiosk_id","_data$kiosks","_Object$keys","setData","selectedId","mainTabKey","setMainTabKey","retailerTabsKey","setRetailerTabsKey","specialTabsKey","setSpecialTabsKey","formData","setFormData","setRotation","timeoutRef","isPending","startTransition","useTransition","handleChangeTab","k","updateData","findIndex","handleChange","_context$MeshObject","clearInterval","setTimeout","setX","setY","replace","Button","variant","handleReset","defaultValues","Tabs","activeKey","onSelect","justify","Tab","eventKey","Form","Select","disabled","hidden","location","Row","Col","sm","Label","Control","as","rows","SceneComponent","_config$DEFAULT_SELEC","mapitData","url","fetch","then","json","useMapit2Data","setSelectedFloorIndex","selectedActiveObjectId","setSelectedActiveObjectId","setAmenityTargetType","setZoom","handleChangeMapitData","labelRef","currentHoveredObject","setCurrentHoveredObject","meshObjectContext","body","cursor","currKioskFloorIndex","kioskError","kioskMapObjName","currKioskMeshParams","flat","_meshFloors$storeLogo","currKioskLogo","handleMeshObjectContext","_meshFloors$textParam","_meshFloors$storeLogo2","logoParams","stopPropagation","targetId","meshFloorsChecked","getStyle","resetHandle","Canvas","intensity","top","left","padding","fontWeight","fontSize","MapBox","stats","mapData","setMapData","display_app","desktop","tablet","mobile","isMapIt2Response","newData","xmlns","viewBox","d","transform","fill","cx","cy","rx","ry"],"mappings":"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"}