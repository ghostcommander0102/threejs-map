{"version":3,"file":"index.cjs","sources":["../src/Hooks/useMeshFloors/nodesUtils.ts","../src/Hooks/useMeshFloors/getMeshParams.ts","../src/globals.ts","../src/helpers/misc.ts","../src/Hooks/useMeshFloors/getMaterialAndGeometry.ts","../src/Hooks/useMeshFloors/getWallShape.ts","../src/helpers/route.helpers.ts","../src/Hooks/useMeshFloors/loadFloors.ts","../src/helpers/draw.logo.helpers.ts","../src/Hooks/useMeshFloors/index.tsx","../src/defaults.ts","../src/components/SceneComponent/SceneProperties.tsx","../src/components/SceneComponent/CameraProperties.tsx","../src/helpers/easing.ts","../src/components/SceneComponent/RouteTube.tsx","../src/components/SceneComponent/Map.tsx","../src/components/SceneComponent/FloorsMap.tsx","../src/helpers/camera.helpers.ts","../src/components/UIComponent/FloorSelector.tsx","../src/components/Icons/ATM.tsx","../src/components/Icons/DogPoopStation.tsx","../src/components/Icons/Elevator.tsx","../src/components/Icons/FamilyRestroom.tsx","../src/components/Icons/Management.tsx","../src/components/Icons/PlayArea.tsx","../src/components/Icons/Restroom.tsx","../src/components/Icons/Security.tsx","../src/components/UIComponent/index.tsx","../src/components/SceneComponent/MapCenterMarker.tsx","../src/contexts/MeshObjectContextProvider.tsx","../src/components/MapboxForm/MapboxForm.tsx","../src/components/SceneComponent/SceneComponent.tsx","../src/useMapit2Data.ts","../src/MapBox.tsx","../src/mapitApiTypes.ts"],"sourcesContent":["import type {Vector2} from \"three\";\r\nimport {IFloorData} from \"../../types\";\r\n\r\nexport function next_node_name(node_count: number) {\r\n    return 'node-' + node_count;\r\n}\r\n\r\nexport function get_node_name(vertex: Vector2, floor_index: number, floors: IFloorData[], node_count: number): [string , boolean] {\r\n    let exists = false;\r\n    let node_name:string = '-name-not-found-';\r\n    const currentFloor = floors[floor_index];\r\n    if (currentFloor.route_points !== undefined) {\r\n        for (let i = 0; i < currentFloor.route_points.length; i++) {\r\n            if (vertex.x == currentFloor.route_points[i].node.x && vertex.y == currentFloor.route_points[i].node.y) {\r\n                exists = true;\r\n                node_name = currentFloor.route_points[i].name;\r\n                break;\r\n            }\r\n        }\r\n        if (!exists) {\r\n            node_name = next_node_name(node_count);\r\n            // draw_points([{ x: vertex.x, y: vertex.y }]);\r\n        }\r\n    }\r\n    return [node_name, exists];\r\n}","// import {SVGResultPaths} from \"three/examples/jsm/loaders/SVGLoader\";\r\nimport { SVGResultPaths } from \"three-stdlib\";\r\nimport {Graph} from \"ngraph.graph\";\r\nimport {Color, LineCurve, Vector2, Vector3} from \"three\";\r\nimport {get_node_name} from \"./nodesUtils\";\r\nimport {MeshType} from \"./getMaterialAndGeometry\";\r\nimport { IConfig, IFloorData } from \"../../types\";\r\n\r\nexport const getMeshParams = (path: SVGResultPaths, paths: SVGResultPaths[], floors: IFloorData[], floor_index: number, config: IConfig, nodeCount: number, allNodesFloor: Record<string, number>, pathFinderGraph: Graph) => {\r\n    const consolePrefix = 'MeshParams';\r\n    let mesh_type:MeshType = null;\r\n    var layer_color: Color | string = path.color.clone();\r\n    var extrude = 0;\r\n    var z_index = 0;\r\n    var mesh_visible = true;\r\n    var mesh_draw = true;\r\n    var mesh_transparent = false;\r\n    var line_thickness = config.WALL_THICKNESS;\r\n    var interactiveMesh = true;\r\n    var layer_name = path.userData?.node.id;\r\n    if (layer_name != undefined) {\r\n        if (layer_name.startsWith('boundary')) {\r\n            mesh_type = 'boundary';\r\n            layer_color = config.BOUNDARY_COLOR;\r\n            line_thickness = config.BOUNDARY_THICKNESS;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 9;\r\n            }\r\n        } else if (layer_name.startsWith('wall')) {\r\n            mesh_type = 'wall';\r\n            layer_color = config.WALL_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 8.5;\r\n            }\r\n        } else if (layer_name.startsWith('outer-wall')) {\r\n            mesh_type = 'outer-wall';\r\n            layer_color = config.WALL_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                mesh_draw = false;\r\n            }\r\n        } else if (layer_name.startsWith('building-base')) {\r\n            mesh_type = 'building-base';\r\n            layer_color = config.BUILDING_BASE_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 12;\r\n                z_index = -12;\r\n            }\r\n        } else if (layer_name.startsWith('base')) {\r\n            mesh_type = 'base';\r\n            layer_color = config.BASE_COLOR;\r\n        } else if (layer_name.startsWith('store')) {\r\n            mesh_type = 'store';\r\n            layer_color = config.STORE_DEFAULT_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 8;\r\n            }\r\n            if (layer_name.startsWith('store-underlay')) {\r\n                interactiveMesh = false;\r\n            }\r\n        } else if (layer_name.startsWith('big-store')) {\r\n            mesh_type = 'big-store';\r\n            layer_color = config.BIG_STORE_DEFAULT_COLOR;\r\n            if (config.STYLE == '3D') {\r\n                extrude = 16;\r\n            }\r\n        } else if (layer_name.startsWith('route-path')) {\r\n            mesh_type = 'route-path';\r\n            mesh_draw = false;\r\n            path.subPaths.forEach(subPath => {\r\n                if (subPath.curves.length == 0) {\r\n                    console.warn(consolePrefix + 'Route-path standalone anchor point exists, layer_name: \"%s\"', layer_name);\r\n                }\r\n\r\n                subPath.curves.forEach(curve => {\r\n                    //@ts-ignore\r\n                    const v1:Vector2 = curve.v1;\r\n                    //@ts-ignore\r\n                    const v2:Vector2 = curve.v2;\r\n\r\n                    const [node1_name, exists1] = get_node_name(v1, floor_index, floors, nodeCount);\r\n                    if (!exists1) {\r\n                        floors[floor_index].route_points?.push({\r\n                            name: node1_name,\r\n                            node: new Vector3(v1.x, v1.y, 1)\r\n                        });\r\n                        allNodesFloor[node1_name] = floor_index;\r\n                    }\r\n                    const [node2_name, exists2] = get_node_name(v2, floor_index, floors, nodeCount);\r\n                    if (!exists2) {\r\n                        floors[floor_index].route_points?.push({\r\n                            name: node2_name,\r\n                            node: new Vector3(v2.x, v2.y, 1)\r\n                        });\r\n                        allNodesFloor[node2_name] = floor_index;\r\n                    }\r\n                    pathFinderGraph.addNode(node1_name, { ...v1 });\r\n                    pathFinderGraph.addNode(node2_name, { ...v2 });\r\n\r\n                    // pathFinderGraph.addLink(node1_name, node2_name);\r\n                    pathFinderGraph.addLink(node1_name, node2_name, { weight: v1.distanceTo(v2) });\r\n                    pathFinderGraph.addLink(node2_name, node1_name, { weight: v1.distanceTo(v2) });\r\n                });\r\n            });\r\n        } else if (layer_name.startsWith('escalator-')) {\r\n            mesh_type = 'escalator';\r\n            mesh_visible = false;\r\n        } else if (layer_name.startsWith('kiosk-')) {\r\n            mesh_type = 'kiosk';\r\n            mesh_transparent = true;\r\n        } else if (layer_name.startsWith('amenity-')) {\r\n            mesh_type = 'amenity';\r\n            mesh_transparent = true;\r\n            z_index = 1;\r\n        } else if (layer_name.startsWith('overlay')) {\r\n            mesh_type = 'overlay';\r\n        } else if (layer_name.startsWith('special-shape')) {\r\n            mesh_type = 'special-shape';\r\n        } else {\r\n            extrude = 1;\r\n        }\r\n    } else {\r\n        console.warn(consolePrefix + 'Layer name is undefined, path', path)\r\n    }\r\n\r\n\r\n    /*console.debug({\r\n        mesh_type,\r\n        layer_color,\r\n        extrude,\r\n        z_index,\r\n        mesh_visible,\r\n        mesh_draw,\r\n        mesh_transparent,\r\n        line_thickness,\r\n        interactiveMesh,\r\n        path,\r\n        layer_name,\r\n    })*/\r\n    return {\r\n        mesh_type,\r\n        layer_color,\r\n        extrude,\r\n        z_index,\r\n        mesh_visible,\r\n        mesh_draw,\r\n        mesh_transparent,\r\n        line_thickness,\r\n        interactiveMesh,\r\n        path,\r\n        layer_name,\r\n    }\r\n}","import createGraph from \"ngraph.graph\";\nimport {IRetailer, MapObj} from \"./mapitApiTypes\";\nimport type {Mesh} from \"three\";\nimport path from \"ngraph.path\";\n\nexport const meshByObjectId = new Map<string,Mesh>();\nexport const allMapObjects:string[] = [];\nexport const allIndexedMapObjects = {} as Record<string, MapObj>;\nexport const allIndexedRetailers = {} as Record<string, IRetailer>;\nexport const allNodesFloor = {} as Record<string, number>;\n\n//<{ x:number, y:number }, { weight: number }>\nexport const pathFinderGraph = createGraph();\nexport const ngraphPath = path;\n","import {Color} from \"three\";\n\nexport function hex_to_color(hex_code: string) {\n    return new Color(hex_code.length === 6 ? parseInt('0x' + hex_code, 16) : hex_code);\n}\n\nexport const getFormatedColor = (color: string) => {\n    if (!color.length) return '';\n\n    const r = /#/g;\n    return '#' + color.replace(r, '');\n}","import {BackSide, Color, DoubleSide, ExtrudeGeometry, Mesh, MeshLambertMaterial, ShapeGeometry, Vector3} from \"three\";\r\nimport {getWallShape} from \"./getWallShape\";\r\n// import {mergeGeometries} from \"three/examples/jsm/utils/BufferGeometryUtils\";\r\nimport { mergeBufferGeometries as mergeGeometries } from \"three-stdlib\";\r\nimport {allMapObjects} from \"../../globals\";\r\nimport {IConfig, IExtMesh, IMeshValues, TMapMode} from \"../../types\";\r\nimport {hex_to_color} from \"../../helpers/misc\";\r\n\r\nimport {IRetailer, MapObj} from \"../../mapitApiTypes\";\r\n\r\n\r\nconst renderOrders = {\r\n    'route-path': 0,\r\n    'escalator': 0,\r\n    'underlay': 0,\r\n    'overlay': 1,\r\n    'building-base': 1,\r\n    'base': 2,\r\n    'store': 3,\r\n    'big-store': 4,\r\n    'kiosk': 5,\r\n    'wall': 6,\r\n    'outer-wall': 7,\r\n    'boundary': 8,\r\n    'amenity': 9,\r\n    'layer-image': 10,\r\n    'layer-text': 11,\r\n    'route-tube': 12,\r\n    'special-shape': 13,\r\n};\r\n\r\nexport type MeshType = keyof typeof renderOrders | null;\r\n\r\nexport function getRenderOrder(mesh_type: MeshType): number {\r\n    if (mesh_type !== undefined && mesh_type !== null && renderOrders[mesh_type] !== undefined) {\r\n        return renderOrders[mesh_type];\r\n    }\r\n    // console.warn(`Unknown mesh type: ${mesh_type}`)\r\n    return 0;\r\n}\r\n\r\nexport const getMaterial = (\r\n    config: IConfig,\r\n    mesh_type: MeshType,\r\n    layer_name: string,\r\n    layer_color: Color | string,\r\n    mesh_transparent: boolean,\r\n    allIndexedMapObjects: Record<string, MapObj>,\r\n) => {\r\n    const material_settings = {\r\n        color: layer_color instanceof Color ? layer_color : hex_to_color(layer_color),\r\n        side: DoubleSide,\r\n        transparent: false,\r\n        depthWrite: true,\r\n        depthTest: true,\r\n        opacity: 1,\r\n    }\r\n    if (config.STYLE == '2D' || mesh_type == 'base' || mesh_type == null) {\r\n        if (mesh_type != 'boundary') {\r\n            material_settings.depthWrite = false;\r\n            material_settings.depthTest = false;\r\n        }\r\n    }\r\n    if (mesh_type == 'overlay') {\r\n        material_settings.color = config.OVERLAY_COLOR;\r\n        material_settings.opacity = config.OVERLAY_OPACITY;\r\n    }\r\n    if (mesh_type && ['store', 'big-store', 'kiosk'].includes(mesh_type) && config.ROLE != 'PORTAL' && allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].transparent == 1) {\r\n        material_settings.opacity = 0;\r\n    }\r\n    var material = new MeshLambertMaterial(material_settings);\r\n    if (mesh_type && ['store', 'big-store', 'kiosk', 'amenity'].includes(mesh_type)) {\r\n        //@ts-ignore\r\n        material.colorDefault = material.color;\r\n        if (allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].bg_color != '') {\r\n            material.color = hex_to_color(allIndexedMapObjects[layer_name].bg_color);\r\n            //@ts-ignore\r\n            material.colorDefault = material.color;\r\n        }\r\n        //@ts-ignore\r\n        material.active = false;\r\n    }\r\n    if (config.ROLE != 'PORTAL' && mesh_transparent) {\r\n        material.opacity = 0;\r\n        material.transparent = true;\r\n    }\r\n\r\n    material.transparent = material.opacity !== 1;\r\n\r\n    return material;\r\n}\r\n\r\nexport const getGeometry = (\r\n    config: IConfig,\r\n    mesh_type: MeshType,\r\n    layer_name: string,\r\n    extrude: number,\r\n    line_thickness: number,\r\n    path: any,\r\n) => {\r\n    const consolePrefix = 'MaterialAndGeometry';\r\n\r\n    let shapes = path.toShapes(true);\r\n\r\n    // shapes.forEach((shape, index) => {\r\n    let extrude_meshes;\r\n    if (config.STYLE == '2D') {\r\n        extrude_meshes = ['building-base'];\r\n    } else {\r\n        extrude_meshes = ['store', 'big-store', 'base', 'building-base'];\r\n    }\r\n\r\n    let wall_meshes = ['wall', 'outer-wall', 'boundary'];\r\n\r\n    var geometry;\r\n    if (mesh_type && extrude_meshes.includes(mesh_type)) {\r\n        geometry = new ExtrudeGeometry(shapes, {\r\n            depth: -extrude,\r\n            bevelEnabled: false,\r\n        });\r\n    } else if (mesh_type && wall_meshes.includes(mesh_type)) {\r\n        //@ts-ignore\r\n        let wall_geometries = [];\r\n        //@ts-ignore\r\n        path.subPaths.forEach(subPath => {\r\n            //@ts-ignore\r\n            subPath.curves.forEach(curve => {\r\n                if (curve.type == 'LineCurve') {\r\n                    let shape_extend = 0;\r\n                    if (mesh_type == 'boundary') {\r\n                        shape_extend = 1;\r\n                    } else if (mesh_type == 'wall') {\r\n                        // shape_extend = 1 / 3;\r\n                    }\r\n                    let shape1 = getWallShape(curve, line_thickness, shape_extend);\r\n                    let wall_geometry = new ExtrudeGeometry(shape1, {\r\n                        depth: -extrude,\r\n                        bevelEnabled: false,\r\n                    });\r\n                    wall_geometries.push(wall_geometry);\r\n                } else {\r\n                    console.warn(consolePrefix + '\"%s\" found in walls. Check layer \"%s\"', curve.type, layer_name);\r\n                }\r\n            });\r\n        });\r\n\r\n        if (wall_geometries.length == 1) {\r\n            //@ts-ignore\r\n            geometry = wall_geometries[0];\r\n        } else if (wall_geometries.length > 1) {\r\n            //@ts-ignore\r\n            geometry = mergeGeometries(wall_geometries);\r\n        } else {\r\n            console.warn(consolePrefix + 'Unneccessary wall exists \"%s\"', layer_name);\r\n        }\r\n    } else {\r\n        geometry = new ShapeGeometry(shapes);\r\n        try {\r\n            //@ts-ignore\r\n            if (geometry.attributes.position.count == 0) {\r\n                console.warn(consolePrefix + 'Unneccessary map shape \"%s\"', layer_name, path.userData.node);\r\n            }\r\n        } catch (e: any) {\r\n            console.error(e.message);\r\n        }\r\n    }\r\n\r\n    return geometry;\r\n}\r\n\r\nexport const getMaterialAndGeometry = (config: IConfig, mesh_type: MeshType, layer_name: string, layer_color: Color | string, mesh_transparent: boolean, mesh_visible: boolean, z_index: number, extrude: number, line_thickness: number, floors: any, floor_index: number, allIndexedMapObjects: Record<string, MapObj>, allIndexedRetailers: Record<string, IRetailer>, path: any, mode?: TMapMode): IMeshValues => {\r\n    \r\n    const material = getMaterial(\r\n        config,\r\n        mesh_type,\r\n        layer_name,\r\n        layer_color,\r\n        mesh_transparent,\r\n        allIndexedMapObjects\r\n    );\r\n\r\n    const geometry = getGeometry(\r\n        config,\r\n        mesh_type,\r\n        layer_name,\r\n        extrude,\r\n        line_thickness,\r\n        path\r\n    );\r\n\r\n    const mesh = new Mesh(geometry, material) as IExtMesh;\r\n    mesh.object_id = layer_name;\r\n    mesh.mesh_type = mesh_type;\r\n    mesh.floor_index = floor_index;\r\n    mesh.visible = mesh_visible;\r\n    mesh.position.z = z_index;\r\n    let storeName = '';\r\n    if (['retail_name', 'retail_text', 'custom_text'].includes(allIndexedMapObjects[layer_name]?.layer_type)) {\r\n        if (allIndexedMapObjects[layer_name].layer_type && allIndexedMapObjects[layer_name].layer_type == 'retail_name' && allIndexedMapObjects[layer_name].retailer_id && allIndexedRetailers[allIndexedMapObjects[layer_name].retailer_id]) {\r\n            storeName = allIndexedRetailers[allIndexedMapObjects[layer_name].retailer_id].retail_name;\r\n        } else if (['retail_text', 'custom_text'].includes(allIndexedMapObjects[layer_name].layer_type)) {\r\n            storeName = allIndexedMapObjects[layer_name].custom_text;\r\n        }\r\n    }\r\n    mesh.userData.storeName = storeName;\r\n    if (config.STYLE == '2D') {\r\n        mesh.renderOrder = getRenderOrder(mesh_type);\r\n        if (layer_name && layer_name.includes('underlay')) {\r\n            mesh.renderOrder = getRenderOrder('underlay');\r\n        }\r\n    }\r\n\r\n    floors[floor_index].objsGroup.add(mesh);\r\n\r\n    if (mesh_type == 'escalator') {\r\n        floors[floor_index].escalatorsNodes[layer_name] = null;\r\n        floors[floor_index].escalatorsObjs.push(mesh);\r\n        mesh.escalator_id = floor_index + '-' + layer_name;\r\n    }\r\n\r\n    if (mesh_type && ['store', 'big-store', 'kiosk', 'amenity'].includes(mesh_type)) {\r\n        //@ts-ignore\r\n        mesh.route_node_id = null;\r\n\r\n        // add floor_index to the kiosks\r\n        if (allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].layer_type == 'kiosk') {\r\n            var kiosk_id = allIndexedMapObjects[layer_name].kiosk_id;\r\n            /*if (kiosk_id != null && ngCtrlElem.scope().kiosks[kiosk_id]) {\r\n                ngCtrlElem.scope().kiosks[kiosk_id].floor_index = floor_index;\r\n            }*/\r\n        }\r\n\r\n        if (config.ROLE == 'PORTAL') {\r\n            allMapObjects.push(layer_name);\r\n        }\r\n        if (\r\n            (config.ROLE == 'PORTAL') ||\r\n            (config.ROLE != 'PORTAL' && mesh_type == 'kiosk') ||\r\n            (config.ROLE != 'PORTAL' && config.ROLE != 'PORTAL_KIOSK' && allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].obj_type == 'retailer' && allIndexedMapObjects[layer_name].retailer_id != null) ||\r\n            (config.ROLE != 'PORTAL' && config.ROLE != 'PORTAL_KIOSK' && allIndexedMapObjects[layer_name] && allIndexedMapObjects[layer_name].layer_type == 'amenity' && allIndexedMapObjects[layer_name].value != '') ||\r\n            (mode === 'edit' && (allIndexedMapObjects[layer_name]) && (allIndexedMapObjects[layer_name].obj_type === 'special' || allIndexedMapObjects[layer_name].obj_type === 'custom')) ||\r\n            (mode === 'edit' && ['store', 'kiosk', 'amenity'].includes(mesh.mesh_type?? ''))\r\n        ) {\r\n            // if (interactiveMesh) {\r\n            floors[floor_index].interactiveObjs.push(mesh);\r\n            // }\r\n        }\r\n    }\r\n\r\n    // if (['store', 'big-store'].includes(mesh_type as string)) {\r\n    //     console.debug({allIndexedMapObjects: allIndexedMapObjects[layer_name]});\r\n    // }\r\n\r\n    return {\r\n        mesh,\r\n        geometry,\r\n        material,\r\n        object_id: layer_name,\r\n        mesh_type,\r\n        floor_index,\r\n        visible: mesh_visible,\r\n        renderOrder: mesh.renderOrder,\r\n    }\r\n    // });\r\n\r\n}","import {LineCurve, Shape, Vector3} from \"three\";\r\n\r\nexport function getWallShape(curve: LineCurve, thickness = 3, shape_extend = 0) {\r\n    let wallShape = new Shape();\r\n    let point1 = new Vector3(curve.v1.x, curve.v1.y, 0);\r\n    let point2 = new Vector3(curve.v2.x, curve.v2.y, 0);\r\n\r\n    // form help and formulas in /assets/threejs/help/\r\n    let dir = point2.clone().sub(point1).normalize().multiplyScalar(-thickness * shape_extend);\r\n    let point1_center = point1.clone().add(dir);\r\n\r\n    dir = point1.clone().sub(point2).normalize().multiplyScalar(-thickness * shape_extend);\r\n    let point2_center = point2.clone().add(dir);\r\n\r\n    let distance = point1.distanceTo(point2_center);\r\n\r\n    let point1_above = {\r\n        x: point1_center.x - (point2.y - point1_center.y) * thickness / distance,\r\n        y: point1_center.y - (point1_center.x - point2.x) * thickness / distance\r\n    };\r\n    let point1_below = {\r\n        x: point1_center.x + (point2.y - point1_center.y) * thickness / distance,\r\n        y: point1_center.y + (point1_center.x - point2.x) * thickness / distance\r\n    };\r\n\r\n    let point2_above = {\r\n        x: point2_center.x + (point1.y - point2_center.y) * thickness / distance,\r\n        y: point2_center.y + (point2_center.x - point1.x) * thickness / distance\r\n    };\r\n    let point2_below = {\r\n        x: point2_center.x - (point1.y - point2_center.y) * thickness / distance,\r\n        y: point2_center.y - (point2_center.x - point1.x) * thickness / distance\r\n    };\r\n\r\n    wallShape.moveTo(point1_above.x, point1_above.y);\r\n    wallShape.lineTo(point1_below.x, point1_below.y);\r\n    wallShape.lineTo(point2_below.x, point2_below.y);\r\n    wallShape.lineTo(point2_above.x, point2_above.y);\r\n\r\n    // shape.moveTo(point1_above.x, point1_above.y);\r\n    // shape.bezierCurveTo(point1_above.x, point1_above.y, point1_long_center.x, point1_long_center.y, point1_below.x, point1_below.y);\r\n    // shape.lineTo(point2_below.x, point2_below.y);\r\n    // shape.bezierCurveTo(point2_below.x, point2_below.y, point2_long_center.x, point2_long_center.y, point2_above.x, point2_above.y);\r\n\r\n    return wallShape;\r\n}","import {\n    BufferGeometry,\n    CanvasTexture,\n    Color,\n    CurvePath,\n    DoubleSide,\n    LineCurve3,\n    Mesh,\n    MeshBasicMaterial,\n    Object3D,\n    Raycaster,\n    Scene,\n    TubeGeometry,\n    Vector3,\n} from \"three\";\nimport {getRenderOrder} from \"Hooks/useMeshFloors/getMaterialAndGeometry\";\nimport {allNodesFloor} from \"../globals\";\nimport * as ngraphPath from \"ngraph.path\";\nimport {PathFinder} from \"ngraph.path\";\nimport {IRetailer, MapObj} from \"../mapitApiTypes\";\nimport {IExtMesh, IFloorData} from \"../types\";\nimport {Graph, Node} from \"ngraph.graph\";\n\nconst consolePrefix = 'ROUTE: ';\nlet route_exists = null;\nlet activeMapObjectName: string | null = null;\n\nfunction makeObjectActive(object_id: string | null = null, accentColor: string | Color, scene: Scene) {\n    clearActiveEffect(scene);\n    if (object_id != null) activeMapObjectName = object_id;\n    let obj = scene.getObjectByProperty('object_id', activeMapObjectName as string) as IExtMesh;\n    // obj.material.color = config.ACCENT_COLOR;\n    //@ts-ignore\n    obj.material.color = new Color(`#${accentColor}`);\n    //@ts-ignore\n    obj.material.active = true;\n    return obj;\n}\n\nfunction clearActiveEffect(scene: Scene) {\n    if (activeMapObjectName) {\n        let obj = scene.getObjectByProperty('object_id', activeMapObjectName) as IExtMesh;\n        //@ts-ignore\n        obj.material.color = { ...obj.material.colorDefault };\n        //@ts-ignore\n        obj.material.active = false;\n        activeMapObjectName = null;\n    }\n}\n\nexport function delete_route_path(floors: IFloorData[]) {\n    for (let floor_index = 0; floor_index < floors.length; floor_index++) {\n        const floor = floors[floor_index];\n        floor.route_active = false;\n\n        if (floor.route_tube != null) {\n            floor.route_tube.geometry.dispose();\n            //@ts-ignore\n            floor.route_tube.material.dispose();\n            floor.objsGroup?.remove(floor.route_tube);\n        }\n\n        floor.route_tube = undefined;\n        floor.route_texture = null;\n        floor.escalatorMeshes = [];\n    }\n}\n\nexport function create_route(from_mesh_object_id: string, to_mesh_object_id: string, scene: Scene, floors: IFloorData[], escalator_nodes: string[], pathFinderGraph: Graph, style: string): Mesh[] {\n    if (from_mesh_object_id === to_mesh_object_id) {\n        return [];\n    }\n    const routePaths = create_route_paths(from_mesh_object_id, to_mesh_object_id, scene, allNodesFloor, escalator_nodes, floors, pathFinderGraph, style);\n    if (!routePaths.length) console.warn(consolePrefix + 'No route found in between \"%s\" and \"%s\"', from_mesh_object_id, to_mesh_object_id);\n\n    return routePaths;\n}\n\nfunction create_route_paths(from_mesh_object_id: string, to_mesh_object_id: string, scene: Scene, allNodesFloor: Record<string, number>, escalator_nodes: any[] , floors: IFloorData[], pathFinderGraph: Graph, style: string, routeCallback = null) {\n    // TODO: remove scene dependency and scene.getObjectByProperty\n    const routePaths = [] as any[];\n    delete_route_path(floors);\n    let from_obj = scene.getObjectByProperty('object_id', from_mesh_object_id) as IExtMesh;\n    let to_obj = scene.getObjectByProperty('object_id', to_mesh_object_id) as IExtMesh;\n    let from_node_name = from_obj.route_node_id;\n    let to_node_name = to_obj.route_node_id;\n\n    // console.log({\n    //     from_mesh_object_id,\n    //     to_mesh_object_id,\n    //     from_obj,\n    //     to_obj,\n    //     from_node_name,\n    //     to_node_name,\n    // })\n\n    // from_node_name = 'node-147';\n    // to_node_name = 'node-221';\n\n    if (!from_node_name) console.error(consolePrefix + 'Route Anchor point missing for \"%s\"', from_mesh_object_id);\n    if (!to_node_name) console.error(consolePrefix + 'Route Anchor point missing for \"%s\"', to_mesh_object_id);\n\n    if (!from_node_name || !to_node_name) return routePaths;\n\n    const from_route_floor_index = from_obj.floor_index;\n    const to_route_floor_index = to_obj.floor_index;\n\n    const aStarPathFinder = ngraphPath.aStar(pathFinderGraph, {\n        distance: function (fromNode, toNode, link) {\n            if (link.data) return link.data.weight;\n            return false;\n        },\n        //@ts-ignore\n        debug: true,\n    });\n    const routeNodes = get_route_nodes(from_node_name, to_node_name, aStarPathFinder);\n    const routeNodesEsclators = [];\n    if (!routeNodes) {\n        return [];\n    }\n    const floor_routes = [];\n\n    for (let index = 0; index < routeNodes.length; index++) {\n        const routeNode = routeNodes[index];\n        if (floor_routes[allNodesFloor[routeNode.id]]) {\n            floor_routes[allNodesFloor[routeNode.id]].push(routeNode);\n        } else {\n            floor_routes[allNodesFloor[routeNode.id]] = [routeNode];\n        }\n\n        if (escalator_nodes.includes(routeNode.id) && escalator_nodes.includes(routeNodes[index - 1].id) && escalator_nodes.includes(routeNodes[index + 1].id)) {\n            // don't consider these middle escalators nodes\n        } else {\n            routeNodesEsclators.push(routeNode);\n        }\n    }\n    for (let index = 0; index < routeNodesEsclators.length; index++) {\n        const routeNode = routeNodesEsclators[index];\n        if (\n            allNodesFloor[routeNodesEsclators[0].id] !== allNodesFloor[routeNodesEsclators[routeNodesEsclators.length - 1].id] // proceed only if the start node and end node is not on the same floor\n            && escalator_nodes.includes(routeNode.id) // proceed only if the current node is a escalator\n        ) {\n            const escalator_id = Object.keys(floors[allNodesFloor[routeNode.id]].escalatorsNodes as object).find(key => floors[allNodesFloor[routeNode.id]]?.escalatorsNodes?.[key] === routeNode.id);\n            const escalator_mesh: IExtMesh = scene.getObjectByProperty('escalator_id', allNodesFloor[routeNode.id] + '-' + escalator_id) as IExtMesh;\n            let goToFloor = null;\n\n            if (allNodesFloor[routeNode.id] !== allNodesFloor[routeNodesEsclators[index + 1].id] && escalator_nodes.includes(routeNodesEsclators[index + 1].id)) {\n                goToFloor = {\n                    index: allNodesFloor[routeNodesEsclators[index + 1].id],\n                    direction: 'Next',\n                };\n            }\n\n            if (allNodesFloor[routeNode.id] !== allNodesFloor[routeNodesEsclators[index - 1].id] && escalator_nodes.includes(routeNodesEsclators[index - 1].id)) {\n                goToFloor = {\n                    index: allNodesFloor[routeNodesEsclators[index - 1].id],\n                    direction: 'Previous',\n                };\n            }\n\n            if (goToFloor && escalator_mesh) {\n                escalator_mesh.goToFloor = goToFloor;\n                //@ts-ignore\n                floors[allNodesFloor[routeNode.id]]?.escalatorMeshes?.push(escalator_mesh);\n            }\n        }\n\n    }\n    for (let floor_index = 0; floor_index < floor_routes.length; floor_index++) {\n        const floor_route = floor_routes[floor_index];\n        if (floor_route && floor_route.length > 1) {\n            const routePath = create_route_path(floor_route, floor_index, floors, style);\n            routePaths[floor_index] = routePath;\n\n            floors[floor_index].route_active = true;\n            floors[floor_index].routeMeshes = [ routePath ];\n            if (floor_index === from_route_floor_index) {\n                //@ts-ignore\n                floors[floor_index]?.routeMeshes?.push(from_obj);\n            }\n            if (floor_index === to_route_floor_index) {\n                //@ts-ignore\n                floors[floor_index]?.routeMeshes?.push(to_obj);\n            }\n        }\n    }\n\n    // setTimeout(function () {\n    //     //TODO openFloorMap functionality\n    //     // openFloorMap(from_route_floor_index);\n    // });\n\n    return routePaths;\n}\n\nfunction create_route_path(\n    routeNodes: Node<any>[],\n    floor_index: number,\n    floors: IFloorData[],\n    style = '2D',// config.STYLE\n) {\n    let distance = 0;\n    let route_path = new CurvePath<Vector3>();\n    for (let i = 1; i < routeNodes.length; i++) {\n        let from_node = new Vector3(routeNodes[i - 1].data.x, routeNodes[i - 1].data.y, 0);\n        let to_node = new Vector3(routeNodes[i].data.x, routeNodes[i].data.y, 0);\n        route_path.add(new LineCurve3(from_node, to_node));\n        distance += from_node.distanceTo(to_node);\n    };\n    var geometry: TubeGeometry = new TubeGeometry(route_path, 400, 6, 8);\n    //@ts-ignore\n    geometry = new BufferGeometry().copy(geometry);\n    var material = new MeshBasicMaterial({\n        map: get_route_texture(distance, floor_index, floors),\n        transparent: true,\n        side: DoubleSide,\n        depthTest: false,\n        depthWrite: false,\n    });\n\n    let route_tube = new Mesh(geometry, material) as IExtMesh;\n    if (style == '2D') {\n        route_tube.position.z = -10;\n    }\n    route_tube.position.z = 0;\n    route_tube.renderOrder = getRenderOrder('route-tube');\n    route_tube.mesh_type = 'route-tube';\n    //@ts-ignore\n    route_tube.geometry.setDrawRange(0, route_tube.geometry.index.count);\n    // draw_route_tube(route_tube, geometry.attributes.position.count, floors);\n\n    floors[floor_index].route_tube = route_tube;\n    floors[floor_index].objsGroup?.add(route_tube);\n\n    return route_tube;\n}\n\nfunction get_route_nodes(from_node_name: string, to_node_name: string, aStarPathFinder: PathFinder<any>) {\n    let routeNodes = aStarPathFinder.find(to_node_name, from_node_name);\n    if (routeNodes.length == 0) return false;\n    return routeNodes;\n}\n\n//TODO\nfunction get_nodes_distance(from_node_name: string, to_node_name: string, aStarPathFinder: PathFinder<any>, pathFinderGraph: Graph) {\n    let distance = 0;\n\n    let routeNodes = aStarPathFinder.find(to_node_name, from_node_name);\n    if (routeNodes.length == 0) return false;\n\n    for (let i = 1; i < routeNodes.length; i++) {\n        let link = pathFinderGraph.getLink(routeNodes[i - 1].id, routeNodes[i].id);\n        distance += link?.data.weight || 0;\n    };\n    return distance;\n}\n\nfunction draw_route_tube(route_tube: IExtMesh, total_faces: number) {\n    //@ts-ignore\n    route_tube.geometry.setDrawRange(0, total_faces);\n    /*createjs.Ticker.framerate = 60;\n    createjs.Tween.get({ x: 0 },\n        {\n            onChange: function (event) {\n                route_tube.geometry.setDrawRange(0, event.target.target.x);\n            },\n            onComplete: function () {\n                animate_route_path(floors);\n            }\n        })\n        .to({ x: total_faces }, 1000, createjs.Ease.cubicInOut);\n    */\n}\n\nfunction get_route_texture(distance: number, floor_index: number, floors: IFloorData[]) {\n    let canvas = document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    if (ctx) {\n        ctx.canvas.width = distance;\n        ctx.canvas.height = 80;\n\n        ctx.fillStyle = \"#4ea5ff\";\n        ctx.fillRect(0, 0, distance, 80);\n\n        let grd_width = 0.1 * distance;\n        const min_grd_width = 60;\n        const max_grd_width = 120;\n        if (grd_width < min_grd_width) grd_width = min_grd_width;\n        if (grd_width > max_grd_width) grd_width = max_grd_width;\n\n        let grd = ctx.createLinearGradient(0, 0, grd_width, 0);\n        grd.addColorStop(0, \"#4ea5ff\");\n        grd.addColorStop(0.4, \"white\");\n        grd.addColorStop(0.6, \"white\");\n        grd.addColorStop(1, \"#4ea5ff\");\n\n        ctx.fillStyle = grd;\n        ctx.fillRect(10, 0, grd_width, 80);\n\n    let route_texture = new CanvasTexture(ctx.canvas);\n    route_texture.offset.x = 1;\n    route_texture.colorSpace = 'srgb';\n\n        floors[floor_index].route_texture = route_texture;\n\n        return route_texture;\n    } else {\n        return undefined;\n    }\n}\n\n//TODO\nfunction animate_route_path(floors: IFloorData[]) {\n    /*floors.forEach(floor => {\n        if (floor.route_texture != null) {\n            createjs.Ticker.framerate = 60;\n            createjs.Tween.get(floor.route_texture.offset, { loop: true })\n                .to({ x: -1 }, 2000, createjs.Ease.cubicInOut)\n        }\n    });*/\n}\n\nexport function assign_route_nodes_to_stores(\n    floor_index: number,\n     floors: IFloorData[],\n     allIndexedMapObjects: Record<string, MapObj>,\n     allIndexedRetailers: Record<string, IRetailer>,\n     allNodesFloor: Record<string, number>,\n     escalator_nodes: string[],\n     find_store_node_raycaster: Raycaster,\n     role: string, //config.ROLE\n     ) {\n    const result = new Map();\n    const currentFloor = floors[floor_index];\n    if (currentFloor && currentFloor.route_points) {\n        currentFloor.route_points.forEach(point => {\n            let origin_point = new Vector3(point.node.x, point.node.y, -10);\n            let target_direction = new Vector3(0, 0, 1);\n            find_store_node_raycaster.set(origin_point, target_direction);\n            //@ts-ignore\n            var storeIntersects = find_store_node_raycaster.intersectObjects(floors[floor_index].interactiveObjs);\n            if (storeIntersects.length) {\n                //@ts-ignore\n                storeIntersects[0].object.route_node_id = point.name;\n                //@ts-ignore\n                result.set(storeIntersects[0].object.object_id, point.name);\n                if (role != 'PORTAL') {\n                    //@ts-ignore\n                    var retailer_id = allIndexedMapObjects[storeIntersects[0].object.object_id].retailer_id;\n                    if (retailer_id != null && allIndexedRetailers[retailer_id]) {\n                        var retailer_index = allIndexedRetailers[retailer_id].index;\n                        // ngCtrlElem.scope().allRetailers[retailer_index].has_route = true;\n                    }\n                }\n            }\n\n            var escalatorIntersects = find_store_node_raycaster.intersectObjects(floors[floor_index].escalatorsObjs as Object3D[]);\n            if (escalatorIntersects.length) {\n                const obj: IExtMesh = escalatorIntersects[0].object as IExtMesh;\n                let escalator_obj_id = obj.object_id;\n                const escalatorNodes = floors[floor_index].escalatorsNodes;\n                if (escalatorNodes) {\n                    escalatorNodes[escalator_obj_id as string] = point.name;\n                    allNodesFloor[point.name] = floor_index;\n                    escalator_nodes.push(point.name);\n                }\n            }\n        });\n    }\n    return result;\n}\n\nexport function linkFloorEscalators(floors: IFloorData[], pathFinderGraph: Graph) {\n    // console.log('linkFloorEscalators', floors)\n    if (floors.length > 1) {\n        for(let i=0; i < (floors.length-1); i++) {\n            // console.log('floors[i]',i, floors[i])\n            const floor_escalators = floors[i].escalatorsNodes;\n            // console.log('floor_escalators', floor_escalators);\n            Object.keys(floor_escalators as object).forEach(escalator => {\n                if (floors[i].escalatorsNodes?.[escalator] != null && floors[i+1].escalatorsNodes?.[escalator] != null) {\n                    // console.log('escalator, add link from floor %d to %d (and back)', i, i+1, escalator)\n                    const nodeIdFrom = floors[i].escalatorsNodes?.[escalator];\n                    const nodeIdTo = floors[i+1].escalatorsNodes?.[escalator];\n                    if (nodeIdFrom && nodeIdTo) {\n                        pathFinderGraph.addLink(nodeIdFrom, nodeIdTo, { weight: 1 });\n                        pathFinderGraph.addLink(nodeIdTo, nodeIdFrom, { weight: 1 });\n                    }\n                } else {\n                    // console.error(consolePrefix + 'Escalator route anchor point missing \"%s\"', escalator);\n                }\n            })\n        }\n    }\n}\n\nexport function make_amenity_route(kiosk_obj_name: string, amenity_type: string, scene: Scene, allIndexedMapObjects: Record<string, MapObj>, pathFinderGraph: Graph, floors: IFloorData[], escalator_nodes: string[], style: string ): Mesh[] {\n    let kiosk_obj: IExtMesh = scene.getObjectByProperty('object_id', kiosk_obj_name) as IExtMesh;\n    if (!kiosk_obj) return [];\n    let kiosk_node_name = kiosk_obj.route_node_id;\n\n    var to_obj_name = null;\n\n    var shortest_distance = 9999;\n    // var map_objs = ngCtrlElem.scope().amenities[amenity_type];\n    const map_objs: string[] = [];\n    for(let key in allIndexedMapObjects) {\n        const mapObject = allIndexedMapObjects[key];\n        if (\n            mapObject.layer_type === 'amenity'\n            && mapObject.obj_type === 'special'\n            && mapObject.value === amenity_type\n        ) {\n            map_objs.push(key);\n        }\n    }\n    map_objs.forEach((amenity_obj_name: string, index: number) => {\n        let amenity_obj: IExtMesh = scene.getObjectByProperty('object_id', amenity_obj_name) as IExtMesh;\n\n    const aStarPathFinder = ngraphPath.aStar(pathFinderGraph, {\n        distance: function (fromNode, toNode, link) {\n            if (link.data) return link.data.weight;\n            return false;\n        },\n        //@ts-ignore\n        debug: true,\n    });\n\n    if (amenity_obj) {\n        var amenity_node_name = amenity_obj.route_node_id;\n        try {\n            var route_distance = get_nodes_distance(kiosk_node_name ?? '', amenity_node_name ?? '', aStarPathFinder, pathFinderGraph);\n            if (route_distance && route_distance < shortest_distance) {\n                shortest_distance = route_distance;\n                to_obj_name = amenity_obj_name;\n            }\n        } catch(e: any) {\n            console.warn(`Amenity Path: ${e.message}`);\n        }\n    }\n    });\n    return create_route(kiosk_obj_name, to_obj_name?? '', scene, floors, escalator_nodes, pathFinderGraph, style);\n}\n\n","import {getMeshParams} from \"./getMeshParams\";\r\n// import {SVGResult} from \"three/examples/jsm/loaders/SVGLoader\";\r\nimport { SVGResult } from \"three-stdlib\";\r\nimport {IConfig, IFloorData, IMeshValues, TMapMode} from \"../../types\";\r\nimport {allIndexedMapObjects, allIndexedRetailers, allNodesFloor, pathFinderGraph} from \"../../globals\";\r\nimport {getMaterialAndGeometry} from \"./getMaterialAndGeometry\";\r\nimport {Raycaster} from \"three\";\r\nimport {assign_route_nodes_to_stores, linkFloorEscalators} from \"helpers/route.helpers\";\r\n\r\n// TODO: get rid of this global variable\r\nlet node_count = 0;\r\n\r\nexport function loadFloors(floors:IFloorData[], config:IConfig, results:SVGResult[], mode?: TMapMode) {\r\n    const GeometriesAndMaterials: Array<IMeshValues[]> = [];\r\n    // let floor = floors[floors_loaded];\r\n    // let floor_index = floors_loaded;\r\n    const escalator_nodes: string[] = [];\r\n    results.forEach((result, floor_index) => {\r\n        if (result.paths && result.paths.length) {\r\n            const pathIds = [];\r\n            for (let i = 0; i < result.paths.length; i++) {\r\n                pathIds.push(result.paths[i]?.userData?.node.id);\r\n            }\r\n            const paths = result.paths;\r\n            for (let i = 0; i < paths.length; i++) {\r\n                const {\r\n                    mesh_type,\r\n                    layer_color,\r\n                    extrude,\r\n                    z_index,\r\n                    mesh_visible,\r\n                    mesh_draw,\r\n                    mesh_transparent,\r\n                    line_thickness,\r\n                    interactiveMesh,\r\n                    path,\r\n                    layer_name,\r\n                } = getMeshParams(\r\n                    paths[i],\r\n                    paths,\r\n                    floors,\r\n                    floor_index,\r\n                    config,\r\n                    ++node_count,\r\n                    //@ts-ignore\r\n                    allNodesFloor,\r\n                    pathFinderGraph\r\n                );\r\n\r\n                if (mesh_draw) {\r\n                    const meshParams = getMaterialAndGeometry(\r\n                        config,\r\n                        mesh_type,\r\n                        layer_name,\r\n                        layer_color,\r\n                        mesh_transparent,\r\n                        mesh_visible,\r\n                        z_index,\r\n                        extrude,\r\n                        line_thickness,\r\n                        floors,\r\n                        floor_index,\r\n                        allIndexedMapObjects,\r\n                        allIndexedRetailers,\r\n                        path,\r\n                        mode\r\n                    );\r\n                    if (!GeometriesAndMaterials[floor_index]) {\r\n                        GeometriesAndMaterials[floor_index] = [];\r\n                    }\r\n\r\n                    GeometriesAndMaterials[floor_index].push(meshParams);\r\n                }\r\n            }\r\n            const findStoreNodeRaycaster = new Raycaster();\r\n            const routeNodeIds = assign_route_nodes_to_stores(\r\n                floor_index,\r\n                floors,\r\n                allIndexedMapObjects,\r\n                allIndexedRetailers,\r\n                allNodesFloor,\r\n                escalator_nodes,\r\n                findStoreNodeRaycaster,\r\n                config.ROLE\r\n            );\r\n\r\n            if (routeNodeIds.size && GeometriesAndMaterials[floor_index].length) {\r\n                for (let i = 0; i < GeometriesAndMaterials[floor_index].length; i++) {\r\n                    if (routeNodeIds.has(GeometriesAndMaterials[floor_index][i].mesh.object_id)) {\r\n                        GeometriesAndMaterials[floor_index][i].mesh.route_node_id = routeNodeIds.get(GeometriesAndMaterials[floor_index][i].mesh.object_id);\r\n                    }\r\n                }\r\n            }\r\n\r\n            linkFloorEscalators(floors, pathFinderGraph);\r\n\r\n        }\r\n    })\r\n\r\n    return { GeometriesAndMaterials, graph: pathFinderGraph, escalator_nodes};\r\n}","import { allIndexedMapObjects } from \"../globals\";\nimport { DoubleSide, MeshPhongMaterial, Mesh, CanvasTexture, MeshBasicMaterial, PlaneGeometry, Vector3, BufferGeometry, Box3, Color, SphereGeometry } from \"three\";\nimport type { Object3D, Scene } from \"three\";\n// import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { TextGeometry } from \"three-stdlib\";\nimport {IExtMesh} from \"../types\";\nimport {getRenderOrder} from \"../Hooks/useMeshFloors/getMaterialAndGeometry\";\nimport {hex_to_color} from \"./misc\";\nimport { IRetailer, MapObj } from \"../mapitApiTypes\";\n\n\nexport function drawTextLogoStoreOnMap(allNonIndexedMapObjects: Record<any, any>[], scene: Scene, textLogoNamePrefix: string, allIndexedMapObjects: Record<string, MapObj>, allIndexedRetailers: Record<string, IRetailer>, config: Record<any, any>, myFont: any, floors: Record<any, any>[]) {\n    for (let textLogoLayerAddedIndex = 0; textLogoLayerAddedIndex < allNonIndexedMapObjects.length; textLogoLayerAddedIndex++) {\n        addTextOrLogoOnStore(allNonIndexedMapObjects[textLogoLayerAddedIndex], scene, textLogoNamePrefix, allIndexedMapObjects, allIndexedRetailers, config, myFont, floors);\n    }\n}\n\nfunction addTextOrLogoOnStore(map_obj: any, scene: Scene, textLogoNamePrefix: string, allIndexedMapObjects: Record<string, MapObj>, allIndexedRetailers: Record<any, any>, config: Record<any, any>, myFont: any, floors: Record<any, any>[]) {\n    //@ts-ignore\n    let mesh = scene.getObjectByProperty('object_id', map_obj.map_obj_name);\n    if (mesh) {\n        //@ts-ignore\n        add_store_name_logo(mesh, textLogoNamePrefix, allIndexedMapObjects, allIndexedRetailers, config, myFont, floors, scene);\n    }\n}\n\nfunction deleteMeshByObjectID(object_id: string, scene: Scene, floors: Record<any, any>) {\n    if (object_id) {\n        let mesh = scene.getObjectByProperty('object_id', object_id);\n        if (mesh) {\n            //@ts-ignore\n            mesh.geometry.dispose();\n            //@ts-ignore\n            mesh.material.dispose();\n            //@ts-ignore\n            floors[mesh.floor_index].objsGroup.remove(mesh);\n        }\n    }\n}\n\nfunction getCenterPoint(mesh: Mesh) {\n    var mesh_center_point = new Vector3();\n    getMeshGroupBoundingBox(mesh).getCenter(mesh_center_point);\n    return mesh_center_point;\n}\n\nfunction getMeshSize(mesh: Mesh) {\n    var point = new Vector3();\n    //@ts-ignore\n    getMeshGroupBoundingBox(mesh).getSize(point);\n    return point;\n}\n\nexport function getMeshGroupBoundingBox(mesh: Mesh | Array<Mesh>) {\n    if (!Array.isArray(mesh)) {\n        mesh = [mesh];\n    }\n    const box = mesh.reduce((box, obj) => {\n        if (!obj.geometry.boundingBox) {\n            obj.geometry.computeBoundingBox();\n        }\n        //@ts-ignore\n        box.union(obj.geometry.boundingBox);\n        return box;\n    }, new Box3());\n    return box;\n}\n\nfunction layer_text_logo_position(mesh: Mesh, newMeshPos: Vector3, mesh_size: Vector3, newMesh: Mesh, allIndexedMapObjects: Record<any, any>) {\n    const object_id = (mesh as IExtMesh).object_id;\n    if (!object_id) return;\n    return layer_text_logo_position_by_id(object_id, newMeshPos, mesh_size, newMesh, allIndexedMapObjects);\n}\nexport function layer_text_logo_position_by_id(object_id: string, newMeshPos: Vector3, mesh_size: Vector3, newMesh: Mesh, allIndexedMapObjects: Record<any, any>) {\n    let map_obj = allIndexedMapObjects[object_id];\n\n    let offsetX = parseInt(map_obj.offsetX);\n    let offsetY = parseInt(map_obj.offsetY);\n\n    newMeshPos.z = -mesh_size.z;\n\n    //@ts-ignore\n    newMesh.obj_angle = parseInt(map_obj.rotate); //-180 to 180\n    //@ts-ignore\n    newMesh.rotateZ(newMesh.obj_angle * Math.PI / 180);\n\n    newMesh.scale.y *= -1;\n\n    newMeshPos.x += offsetX;\n    newMeshPos.y += offsetY;\n\n    newMesh.position.set(newMeshPos.x, newMeshPos.y, newMeshPos.z + 1);\n}\n\n/*function add_store_name_logo(mesh: Mesh, textLogoNamePrefix: string, allIndexedMapObjects: Record<any, any>, allIndexedRetailers: Record<any, any>, config: Record<any, any>, myFont: any, floors: Record<any, any>, scene: Scene) {\n    //@ts-ignore\n    var new_object_id = textLogoNamePrefix + mesh.object_id;\n    deleteMeshByObjectID(new_object_id, scene, floors);\n\n    var mesh_center_point = getCenterPoint(mesh);\n    var mesh_size = getMeshSize(mesh);\n    //@ts-ignore\n    let map_obj = allIndexedMapObjects[mesh.object_id];\n\n    if (['retail_name', 'retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n        let text = '';\n        if (map_obj.layer_type == 'retail_name' && map_obj.retailer_id && allIndexedRetailers[map_obj.retailer_id]) {\n            text = allIndexedRetailers[map_obj.retailer_id].retail_name;\n        } else if (['retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n            text = map_obj.custom_text;\n        } else {\n            return false;\n        }\n\n        let text_color = config.STORE_TEXT_COLOR;\n        if (map_obj.text_color != null) {\n            text_color = hex_to_color(map_obj.text_color);\n        }\n\n        const material_settings = {\n            color: text_color,\n            transparent: true,\n            side: DoubleSide,\n            depthWrite: false,\n            depthTest: false,\n        };\n        let text_material = new MeshPhongMaterial(material_settings);\n        let text_geometry = new TextGeometry(text, {\n            font: myFont,\n            size: parseInt(map_obj.size),\n            height: 0.01,\n            curveSegments: 4,\n        });\n        text_geometry.center();\n\n        const textMesh = new Mesh(text_geometry, text_material);\n        layer_text_logo_position(mesh, mesh_center_point, mesh_size, textMesh, allIndexedMapObjects);\n        //@ts-ignore\n        textMesh.object_id = new_object_id;\n        //@ts-ignore\n        textMesh.floor_index = mesh.floor_index;\n        textMesh.renderOrder = getRenderOrder('layer-text');\n        //@ts-ignore\n        floors[mesh.floor_index].objsGroup.add(textMesh);\n        scene.add(textMesh);\n        console.debug({UpdateTexts: scene});\n\n        // Show bounding sphere\n\n        const wireframeMaterial = new MeshBasicMaterial({\n            color: 0x0000ff,\n            wireframe: true,\n            transparent: true,\n            opacity: 0.25,\n        });\n        textMesh.geometry.computeBoundingSphere();\n        const BoundingSphereMesh = new Mesh(\n            new SphereGeometry(textMesh.geometry.boundingSphere?.radius || 1, 32, 32),\n            wireframeMaterial\n        )\n        @ts-ignore\n        BoundingSphereMesh.position.copy(textMesh.geometry.boundingSphere.center || [0, 0, 0]);\n        scene.add(BoundingSphereMesh);\n        \n    }\n\n     else if (\n        map_obj.layer_type === 'retail_logo' ||\n        map_obj.layer_type === 'custom_image' ||\n        (map_obj.obj_type === 'special' && map_obj.layer_type === 'kiosk' && map_obj.kiosk_id !== null) ||\n        (map_obj.obj_type === 'special' && map_obj.layer_type === 'amenity' && map_obj.value !== '')\n    ) {\n        //@ts-ignore\n        getImageLogo(allIndexedRetailers, map_obj, mesh, mesh_center_point, mesh_size);\n    }\n}*/\nexport const getImage = (map_obj: Record<string, any>, retailer?: IRetailer): HTMLImageElement | null => {\n        const img = new Image();\n        img.crossOrigin = 'Anonymous';\n        if (map_obj.obj_type == 'retailer') {\n            if (retailer) {\n                img.src = retailer.logo;\n            } else {\n                console.error('retailer not found');\n                return null;\n            }\n        } else if (map_obj.obj_type == 'special') {\n    \n            let svg_image_name = map_obj.value;\n            if (map_obj.layer_type == 'kiosk') svg_image_name = 'kiosk';\n            if (svg_image_name) {\n                let svg_color = '222222';\n                if (map_obj.text_color != null) {\n                    svg_color = map_obj.text_color;\n                }\n    \n                const svg_block = document.getElementById('map-special-svg-' + svg_image_name)\n                if (!svg_block) {\n                    console.error('svg_block not found', svg_image_name);\n                    return null;\n                }\n                const svg_element = svg_block.querySelector(\"svg\");\n                if (!svg_element) {\n                    console.error('svg_element not found', svg_image_name);\n                    return null;\n                }\n    \n                const svgColoredParts = svg_element.querySelectorAll('[fill]');\n                svgColoredParts.forEach((svgColoredPart) => {\n                    svgColoredPart.setAttribute('fill', '#' + svg_color);\n                })\n    \n                const svgData = (new XMLSerializer()).serializeToString(svg_element);\n                img.src = \"data:image/svg+xml;base64,\" + window.btoa(unescape(encodeURIComponent(svgData)));\n            }\n    \n        } else {\n            img.src = map_obj.custom_image;\n        }\n\n        return img;\n}\n\nexport const processImage = (img: HTMLImageElement, map_obj: Record<string, any>, afterOnload: (geometry: PlaneGeometry, material: MeshBasicMaterial) => void) => {\n    img.onload = function () {\n        const c = document.createElement(\"canvas\");\n        const ctx = c.getContext(\"2d\");\n\n        c.width = img.width;\n        c.height = img.height;\n\n        ctx?.drawImage(img, 0, 0);\n\n        let texture = new CanvasTexture(c);\n        texture.colorSpace = 'srgb'\n\n        const geometry = new PlaneGeometry(map_obj.size, map_obj.size * img.height / img.width);\n        const material = new MeshBasicMaterial({\n            map: texture,\n            transparent: true,\n            side: DoubleSide,\n            depthTest: false,\n            depthWrite: false,\n        });\n        \n        afterOnload(geometry, material);\n    };\n}\n\nfunction getImageLogo(allIndexedRetailers: Record<string, any>, map_obj: Record<string, any>, mesh: BufferGeometry,object_id: string, new_object_id: string | null, mesh_center_point: Vector3, mesh_size: Vector3, floors: any, handleAsync: (meshLogo: {storeLogo: Object3D}) => void): void {\n\n    const img = getImage(map_obj, allIndexedRetailers[map_obj.retailer_id]);\n\n    if (img === null) return;\n\n    processImage(img, map_obj, (geometry, material) => {\n        const logoMesh = new Mesh(geometry, material) as IExtMesh;\n\n        // @ts-ignore\n        const floor_index = mesh.floor_index;\n        layer_text_logo_position_by_id(object_id, mesh_center_point, mesh_size, logoMesh, allIndexedMapObjects);\n        logoMesh.object_id = new_object_id;\n        logoMesh.floor_index = floor_index;\n        logoMesh.renderOrder = getRenderOrder('layer-image');\n        floors[floor_index]?.objsGroup.add(logoMesh);\n\n        /*const wireframeMaterial = new MeshBasicMaterial({\n            color: 0x0000ff,\n            wireframe: true,\n            transparent: true,\n            opacity: 0.25,\n        });\n        logoMesh.geometry.computeBoundingSphere();\n        const BoundingSphereMesh = new Mesh(\n            new SphereGeometry(logoMesh.geometry.boundingSphere?.radius || 1, 32, 32),\n            wireframeMaterial\n        )\n        //@ts-ignore\n        BoundingSphereMesh.position.copy(logoMesh.geometry.boundingSphere.center || [0, 0, 0]);\n        \n        handleAsync({storeLogo: BoundingSphereMesh});\n        */\n        handleAsync({storeLogo: logoMesh});\n    })\n\n}\n\n\n\nexport function get_store_name_logo_geo(geometry: BufferGeometry, object_id:string, floor_index: number, textLogoNamePrefix: string, allIndexedMapObjects: Record<any, any>, allIndexedRetailers: Record<any, any>, config: Record<any, any>, myFont: any, floors: Record<any, any>, handleAsync: (meshLogo: any) => void): {textMesh: IExtMesh} | null | false {\n    const new_object_id = textLogoNamePrefix + object_id;\n    // deleteMeshByObjectID(new_object_id, scene, floors);\n    let result = null;\n\n    if (!geometry.boundingBox) {\n        geometry.computeBoundingBox();\n    }\n    if (!geometry.boundingBox) {\n        return null;\n    }\n\n    const boundingBox = geometry.boundingBox;\n\n    const mesh_center_point = new Vector3();\n    boundingBox.getCenter(mesh_center_point);\n\n    const mesh_size = new Vector3();\n    boundingBox.getSize(mesh_size);\n\n    //@ts-ignore\n    const map_obj = allIndexedMapObjects[object_id];\n\n    if (['retail_name', 'retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n        let text = '';\n        if (map_obj.layer_type == 'retail_name' && map_obj.retailer_id && allIndexedRetailers[map_obj.retailer_id]) {\n            text = allIndexedRetailers[map_obj.retailer_id].retail_name;\n        } else if (['retail_text', 'custom_text'].includes(map_obj.layer_type)) {\n            text = map_obj.custom_text;\n        } else {\n            text = '';\n        }\n\n        let text_color = config.STORE_TEXT_COLOR;\n        if (map_obj.text_color != null) {\n            text_color = hex_to_color(map_obj.text_color);\n        }\n\n        const material_settings = {\n            color: text_color,\n            transparent: true,\n            side: DoubleSide,\n            depthWrite: false,\n            depthTest: false,\n        };\n        let text_material = new MeshPhongMaterial(material_settings);\n        let text_geometry = new TextGeometry(text, {\n            font: myFont,\n            size: parseInt(map_obj.size),\n            height: 0.01,\n            curveSegments: 4,\n        });\n        text_geometry.center();\n\n        const textMesh = new Mesh(text_geometry, text_material) as IExtMesh;\n        textMesh.userData.font = myFont;\n        layer_text_logo_position_by_id(object_id, mesh_center_point, mesh_size, textMesh, allIndexedMapObjects);\n        textMesh.object_id = new_object_id;\n        textMesh.floor_index = floor_index;\n        textMesh.renderOrder = getRenderOrder('layer-text');\n        if (map_obj.layer_type === 'retail_name') {\n            textMesh.userData.retail_name = text;\n        }\n\n        floors[floor_index].objsGroup.add(textMesh);\n\n        //scene.add(textMesh);\n        //console.debug({UpdateTexts: scene});\n\n        // Show bounding sphere\n\n        /*const wireframeMaterial = new MeshBasicMaterial({\n            color: 0x0000ff,\n            wireframe: true,\n            transparent: true,\n            opacity: 0.25,\n        });\n        textMesh.geometry.computeBoundingSphere();\n        const BoundingSphereMesh = new Mesh(\n            new SphereGeometry(textMesh.geometry.boundingSphere?.radius || 1, 32, 32),\n            wireframeMaterial\n        )\n        @ts-ignore\n        BoundingSphereMesh.position.copy(textMesh.geometry.boundingSphere.center || [0, 0, 0]);\n        scene.add(BoundingSphereMesh);\n        */\n        result = { textMesh };\n    }\n\n    else if (\n       map_obj.layer_type == 'retail_logo' ||\n       map_obj.layer_type == 'custom_image' ||\n       (map_obj.obj_type == 'special' && map_obj.layer_type == 'kiosk' && map_obj.kiosk_id != null) ||\n       (map_obj.obj_type == 'special' && map_obj.layer_type == 'amenity' && map_obj.value != '')\n   ) {\n        getImageLogo(allIndexedRetailers, map_obj, geometry, object_id, new_object_id, mesh_center_point, mesh_size, floors, handleAsync);\n\n\n   }\n   return result;\n}","import {\n    Group,\n    Scene,\n    Object3D,\n    Mesh,\n    BufferGeometry,\n    Color,\n} from \"three\";\nimport { useLoader } from \"@react-three/fiber\";\nimport { SVGLoader } from \"three/examples/jsm/loaders/SVGLoader.js\";\nimport {useCallback, useEffect, useMemo, useState} from \"react\";\nimport createGraph, { Graph } from \"ngraph.graph\";\nimport data from \"demo/data.json\";\nimport {loadFloors} from \"./loadFloors\";\nimport type {IConfig, IExtMesh, IFloorData, IMeshParams, IMeshValues, TMapMode} from \"../../types\";\nimport {defaultVars, mapit2DefaultVars} from \"../../defaults\";\nimport {allIndexedMapObjects, allIndexedRetailers} from \"../../globals\";\nimport {drawTextLogoStoreOnMap, get_store_name_logo_geo} from \"helpers/draw.logo.helpers\";\nimport { FontLoader, Font } from \"three-stdlib\";\nimport { IJsonConfig, IMeshParamsTmp} from \"../../types\";\nimport {hex_to_color} from \"../../helpers/misc\";\nimport {Kiosk, Floor, MapIt2Response, MapObj} from \"../../mapitApiTypes\";\nimport { EventedType } from \"ngraph.events\";\nimport fontData from './optimer_regular.typeface.json'\nimport { FontData, useFont } from \"@react-three/drei\";\n\n// if (!isDefined(typeof MAPIT2)) window.MAPIT2 = { ...defaultVars };\n// window.MAPIT2 = { ...defaultVars, ...MAPIT2 };\n\nexport const textLogoNamePrefix = 'custom-layer-';\n\nconst config: IJsonConfig = { ...defaultVars, ...mapit2DefaultVars}\n\nconst defaultMapObjValues = {\n\tid: null,\n\tcenter_id: config.CENTER_ID,\n\tretailer_id: null,\n\tkiosk_id: null,\n\tmap_obj_name: '',\n\tobj_type: 'retailer',\n\tlayer_type: 'retail_name',\n\tvalue: '',\n\tcustom_text: '',\n\tcustom_image: '',\n\thover_text: '',\n\tbg_color: '',\n\ttransparent: 0,\n\ttext_color: '',\n\tsize: 8,\n\trotate: 0,\n\toffsetX: 0,\n\toffsetY: 0,\n} as Record<string, string | number | null| undefined>;\n\n\nlet allNonIndexedMapObjects: MapObj[] = [];\n\nconst extraMapObjects = []\nlet activeMapObjectName = null;\nconst floorsData:IFloorData[] = [];\nconst floors = [] as Floor[];\nlet floors_loaded = 0;\nconst BASE_URL = 'https://test.mycenterdeals.com/data/mapit2/';\n\nfunction select<T>(...values: T[]) {\n    return values.find(value => value !== '' && value != null) || values.at(-1);\n}\n\nconst clearObject = (obj: Record<string, MapObj>) => {\n\tfor (let key in obj) {\n\t\tdelete obj[key];\n\t}\n}\n\nfunction makeIndexedMapObjects(map_objs: MapObj[]) {\n\tclearObject(allIndexedMapObjects);\n\n    allNonIndexedMapObjects = map_objs;\n\n    for (let i = 0; i < map_objs.length; i++) {\n        const obj = map_objs[i];\n        allIndexedMapObjects[obj.map_obj_name] = obj;\n        for (let key in defaultMapObjValues) {\n            const value = defaultMapObjValues[key];\n            //@ts-ignore\n            if (value != null && obj[key] == null) {\n                //@ts-ignore\n                allIndexedMapObjects[obj.map_obj_name][key] = value;\n            }\n        }\n    }\n}\n\nconst init = (config: IJsonConfig, floors:IFloorData[], response: MapIt2Response) => {\n\n    const KIOSKS:Record<string, Kiosk> = {};\n    response.kiosks.forEach((kiosk) => {\n        KIOSKS[kiosk.id] = kiosk;\n    });\n\n\n    for (let index in response.retailers) {\n        const retailer = response.retailers[index];\n        allIndexedRetailers[retailer.id] = retailer;\n        allIndexedRetailers[retailer.id].index = index;\n    }\n\n    // ngCtrlElem.scope().amenitiesNav.bg_color = response.settings.AMENITIES_NAV_BG_COLOR;\n    // ngCtrlElem.scope().amenitiesNav.icon_color = response.settings.AMENITIES_NAV_ICON_COLOR;\n\n    makeIndexedMapObjects(response.map_objs);\n\n    floors.length = 0;\n    response.floors.forEach((value: IFloorData, index: number) => {\n        const objsGroup = new Group();\n        objsGroup.scale.y *= -1;\n        objsGroup.lookAt(0, 1, 0);\n\n        floors.push({\n            id: value.id,\n            // svg_map: BASE_URL + 'data/mapit2/' + value.svg,\n            svg_map: BASE_URL + value.svg,\n            title: value.title,\n            objsGroup: objsGroup,\n            interactiveObjs: [],\n            escalatorsObjs: [],\n            escalatorsNodes: {},\n            escalatorMeshes: [],\n            route_points: [],\n            route_tube: undefined,\n            route_texture: null,\n            routeMeshes: [],\n            route_active: false,\n        });\n    });\n\n    const processedConfig: IConfig = {\n        ACCENT_COLOR: hex_to_color(response.settings.ACCENT_COLOR ? response.settings.ACCENT_COLOR : config.ACCENT_COLOR),\n        BASE_COLOR: hex_to_color(response.settings.BASE_COLOR ? response.settings.BASE_COLOR : config.BASE_COLOR),\n        BIG_STORE_DEFAULT_COLOR: hex_to_color(response.settings.BIG_STORE_DEFAULT_COLOR ? response.settings.BIG_STORE_DEFAULT_COLOR : config.BIG_STORE_DEFAULT_COLOR),\n        BOUNDARY_COLOR: hex_to_color(response.settings.BOUNDARY_COLOR ? response.settings.BOUNDARY_COLOR : config.BOUNDARY_COLOR),\n        BOUNDARY_THICKNESS: parseFloat(response.settings.BOUNDARY_THICKNESS ? response.settings.BOUNDARY_THICKNESS : config.BOUNDARY_THICKNESS),\n        BUILDING_BASE_COLOR: hex_to_color(config.BUILDING_BASE_COLOR),\n        CAMERA: null,\n        CAMERA_CONTROLS_STATES: response.camera_controls_states[config.DEVICE],\n        CENTER_ID: config.CENTER_ID,\n        CONTROLS: null,\n        DEBUG: config.DEBUG, // config.DEBUG === 'true' || config.DEBUG === '1'\n        DEFAULT_CAMERA_POSITION: config.DEFAULT_CAMERA_POSITION,\n        DEFAULT_CONTROLS_TARGET: config.DEFAULT_CONTROLS_TARGET,\n        DEFAULT_SELECTED_STORE: config.DEFAULT_SELECTED_STORE,\n        DEVICE: config.DEVICE,\n        KIOSK: config.KIOSK,\n        KIOSKS: KIOSKS,\n        MAP_BACKGROUND_COLOR: hex_to_color(response.settings.MAP_BACKGROUND_COLOR ? response.settings.MAP_BACKGROUND_COLOR : config.MAP_BACKGROUND_COLOR),\n        ORIGINAL_CAMERA_POSITION: config.ORIGINAL_CAMERA_POSITION,\n        OVERLAY_COLOR: hex_to_color(response.settings.OVERLAY_COLOR ? response.settings.OVERLAY_COLOR : config.OVERLAY_COLOR),\n        OVERLAY_OPACITY: parseFloat(response.settings.OVERLAY_OPACITY ? response.settings.OVERLAY_OPACITY : config.OVERLAY_OPACITY),\n        ROLE: config.ROLE,\n        STATS: config.STATS === 'true' || config.STATS === '1',\n        STORE_DEFAULT_COLOR: hex_to_color(response.settings.STORE_DEFAULT_COLOR ? response.settings.STORE_DEFAULT_COLOR : config.STORE_DEFAULT_COLOR),\n        STORE_TEXT_COLOR: hex_to_color(response.settings.STORE_TEXT_COLOR ? response.settings.STORE_TEXT_COLOR : config.STORE_TEXT_COLOR),\n        STYLE: config.STYLE,\n        WALL_COLOR: hex_to_color(response.settings.WALL_COLOR ? response.settings.WALL_COLOR : config.WALL_COLOR),\n        WALL_THICKNESS: parseFloat(response.settings.WALL_THICKNESS ? response.settings.WALL_THICKNESS : config.WALL_THICKNESS),\n        FLOORS: response.floors,\n        AMENITIES: response.amenities,\n        RETAILERS: response.retailers\n    };\n\n    // AMENITIES_NAV_BG_COLOR: string;\n    // AMENITIES_NAV_ICON_COLOR: string;\n\n    return processedConfig;\n}\n\n/*function get_node_name(vertex: any, floor_index: any) {\n    let exists = false;\n    let node_name = null;\n    for (let i = 0; i < floors[floor_index].route_points.length; i++) {\n        if (vertex.x == floors[floor_index].route_points[i].node.x && vertex.y === floors[floor_index].route_points[i].node.y) {\n            exists = true;\n            node_name = floors[floor_index].route_points[i].name;\n            break;\n        }\n    }\n    if (!exists) {\n        node_name = next_node_name();\n        floors[floor_index].route_points.push({\n            name: node_name,\n            node: new Vector3(vertex.x, vertex.y, 1)\n        });\n        //@ts-ignore\n        allNodesFloor[node_name] = floor_index;\n\n        // draw_points([{ x: vertex.x, y: vertex.y }]);\n    }\n    return node_name;\n}*/\n\n/*function next_node_name() {\n    node_count++;\n    return 'node-' + node_count;\n}*/\n\n\nconst useMeshFloors = (data: MapIt2Response|null, jsonConfig?: Partial<IJsonConfig>, mode?: TMapMode): IMeshParamsTmp => {\n    const [meshParams, setMeshParams] = useState<IMeshValues[][]>([]);\n    const [textParams, setTextParams] = useState<Array<{textMesh:IExtMesh}[]>>([]);\n    const [storeLogos, setStoreLogos] = useState<{storeLogo: Mesh}[][]>([]);\n    const [pathFinderGraph, setPathFinderGraph] = useState<Graph & EventedType>();\n    const [escalatorNodes, setEscalatorNodes] = useState<string[]>([]);\n    const [urls, setUrls] = useState<string[]>([]);\n    const [ processedConfig, setProcessedConfig ] = useState<IConfig|null>(null);\n    let result = useLoader(SVGLoader, urls);\n\n    const consolePrefix = 'MAPIT2';\n    // const myFont = useLoader(FontLoader, 'assets/threejs/threejs/examples/fonts/optimer_regular.typeface.json')\n    const myFont = useFont(fontData as unknown as FontData);\n\n    // const getWallShape = (...params: any): Shape | Shape[] => {\n    //     return []\n    // }\n\n\n    const handleAsyncStoreLogos = useCallback((floorIndex: number) => ((meshLogo: {storeLogo: Mesh}) => {\n        setStoreLogos((prevLogos) => {\n            // console.debug({floorIndex});\n            if (prevLogos[floorIndex]) {\n                prevLogos[floorIndex].push({...meshLogo});\n            } else {\n                prevLogos[floorIndex] = [{...meshLogo}];\n            }\n            // console.debug({prevLogos});\n            return [...prevLogos];\n        });\n    }), [])\n\n\n    useEffect(() => {\n        if (!data) return;\n\n\n        // console.log('useMeshFloors[data]', {data})\n\n        const processedConfig = init(jsonConfig ? {...config, ...jsonConfig} : config, floorsData, data as MapIt2Response);\n        const values: string[] = [];\n        processedConfig.FLOORS.forEach((value) => {\n            values.push(`${BASE_URL}${value.svg}`);\n        });\n\n        setProcessedConfig(processedConfig);\n        setUrls([...values]);\n    // }, [JSON.stringify(data)]);\n    return () => {\n        if (meshParams) {\n            meshParams.forEach(floor => {\n                if (floor) {\n                    floor.forEach(value => {\n                        value.mesh.removeFromParent();\n                    })\n                }\n            })\n        }\n\n        if (textParams) {\n            textParams.forEach(floor => {\n                if (floor) {\n                    floor.forEach(value => {\n                        value.textMesh.removeFromParent();\n                    })\n                }\n            })\n        }\n\n        if (storeLogos) {\n            storeLogos.forEach(floor => {\n                if (floor) {\n                    floor.forEach(value => {\n                        value.storeLogo.removeFromParent();\n                    })\n                }\n            })\n        }\n\n        setMeshParams([]);\n        setTextParams([]);\n        setStoreLogos([]);\n    }\n    }, [data]);\n\n    useEffect(() => {\n        if (!processedConfig || !urls.length || !myFont || !result) return;\n\n        const { GeometriesAndMaterials, graph, escalator_nodes } = loadFloors(floorsData, processedConfig, result, mode);\n        const TextsAndLogos:Array<{textMesh:IExtMesh}[]> = [];\n        allNonIndexedMapObjects.forEach((params) => {\n            let values: IMeshValues | undefined;\n            for (let i = 0; i < GeometriesAndMaterials.length; i++) {\n                //@ts-ignore\n                values = GeometriesAndMaterials[i].find(item => item.object_id === params.map_obj_name);\n                if (values !== undefined) {\n                    break;\n                } \n            }\n            if (!values) return null;\n            const textParams = get_store_name_logo_geo(values.geometry, params.map_obj_name, values.floor_index, textLogoNamePrefix, allIndexedMapObjects, allIndexedRetailers, config, myFont, floorsData, handleAsyncStoreLogos(values.floor_index));\n            if (textParams) {\n                if (!TextsAndLogos[values.floor_index]) {\n                    TextsAndLogos[values.floor_index] = [];\n                }\n                TextsAndLogos[values.floor_index].push(textParams);\n            }\n        })\n        setMeshParams(GeometriesAndMaterials);\n        setTextParams(TextsAndLogos);\n        setPathFinderGraph(graph);\n        setEscalatorNodes([...escalator_nodes]);\n\n    }, [processedConfig, urls, result, myFont]);\n\n    return useMemo(() => {\n        return {\n            config: processedConfig,\n            meshParams,\n            textParams,\n            storeLogos,\n            floors: floorsData,\n            pathFinderGraph,\n            escalator_nodes: escalatorNodes,\n        }\n    }, [ processedConfig, meshParams, textParams, storeLogos, floorsData, pathFinderGraph, escalatorNodes ])\n}\n\nexport default useMeshFloors","import {IJsonConfig} from \"./types\";\n\nexport const mapit2DefaultVars: Partial<IJsonConfig> = {\n    ROLE: 'WEBSITE',\n    DEVICE: 'display_app',\n    CENTER_ID: '8',\n    // KIOSK: '51',\n    KIOSK: '108',\n    STYLE: '3D',\n    DEFAULT_SELECTED_STORE: '',\n    DEBUG: '1',\n\n    MAP_BACKGROUND_COLOR: \"FFFFFF\",\n    ACCENT_COLOR: \"4EA5FF\",\n    STORE_DEFAULT_COLOR: \"E2E2E2\",\n    BIG_STORE_DEFAULT_COLOR: \"3D3D3D\",\n    WALL_THICKNESS: '0.6',\n    WALL_COLOR: \"888888\",\n    BOUNDARY_THICKNESS: '0.8',\n    BOUNDARY_COLOR: \"888888\",\n    BASE_COLOR: \"25292B\",\n    STORE_TEXT_COLOR: \"222222\",\n    OVERLAY_COLOR: \"FFFFFF\",\n    OVERLAY_OPACITY: '0.7',\n    // AMENITIES_NAV_BG_COLOR: \"000000\",\n    // AMENITIES_NAV_ICON_COLOR: \"FFFFFF\"\n}\n\nexport const defaultVars: IJsonConfig = {\n    MAP_BACKGROUND_COLOR: '',\n    ROLE: 'WEBSITE', // PORTAL, WEBSITE, DISPLAY_APP, WP_SITE, PORTAL_KIOSK, PORTAL_RESPONSIVE\n    DEVICE: 'display_app',\n    KIOSK: '-',\n    FLOORS: [],\n    KIOSKS: {},\n    CENTER_ID: null,\n    STATS: 'false',\n    STYLE: '3D', // 2D, 3D\n    DEBUG: '0',\n    ACCENT_COLOR: '4EA5FF',\n    STORE_DEFAULT_COLOR: 'E2E2E2',\n    BIG_STORE_DEFAULT_COLOR: '3D3D3D',\n    WALL_THICKNESS: '0.6',\n    BOUNDARY_THICKNESS: '0.8',\n    WALL_COLOR: '888888',\n    BOUNDARY_COLOR: '888888',\n    BASE_COLOR: '25292B',\n    BUILDING_BASE_COLOR: 'DADADA',\n    STORE_TEXT_COLOR: '222222',\n    OVERLAY_COLOR: 'FFFFFF',\n    OVERLAY_OPACITY: '0.7',\n    CAMERA_CONTROLS_STATES: null, // all devices camera and controls states\n    ORIGINAL_CAMERA_POSITION: null, // loaded and fit to canvas loaded area without any custom positions\n    DEFAULT_CAMERA_POSITION: null, // custom default camera position\n    DEFAULT_CONTROLS_TARGET: null, // custom default controls target\n    DEFAULT_SELECTED_STORE: null,\n};","import {useThree} from \"@react-three/fiber\";\r\nimport {Color} from \"three\";\r\n\r\ninterface IScenePropertiesProps {\r\n    background?: Color | string;\r\n}\r\n\r\nexport const SceneProperties = (params:IScenePropertiesProps) => {\r\n    const { scene } = useThree();\r\n    if (params.background) {\r\n        scene.background = new Color(params.background);\r\n    }\r\n    return null;\r\n}","import {useThree} from \"@react-three/fiber\";\r\nimport { ICameraPropertiesProps } from \"types\";\r\nimport {PerspectiveCamera} from \"three\";\r\n\r\nexport const CameraProperties = (props:ICameraPropertiesProps) => {\r\n    const { camera } = useThree();\r\n\r\n    const cameraProjectionNeedsUpdate = props.far || props.near || props.fov;\r\n    if (props.far) {\r\n        camera.far = props.far;\r\n    }\r\n    if (props.near) {\r\n        camera.near = props.near;\r\n    }\r\n\r\n    if (camera instanceof PerspectiveCamera) {\r\n        if (props.fov) {\r\n            camera.fov = props.fov;\r\n        }\r\n    }\r\n\r\n    if (cameraProjectionNeedsUpdate) {\r\n        camera.updateProjectionMatrix();\r\n    }\r\n\r\n    return null;\r\n}","export function easeInOutCubic(x: number): number {\n    return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;\n}","import React, {useEffect, useRef} from \"react\";\nimport type {Mesh} from \"three\";\nimport {easeInOutCubic} from \"../../helpers/easing\";\nimport {MeshBasicMaterial} from \"three\";\nimport {useFrame} from \"@react-three/fiber\";\n\ninterface IRouteTubeProps {\n    mesh?: Mesh;\n}\n\nexport function RouteTube({mesh}: IRouteTubeProps) {\n    const animateRoute = useRef<Function | null>(null);\n\n    useEffect(() => {\n        if (!mesh) {\n            return;\n        }\n\n        if (!mesh.geometry.index?.count) {\n            console.log('NO ROUTE TUBE GEOMETRY INDEX COUNT');\n            return;\n        }\n\n        if (!(mesh.material instanceof MeshBasicMaterial)) {\n            return;\n        }\n        if (!mesh.material.map) {\n            console.log('NO ROUTE TEXTURE');\n            return;\n        }\n\n        mesh.geometry.setDrawRange(0, 0);\n\n        const end = mesh.geometry.index.count;\n        const animateTube = (\n            () => {\n                const length = 1000;\n                const startTime = performance.now();\n                return () => {\n                    const progress = (performance.now() - startTime) / length;\n                    const drawRangeEnd = Math.floor(easeInOutCubic(progress) * end);\n\n                    if (progress >= 1) {\n                        animateRoute.current = animateTexture;\n                    }\n\n                    mesh.geometry.setDrawRange(0, drawRangeEnd);\n                }\n            }\n        )();\n\n        const animateTexture = (() => {\n            if (!(mesh.material instanceof MeshBasicMaterial)) {\n                return null;\n            }\n            if (!mesh.material.map) {\n                return null;\n            }\n            const offsetVector = mesh.material.map.offset;\n            const length = 2000;\n            const startTime = performance.now();\n            return () => {\n                const progress = (performance.now() - startTime) / length % 1;\n                offsetVector.x = -easeInOutCubic(progress);\n            }\n        })();\n\n        animateRoute.current = animateTube;\n\n        return () => {\n            animateRoute.current = null;\n            mesh.removeFromParent();\n            if (mesh.material instanceof MeshBasicMaterial) {\n                mesh.material.dispose();\n            }\n            if (mesh.geometry) {\n                mesh.geometry.dispose();\n            }\n        }\n\n    }, [mesh]);\n\n    useFrame(() => {\n        if (animateRoute.current) {\n            try {\n                animateRoute.current();\n            } catch( e: any ) {\n                console.error(`ERROR ANIMATE ROUTE: ${e.message}`)\n                animateRoute.current = null;\n            }\n        }\n    });\n\n    if (!mesh) return null;\n    return <primitive object={mesh}></primitive>\n}","import {IMeshParams, TMapMode} from \"../../types\";\r\nimport {ThreeEvent} from \"@react-three/fiber\";\r\nimport React, {MouseEventHandler} from \"react\";\r\nimport {Mesh, MeshLambertMaterial, MeshStandardMaterial, RGB} from \"three\";\r\nimport {RouteTube} from \"./RouteTube\";\r\nimport {Html} from \"@react-three/drei\";\r\nimport styles from '../../MapBox.module.css';\r\n\r\ninterface IMapProps {\r\n    floorIndex: number,\r\n    meshFloors: IMeshParams;\r\n    currKioskObj: Mesh | null;\r\n    activeObjectId?: string;\r\n    hoverObjectId?: string;\r\n    routeTube?: Mesh;\r\n    visible: boolean,\r\n    onPointerEnter?: (e: ThreeEvent<PointerEvent>) => void;\r\n    onPointerLeave?: (e: ThreeEvent<PointerEvent>) => void;\r\n    onPointerMove?: (e: ThreeEvent<PointerEvent>) => void;\r\n    onClick?: (e: ThreeEvent<MouseEvent>) => void;\r\n    handleChangeFloor: (index: number) => MouseEventHandler<HTMLDivElement>;\r\n    mode?: TMapMode;\r\n}\r\n\r\nconst getDarkerColor = (color: RGB) => {\r\n    if (color) {\r\n        var newColor = { ...color }\r\n        newColor.r = color.r * 0.92;\r\n        newColor.g = color.g * 0.92;\r\n        newColor.b = color.b * 0.92;\r\n        return newColor;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const Map = (params: IMapProps) => {\r\n    const {meshFloors, routeTube, floorIndex, activeObjectId, hoverObjectId, visible, handleChangeFloor, mode} = params;\r\n\r\n    const { config, meshParams, textParams, storeLogos} = meshFloors;\r\n    const floor = meshFloors.floors[floorIndex];\r\n\r\n    const onPointerMove = params.onPointerMove;\r\n    const onPointerOver = params.onPointerEnter;\r\n    const onPointerOut = params.onPointerLeave;\r\n    const onClick = params.onClick;\r\n\r\n    const floorMeshParams = meshParams[floorIndex];\r\n    const floorTextParams = textParams[floorIndex];\r\n    const floorStoreLogos = storeLogos[floorIndex];\r\n    const escalatorMeshes = meshFloors.floors[floorIndex].escalatorMeshes;\r\n\r\n    // console.log('Map', floorIndex, { meshParams, floorIndex, floorMeshParams, floorTextParams, floorStoreLogos, routeTubes})\r\n    return (\r\n        <group visible={visible}>\r\n            {floorMeshParams?.map((params) => {\r\n                if (!params.mesh) return null;\r\n\r\n                const interactive = (visible && params.mesh.visible && floor.interactiveObjs && floor.interactiveObjs.includes(params.mesh));\r\n                const hovered = hoverObjectId && params.mesh.object_id === hoverObjectId;\r\n                const active = activeObjectId && params.mesh.object_id === activeObjectId;\r\n                if (interactive) {\r\n                    // TODO: move those colorDefault, active, etc to userData of mesh or material\r\n                    if ((active || hovered) && (params.mesh.material instanceof MeshLambertMaterial || params.mesh.material instanceof MeshStandardMaterial)) {\r\n                        // @ts-ignore\r\n                        const baseColor = active ? config.ACCENT_COLOR : params.mesh.material.colorDefault;\r\n                        //console.log('Map', {baseColor, active, hovered})\r\n                        params.mesh.material.color = hovered ? getDarkerColor(baseColor) : baseColor;\r\n                    } else {\r\n                        // @ts-ignore\r\n                        params.mesh.material.color = params.mesh.material.colorDefault;\r\n                    }\r\n                }\r\n\r\n                return <group key={params.mesh.uuid} {...(interactive? {onPointerOver, onPointerMove, onPointerOut, onClick } : {})}>\r\n                    <primitive object={params.mesh}></primitive>\r\n                </group>\r\n            })}\r\n            {floorTextParams?.map((params) => {\r\n                if (!params.textMesh) return null;\r\n                return <primitive key={params.textMesh.uuid} object={params.textMesh}>\r\n                </primitive>\r\n            })}\r\n            {floorStoreLogos?.map((params) => {\r\n                if (!params.storeLogo) return null;\r\n\r\n                return <primitive key={params.storeLogo.uuid} object={params.storeLogo}>\r\n                    {visible && params.storeLogo.userData.htmlContent? <Html>{params.storeLogo.userData.htmlContent}</Html> : null}\r\n                </primitive>\r\n            })}\r\n            {escalatorMeshes?.map((params) => {\r\n                //@ts-ignore\r\n                return <primitive key={`escalator-${params.object_id}`} object={params}>\r\n                    <Html visible={false} position={params.geometry.boundingSphere?.center}>\r\n                        <div onClick={handleChangeFloor(params.goToFloor?.index || 0)} id={styles.escalator_elems} style={{ display: visible ? 'block' : 'none' }}>\r\n                            <div className={styles.element} id={params.object_id as string}>\r\n                                <div className={styles.label}>{params.goToFloor?.direction}: Floor {params.goToFloor ? params.goToFloor.index + 1 : ''}</div>\r\n                            </div>\r\n                        </div>\r\n                    </Html>\r\n                </primitive>\r\n            })}\r\n            <RouteTube mesh={routeTube} />\r\n        </group>\r\n    )\r\n}","import {IExtMesh, IFloorData, IMeshParams, TMapMode} from \"../../types\";\nimport {Map} from \"./Map\";\nimport React, {MouseEventHandler, useCallback, useEffect, useRef, useState} from \"react\";\nimport {Group, Mesh, PerspectiveCamera, Vector3} from \"three\";\nimport {ThreeEvent, useThree} from \"@react-three/fiber\";\nimport {get_camera_focus_object} from \"../../helpers/camera.helpers\";\nimport {MapControls} from \"@react-three/drei\";\nimport {create_route, make_amenity_route} from \"../../helpers/route.helpers\";\nimport {allIndexedMapObjects} from \"../../globals\";\nimport { IZoomData } from \"./SceneComponent\";\n\ninterface IFloorsMapProps {\n    meshFloors: IMeshParams;\n    currentFloorIndex: number;\n    onPointerEnter?: (e: ThreeEvent<PointerEvent>) => void;\n    onPointerLeave?: (e: ThreeEvent<PointerEvent>) => void;\n    onPointerMove?: (e: ThreeEvent<PointerEvent>) => void;\n    onClick?: (e: ThreeEvent<MouseEvent>) => void;\n    onCameraMove?: (e: any) => void;\n    currKioskObj: Mesh;\n    routeTargetId?: string;\n    amenityTargetType: string;\n    activeObjectId?: string;\n    hoverObjectId?: string;\n    handleChangeFloor: (index: number) => MouseEventHandler<HTMLDivElement>,\n    escalatorNodes: string[];\n    zoom: IZoomData | null;\n    mode?: TMapMode;\n}\n\n\nexport const FloorsMap = (params:IFloorsMapProps) => {\n    const { meshFloors, currentFloorIndex, currKioskObj, routeTargetId, amenityTargetType, handleChangeFloor, escalatorNodes, zoom, mode } = params;\n    const { floors } = meshFloors;\n\n    const groupRef = useRef<Group>(null);\n    const [ routeTubes, setRouteTubes ] = useState<Mesh[]>([]);\n    const mapControlRef = useRef<any>(null);\n    const { camera, scene } = useThree();\n    const cameraFocus = useRef<{ position:Vector3, target:Vector3, animationStartTime:number, cameraTime:number, targetTime:number } | null>(null);\n\n    const style = meshFloors.config.STYLE;\n    const accentColor = meshFloors.config.ACCENT_COLOR;\n    const pathFinderGraph = meshFloors.pathFinderGraph;\n    const from = (currKioskObj as IExtMesh).object_id;\n\n    useEffect(() => {\n        (() => {\n            let n = 0;\n            scene.traverse(() => ++n);\n\n            console.debug('Count:', n);\n        })()\n    }, [params.meshFloors, scene])\n\n    useEffect(() => {\n        if (!amenityTargetType || mode === 'edit') {\n            setRouteTubes([]);\n            return;\n        }\n        const route = make_amenity_route(from?? '', amenityTargetType, scene, allIndexedMapObjects, pathFinderGraph, floors, escalatorNodes, style);\n        setRouteTubes(route);\n    }, [amenityTargetType, scene, pathFinderGraph, floors, escalatorNodes, style, from])\n\n    useEffect(() => {\n        if (!from || !routeTargetId || mode === 'edit') {\n            setRouteTubes([]);\n            return;\n        }\n        if (!amenityTargetType) {\n            floors.forEach(floor => {\n                floor.escalatorMeshes = [];\n            });\n        }\n\n\n        console.log('Make route from %s to %s', from, routeTargetId, pathFinderGraph);\n\n        /* MAKE ROUTE PATH */\n\n        const route = create_route(from, routeTargetId, scene, floors, meshFloors.escalator_nodes, pathFinderGraph, style);\n\n        // TODO: activate object (moved out of create_route function)\n        // makeObjectActive(to_mesh_object_id, accentColor, scene);\n\n        // TODO: focus object (moved out of create_route function)\n        // if (!routePaths.length) {\n        //     let obj = scene.getObjectByProperty('object_id', to_mesh_object_id);\n        //     const {position, target} =get_camera_focus_object([obj], camera.fov, camera.aspectRatio, '2D');\n        //     camera.position.copy(position);\n        // }\n\n\n        console.log('new route', route)\n        setRouteTubes(route);\n\n    }, [ from, routeTargetId, scene, camera, floors, accentColor, pathFinderGraph, style, meshFloors.escalator_nodes ]);\n\n    const selectedFloorMeshParams = meshFloors.meshParams[currentFloorIndex];\n    useEffect(() => {\n\n        if (!(camera instanceof PerspectiveCamera)) {\n            console.error('Camera is not a PerspectiveCamera');\n            return;\n        }\n\n        if (!selectedFloorMeshParams.length) {\n            console.warn('objects not loaded yet');\n            return;\n        }\n\n        let meshes:Mesh[];\n        if (routeTubes[currentFloorIndex]) {\n            meshes = [routeTubes[currentFloorIndex]];\n\n            const currentActiveObject = routeTargetId && selectedFloorMeshParams.find(item => item.mesh.object_id === routeTargetId);\n            if (currentActiveObject) {\n                meshes.push(currentActiveObject.mesh);\n            }\n        } else {\n            meshes = selectedFloorMeshParams.map(item => item.mesh);\n        }\n\n        const cameraSpeed = 0.1; // per second\n        const targetSpeed = 0.1;\n        const focus = get_camera_focus_object(meshes, camera.fov, camera.aspect, mode === 'edit'? '2D' : style);\n        const distance = mapControlRef.current.object.position.distanceTo(focus.position);\n        const targetDistance = mapControlRef.current.target.distanceTo(focus.target);\n        cameraFocus.current = {\n            ...focus,\n            animationStartTime: performance.now(),\n            cameraTime: targetDistance/cameraSpeed/1000, // how long it takes to move camera to get to new position\n            targetTime: targetDistance/targetSpeed/1000, // how long it takes to move camera to get to new position\n        };\n        // console.log({focus, meshes, camera});\n\n        mapControlRef.current.target.copy(focus.target);\n        mapControlRef.current.object.position.copy(focus.position);\n        mapControlRef.current.object.lookAt(focus.target);\n        mapControlRef.current.object.updateProjectionMatrix();\n\n\n        return () => {\n            cameraFocus.current = null;\n        };\n    }, [ routeTubes, selectedFloorMeshParams, currentFloorIndex, style, camera, routeTargetId ]);\n\n    useEffect(() => {\n        if (zoom?.direction && mapControlRef.current) {\n            const vector = new Vector3();\n            vector.copy(mapControlRef.current.target);\n            vector.sub(mapControlRef.current.object.position);\n            vector.setLength(vector.length() * 0.4);\n\n            if (zoom.direction === 'in') {\n                camera.position.add(vector);\n            } else {\n                camera.position.sub(vector);\n            }\n        }\n    }, [zoom])\n\n    const onCameraMove = useCallback((e: any) => {\n        // console.warn('onCameraMove', e);\n        // debugger\n        cameraFocus.current = null;\n    }, [])\n\n    // useFrame(() => {\n    //     if (cameraFocus.current) {\n    //         console.log('animate camera')\n    //         const focus = cameraFocus.current;\n    //         const animationTime = performance.now() - focus.animationStartTime;\n    //         const cameraProgress = Math.min(1, animationTime / focus.cameraTime);\n    //         const targetProgress = Math.min(1, animationTime / focus.targetTime);\n    //         console.log({cameraProgress, targetProgress, animationTime, focus});\n    //\n    //         mapControlRef.current.target.lerp(focus.target, targetProgress);\n    //         mapControlRef.current.object.position.lerp(focus.position, cameraProgress);\n    //         mapControlRef.current.object.lookAt(focus.target);\n    //         mapControlRef.current.object.updateProjectionMatrix();\n    //\n    //         if (cameraProgress === 1 && targetProgress === 1) {\n    //             cameraFocus.current = null;\n    //         }\n    //     }\n    // })\n\n    return (<group rotation={[Math.PI / 2, 0, 0]} ref={groupRef}>\n        <>\n            <MapControls\n\n                onChange={onCameraMove}\n                ref={mapControlRef}\n                maxPolarAngle={Math.PI / 2}\n                />\n\n            {floors && floors.map(( value: IFloorData, index: number) => (\n                <Map\n                    key={`Map-${index}`}\n                    visible={currentFloorIndex === index}\n                    floorIndex = {index}\n                    currKioskObj={params.currKioskObj}\n                    activeObjectId={params.activeObjectId}\n                    hoverObjectId={params.hoverObjectId}\n                    meshFloors={meshFloors}\n                    routeTube={routeTubes && routeTubes[index]}\n                    onPointerEnter={params.onPointerEnter}\n                    onPointerLeave={params.onPointerLeave}\n                    onPointerMove={params.onPointerMove}\n                    onClick={params.onClick}\n                    handleChangeFloor={handleChangeFloor}\n                    mode={mode}\n                />\n            ))}\n        </>\n    </group>)\n}","import type {Mesh} from \"three\";\r\nimport {Box3, Vector3} from \"three\";\r\n\r\nexport function get_camera_focus_object(objs:Mesh[], fov:number, aspectRatio: number, style: string) {\r\n    // config.STYLE\r\n    // config.CAMERA.fov\r\n\r\n    if (!Array.isArray(objs)) {\r\n        objs = [objs];\r\n    }\r\n    if (!objs.length) {\r\n        console.warn('get_camera_focus_object: no objects passed');\r\n        return { position: new Vector3(), target: new Vector3() };\r\n    }\r\n\r\n    const objsBoundingBox = objs.reduce((box, obj) => {\r\n        if (!obj.geometry.boundingBox) {\r\n            obj.geometry.computeBoundingBox();\r\n        }\r\n        if (obj.geometry.boundingBox) {\r\n            box.union(obj.geometry.boundingBox);\r\n        }\r\n        return box;\r\n    }, new Box3());\r\n\r\n    const obj_size = new Vector3();\r\n    objsBoundingBox.getSize(obj_size);\r\n\r\n    const center = new Vector3();\r\n    objsBoundingBox.getCenter(center);\r\n\r\n    objs[0].localToWorld(center);\r\n\r\n    // var max_length = (obj_size.x > obj_size.y && aspectRatio() < 1 ? obj_size.x : obj_size.y) / 2;\r\n    // var padding = max_length * 0.2;\r\n    // if (padding > 50) padding = 50;\r\n    // max_length += padding;\r\n    // var new_y = max_length / Math.tan(camera.fov * Math.PI / 360);\r\n\r\n    let tanFOV = Math.tan(Math.PI * fov / 360);\r\n    let padding = 1.1;\r\n    let new_width = (obj_size.x * padding) / 2 / (tanFOV * aspectRatio);\r\n    let new_height = (obj_size.y * padding) / 2 / tanFOV;\r\n    let new_y = Math.max(new_width, new_height);\r\n    let new_z = getCameraTiltPosition(new_y, style);\r\n\r\n    const target = new Vector3(center.x, 0, center.z);\r\n    const position = new Vector3(center.x, new_y, center.z + new_z);\r\n\r\n    // createjs.Ticker.framerate = 60;\r\n    // createjs.Tween.get(config.CONTROLS.target)\r\n    //     .to({ x: center.x, z: center.z }, 400);\r\n    // createjs.Tween.get(config.CAMERA.position)\r\n    //     .to({ x: center.x, y: new_y, z: center.z + new_z }, 400);\r\n\r\n    return {position, target};\r\n}\r\n\r\nfunction getCameraTiltPosition(y:number, style:string): number {\r\n    let angle = 60;\r\n    if (style == '2D') angle = 89.9;\r\n    return y / Math.tan(angle * Math.PI / 180);\r\n}","import { IFloorSelectorProps } from \"types\";\nimport styles from '../../MapBox.module.css';\n\ntype TFloorButtonProps = {\n    isActive: boolean,\n    onClick: (e: any) => void,\n    text: string,\n}\n\nconst FloorButton = ({isActive, onClick, text }: TFloorButtonProps) => {\n    return (\n\n        <div\n            className={`${styles.floor} ${styles.control_btn} ${isActive ? styles.active : ''}`} onClick={onClick}\n        >\n            {text}\n        </div>\n    )\n}\n\nconst FloorSelector = ({floors, selectedFloorIndex, handleFloorChange, accentColor}: IFloorSelectorProps) => {\n    const floorButtons: Array<TFloorButtonProps & {key: string}> = [];\n    for (let i = 0; i < floors; i++) {\n        const style = {display: 'flex', cursor: 'pointer', background: 'white'};\n        if (i === selectedFloorIndex) {\n            style.background = accentColor;\n        }\n        floorButtons.push({\n            key: `floor-change-btn-${i}`,\n            isActive: i === selectedFloorIndex,\n            onClick: handleFloorChange(i),\n            text: `Floor ${i + 1}`,\n        })\n    }\n\n    return (\n        <div className={`${styles.floors} ${styles.btn_group}`}>\n            {floorButtons.map(value => <FloorButton key={value.key} isActive={value.isActive} onClick={value.onClick} text={value.text} ></FloorButton>)}\n        </div>\n    );\n}\n\nexport default FloorSelector;\n","const ATM = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 248.08 247.92\">\n            <path d=\"M122,257.27c-5.39-1-10.81-1.79-16.17-2.92C46.21,241.73,4.83,187.22,8.2,125.78,11.48,65.91,58.61,16.49,118.57,10.07a123.9,123.9,0,0,1,136.17,105.3c9.72,65.14-34,126.76-99,139.57-4.56.9-9.16,1.56-13.74,2.33Zm119.67-124c0-60.41-49.38-109.74-109.76-109.66S22.16,73.17,22.33,133.47A109.8,109.8,0,0,0,131.87,242.79C192.39,242.87,241.67,193.71,241.67,133.26Z\" transform=\"translate(-8.01 -9.35)\" fill=\"#222\" />\n            <path d=\"M142.74,209.12v17.52h-20V209.15c-16.35-2.42-30.49-8.31-39.37-22.87-5.29-8.67-7.81-18.17-8.61-28.56H104c.63,12.29,6,21.26,18.19,26a31.6,31.6,0,0,0,.46-3.66c0-11.83-.09-23.66.1-35.49,0-3-.93-4.26-3.86-5.14-6.36-1.9-12.81-3.81-18.77-6.68-24.22-11.66-29.61-43.54-10.9-63.07,7.4-7.74,16.65-12,27-14.3,1.94-.43,3.89-.79,6.33-1.28V38.43H142.7c0,4.09.19,8-.06,12-.21,3.14,1,4.26,4,4.9C161.3,58.39,173.8,65,180.47,79.1c2.7,5.7,3.82,12.15,5.84,18.89h-29c-2.52-5-4.56-9.87-7.34-14.25-1.3-2-4-3.16-6.85-5.24-.21,2.37-.43,3.76-.43,5.15,0,9,.2,18-.12,27-.15,4,1,5.68,5,6.81a120.71,120.71,0,0,1,19.6,7.27c29.52,14.08,31.09,54.34,5.8,72.94a60.33,60.33,0,0,1-25.11,10.52Zm.17-25.19c12.19-2.62,18.79-10.58,18-21.25-.58-8.26-7.84-14.53-18-15.4Zm-20.7-73.36V79.24c-8.71,1.32-14.1,7.27-14.38,15.45C107.55,103.15,112,108.2,122.21,110.57Z\" transform=\"translate(-8.01 -9.35)\" fill=\"#222\" />\n        </svg>\n    )\n}\n\nexport default ATM;","\nconst DogPoopStation = () => {\n    return (\n\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 752.1 736.4\">\n            <ellipse transform=\"matrix(0.9488 -0.3159 0.3159 0.9488 -30.6034 83.2258)\" fill=\"#222\" cx=\"241.4\" cy=\"136\" rx=\"85.6\" ry=\"135.9\" />\n            <ellipse transform=\"matrix(0.3917 -0.9201 0.9201 0.3917 178.2635 541.6781)\" fill=\"#222\" cx=\"498.8\" cy=\"136\" rx=\"135.8\" ry=\"85.7\" />\n            <ellipse transform=\"matrix(0.665 -0.7469 0.7469 0.665 -223.1496 187.105)\" fill=\"#222\" cx=\"97\" cy=\"342.3\" rx=\"74.4\" ry=\"109.6\" />\n            <ellipse transform=\"matrix(0.6879 -0.7258 0.7258 0.6879 -19.9475 571.058)\" fill=\"#222\" cx=\"654\" cy=\"308.7\" rx=\"111.1\" ry=\"75.7\" />\n            <path fill=\"#222\" d=\"M747.3,578.7c-9.7-67.6-60.5-124.7-119.6-134.8l7.4,1.7c-48.9-3.7-96.1-32.2-126.4-76.3\n\t\tc-14.6-21.3-25.8-46.4-44.8-62.7c-15.5-13.3-34.9-19.4-54.1-22.6c-30.9-5.1-63.1-3.3-92.3,9.5s-55,37.1-68.5,69.4\n\t\tc-7.4,17.8-11,37.5-18.6,55.2C209.1,468,160.4,494,129.8,537c-22.6,31.8-34.8,73.1-33.6,114.1c0.3,10.8,1.6,22,6.5,31.3\n\t\tc4.9,9.5,13.1,16.1,21.4,21.7c40.2,27.1,90.4,34.1,135.1,19c56.2-19,105.8-71.2,164.1-65c21,2.2,40.7,12,60.7,19.4\n\tc73,27,154.5,22,224.6-13.7c9.8-5,19.6-10.8,26.8-19.9C748.9,626.8,750.6,601.3,747.3,578.7z\"/>\n        </svg>\n    )\n}\n\nexport default DogPoopStation;","\nconst Elevator = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 581.01 581\">\n            <path d=\"M480.87,597H125.13A112.77,112.77,0,0,1,12.5,484.34V128.66A112.77,112.77,0,0,1,125.13,16H480.87A112.77,112.77,0,0,1,593.5,128.66V484.34A112.77,112.77,0,0,1,480.87,597ZM125.13,42.39a86.35,86.35,0,0,0-86.24,86.27V484.34a86.35,86.35,0,0,0,86.24,86.27H480.87a86.35,86.35,0,0,0,86.24-86.27V128.66a86.35,86.35,0,0,0-86.24-86.27Z\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n            <path d=\"M428.75,273.7a24.08,24.08,0,0,1-17.18-7.13L303,158,194.42,266.57A24.3,24.3,0,0,1,160,232.21l143-143L446,232.21a24.31,24.31,0,0,1-17.2,41.49\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n            <path d=\"M303,538.3,160.05,395.35A24.31,24.31,0,0,1,194.44,361L303,469.53,411.56,361A24.31,24.31,0,1,1,446,395.35Z\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n        </svg>\n    )\n}\n\nexport default Elevator;","\nconst FamilyRestroom = () => {\n  return (\n    <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 648 604.44\">\n      <path d=\"M483.26,183.08v386.3c0,20.7,3.14,35.6,25.57,35.6,19.63,0,26.32-13.86,26.32-35.6v-214h10.61v214c0,22.64,8.55,35.6,28.5,35.6,19.25,0,27.17-11.72,27.17-35.6V183.08h12.24V322.52c0,20.29,1.88,32.84,20.75,32.84,15.42,0,21.58-12.38,21.58-32.84V193.68c0-60.18-27-74.85-90.31-74.85H515.52c-64.65,0-86.88,18.41-86.88,77.21V322.52c0,19,2.67,32.84,21.83,32.84,16.63,0,20.56-12.55,20.56-32.84V183.08\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n      <path d=\"M97.85,188.81,35.17,411.09H90V575.35c0,17.9,5.81,31.18,23,31.18,16.19,0,23.49-12.42,23.49-31.18V411.09h12.67V575.35c0,17.9,5.81,31.18,23.07,31.18,16.95,0,23.64-13.28,23.64-31.18V411.09h58.29L189.45,188.81l12.84-3.06L242,312.43c3.55,11.83,13.09,18.19,22.2,18.19,10.86,0,18.07-8.11,18.07-18.63,0-1.41,0-5.55-2.25-13.3L243.65,175.23c-12.45-42-35.09-56.37-75.2-56.37H127c-53.8,0-70.43,17.68-79.58,51.26L8,313.13c0,9.38,8.71,18,18.63,18,8.54,0,16.13-5.55,20-17.4l39-127,12.22,2.09\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n      <path d=\"M444.91,518.05l-12.71-42.8c-5.36-18.12-17.21-46.31-57.5-46.31H329.6c-40.48,0-52.27,28.19-57.94,46.31l-12.45,42.8c-3.94,11.24-.6,19.51,7.92,22,8.11,2.4,14.93-2.71,18.68-12.67l7.7-29.5c1.82-7,5.6-10,11-8.29,5.18,2.26,5.41,7.32,3.34,14.3,0,0-10.85,72.51-3.74,92,6.62,17.86,32,16,48,15.37,16.16.61,40.9,2.49,47.75-15.37,6.82-19.51-4.18-92-4.18-92-1.23-7-1.23-12,3.94-14.3,5-1.72,8.74,1.25,11,8.29l7.85,29.5c3.15,10,10.42,15.07,18.53,12.67,8.29-2.5,11.59-10.77,7.92-22m-93-102.53A48.95,48.95,0,1,0,303,366.57a48.87,48.87,0,0,0,48.83,48.95\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n      <path d=\"M542.27,104.18c25.92,0,47.77-21.76,47.77-49a48.11,48.11,0,0,0-47.77-48c-26,0-47.59,21.39-47.59,48,0,27.24,21.6,49,47.59,49\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n      <path d=\"M145.37,104.18c26,0,46.33-21.76,46.33-47.57S171.35,8.66,145.37,8.66s-46.91,22-46.91,48,21,47.57,46.91,47.57\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n    </svg>\n  )\n}\n\nexport default FamilyRestroom;","\nconst Management = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 772.14 772.14\">\n            <path d=\"M12.61,738.09V58.45C28.35,20.11,40.21,12.29,82.7,12.29q319.74,0,639.46,0c41.63,0,62.59,21,62.59,62.6q0,319.73,0,639.46c0,42.33-7.5,53.72-46.15,70.07H59C35.27,777.22,19.94,761.66,12.61,738.09ZM400.34,61.77c-107.07,0-214.15.2-321.22-.26-12.89-.06-16.48,3.72-16.45,16.58q.55,319.68,0,639.36c0,12.41,2.94,17,16.27,16.93q319.68-.57,639.36,0c13.72,0,17.24-4.07,17.22-17.54q-.62-318.92.09-637.82c0-15.33-5.44-17.56-18.71-17.5C611.41,62,505.88,61.77,400.34,61.77Z\" transform=\"translate(-12.61 -12.29)\" fill=\"#222\" />\n            <path d=\"M262.69,306.22V651.6H192.15V166.28c30.74,0,61.46-.43,92.13.58,3.59.11,8.35,7.62,10.16,12.58Q342.59,311.11,390.09,443c1.68,4.63,3.75,9.13,6.67,16.17,25-70.19,49-137.75,73-205.3,9.13-25.64,18-51.37,27.69-76.8,1.63-4.29,6.68-10.23,10.3-10.34,28.14-.86,56.31-.47,85.28-.47V651.68h-70.4V306.9l-3.4-.66c-40.49,114.34-81,228.68-122.82,346.81L266,305.68Z\" transform=\"translate(-12.61 -12.29)\" fill=\"#222\" />\n        </svg>\n\n    )\n}\n\nexport default Management;","\nconst PlayArea = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 670 772.73\">\n            <path d=\"M148.12,16l38.67,19.35c-1.08,3.94-1,5.26-1.61,5.69C146.81,68.47,142,105.72,153.25,148.13c4,15,10.9,27.7,8.38,46.15-3.85,28.24,2.4,58.08,5.93,87,7.47,61.24,15.95,122.37,24.06,183.54.22,1.7,1,3.32,5.06,4.77,0-6.85-.19-13.72,0-20.57q3.48-108,7-216.07c.49-15.79-.36-28.92-15.76-41.44-31.82-25.87-40.12-82.17-21.82-117.88,12.56-24.5,42.67-39.33,70-34.48,29.31,5.19,52.71,28.25,56.62,55.79,6.76,47.64-31.32,101.11-82.12,110.92-3.34,93-6.71,186.81-10.08,280.64l2,.51c8.65-25.2,17.71-50.26,25.86-75.62,12.44-38.67,20.78-45.73,62-45.4,25.4.2,51.66-5.14,75.71,8.28h0c10,20.57,21.3,40.63,29.58,61.87,8.15,20.92,13.22,43,22.11,64.6,0-22.62-1-45.31.36-67.85.9-14.63,2.86-30.09,8.56-43.36,15.8-36.77,49.23-48,85.26-51.6,53.64-5.4,91.8,16.8,118.08,67.53,4.33-48.86,8.76-95.83,12.54-142.85,1.47-18.36,2-36.83,1.8-55.24,0-4.14-3.6-9.86-7.24-12.11-38.47-23.86-61.06-77.9-50.47-122.24,7.85-32.89,45-57.77,80.43-53.93,34.42,3.72,64.49,35.87,65.08,69.56.87,50.08-32.63,99.45-78.55,111.54-8,98.49-16.21,198.19-24,297.92-1.24,15.88-.18,31.94-.77,47.89-.61,16.7-9.35,26.37-22.36,25.79-12.72-.56-20.17-9.65-20.3-25.88-.23-31.43,0-62.86-.16-94.28,0-5.15-.88-10.3-1.35-15.45l-4.94,0c-.44,5.2-1.27,10.39-1.28,15.59q-.09,149.16,0,298.31c0,6.16.36,12.61-1.28,18.41-3.27,11.61-9.78,20.13-23.7,20.13-13.76,0-20.67-8.24-24.18-19.78-1.75-5.74-1.29-12.24-1.29-18.4,0-55.13.07-110.26,0-165.39,0-5.75-1.1-11.49-1.68-17.24l-4.78-.27c-.79,5.38-2.25,10.76-2.26,16.14-.14,55.13,0,110.26,0,165.39,0,5.65.47,11.51-.8,16.92-3.05,13-9.77,22.67-25,22.54-12.68-.11-22.84-8.63-24.07-23.15-1.39-16.37-.93-32.92-.93-49.4q0-132.15.09-264.3c0-4.84-.76-9.69-1.16-14.53l-4.29-.33c-.77,4.87-2.16,9.73-2.2,14.6-.21,31.95.12,63.89-.24,95.83-.22,20.06-10.43,27-30.12,22.18-3.33-.82-7.64.15-10.89,1.63C405.73,577.45,398.51,575.6,393,561c-6.64-17.8-11.54-36.25-17.17-54.42-4.77-15.39-9.5-30.79-16.31-45.56,4.61,66.85,34.83,126.95,50.18,192.46H356c-.4,6.2-1,11.09-1,16-.07,30.92.13,61.83,0,92.74-.09,17.27-7.59,26.31-21.15,26.44s-21.28-8.67-21.46-26.19c-.33-30.39.05-60.8-.24-91.19-.05-5.32-1.93-10.62-3-15.92l-5.05.34c-.55,5.2-1.55,10.39-1.57,15.59-.14,27.31,0,54.62,0,81.92,0,4.12.27,8.27-.08,12.36-1.21,14.52-9.54,23.29-21.64,23.09s-20.85-9.05-21.09-23.66c-.51-30.9-.11-61.82-.09-92.74,0-5.55,0-11.1,0-18.3h-54.7c15.54-65.55,45.77-125.27,48.86-192.3a75.07,75.07,0,0,0-3.63,8.3c-9,29.51-17.65,59.11-26.79,88.56C220,569.27,213.22,577.24,200.64,574c-13.58-3.53-12.34-14-12.36-25.82-.06-33.23-.45-66.69-4.26-99.64-8.85-76.66-19.93-153.07-29.78-229.61-2.15-16.73-7.5-28.15-25.78-34.52-36.3-12.65-68.26-62.14-66.11-99.94,1.71-30,18.74-50.32,45.57-62.84,4.11-1.92,8.25-3.76,12.38-5.64Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n            <path d=\"M366.14,374.32c-10.69-26.47-3.48-53.71-3.51-80.64,0-5.71-.5-11.43-.77-17.14l-6.36-.05c0,7.36-.44,14.76.07,22.08,2.61,37.58-28.14,62.52-64,51.69-22.85-6.91-35.81-29.12-32.36-54.56.85-6.27.13-12.75.13-19.13l-7-.39c-.36,6.46-1.24,12.95-1,19.38.8,18.49,2.46,36.94,2.93,55.43.15,6-2.36,12-3.42,16.92-8-28.07-16.1-55.61-23.69-83.28-5.76-21-.8-30.34,20.52-31.34,21.48-1,43.14,2.79,64.75,3.44,7.73.23,15.57-3.86,23.32-3.71,15.13.3,30.72.3,45.19,4,11.92,3.08,10.3,15.27,7.59,25-4.42,15.82-10.3,31.26-14.23,47.19-3.64,14.79-5.54,30-8.21,45.07Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n            <path d=\"M573.81,274.55c-.08,26.89-23.52,50.26-50.32,50.17-27.05-.08-50.08-23.2-50.09-50.26,0-27.7,22.11-49.49,50.18-49.45S573.9,247,573.81,274.55Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n        </svg>\n\n    )\n}\n\nexport default PlayArea;","\nconst Restroom = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 732.38 614.5\">\n            <path d=\"M129.05,159.85a55.6,55.6,0,1,1,55.6,55.6,55.69,55.69,0,0,1-55.6-55.6m55.7,69.6h-1.5a133.5,133.5,0,0,0-132,134.6v58.6a27,27,0,0,0,54,0v-58.9a78.92,78.92,0,0,1,18.9-52.2v366a27,27,0,1,0,53.9,0V472.65h13.2v204.9a27,27,0,0,0,54,0V311.35a78.75,78.75,0,0,1,18.9,50.4v60.9a27,27,0,0,0,54,0v-61.2c-.8-73.1-60.5-132-133.4-132m596.5,182.1c-3.7-8-7.3-16.8-11.1-26.2-25.9-62.1-64.9-155.9-157.8-155.9s-132,93.9-157.7,156c-3.9,9.3-7.6,18.1-11.2,26.1a27,27,0,0,0,13.5,35.7,26.17,26.17,0,0,0,11.1,2.4,26.93,26.93,0,0,0,24.6-15.9c3.9-8.5,7.7-17.8,11.8-27.6,19.4-46.8,37.7-86.1,63.7-106.9l-70.4,174.4c-10,24.6,3.7,44.8,30.2,44.8h23.8v159.1a27,27,0,0,0,54,0V518.45h13.1v159.1a27,27,0,0,0,54,0V518.45h23.9c26.6,0,40.2-20.2,30.3-44.8l-70.4-174.4c26,20.7,44.2,60,63.7,106.8,4,9.8,8,19.2,11.8,27.7a26.93,26.93,0,0,0,24.6,15.9,27.41,27.41,0,0,0,11.1-2.4,27.12,27.12,0,0,0,13.4-35.7m-169-196.2a55.65,55.65,0,1,0-55.6-55.6,55.61,55.61,0,0,0,55.6,55.6m-228-125.3a14.08,14.08,0,0,0-14.1,14.1v580.7a14.1,14.1,0,1,0,28.2,0V104.15a14.08,14.08,0,0,0-14.1-14.1\" transform=\"translate(-51.24 -90.05)\" fill=\"#222\" />\n        </svg>\n\n    )\n}\n\nexport default Restroom;","\nconst Security = () => {\n    return (\n        <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 752.09 736.37\">\n            <path d=\"M28.78,317.59c2.71-4.8,5.33-9.66,8.15-14.4,11-18.36,31.75-27.56,53.13-23.59a49.46,49.46,0,0,1,40.14,39.7c.84,4.22,1.11,8.54,1.85,14.52h27.87c47.62,0,95.26-.18,142.88.32,10.18.1,15.63-2.52,18.93-12.91,19.06-60,38.82-119.85,58.39-179.92C350,120.53,340.16,99.37,349,73.44c6.33-18.56,27.67-33.56,47.89-33.67,21-.11,43.11,15.71,48.91,34.9,8.25,27.35-1.23,46.47-34.08,67.83,24.11,60,48.07,120.23,72.84,180.12,2,4.88,9.59,10.54,14.65,10.61,58.85.74,117.72.47,172.57.47,9.85-16.1,17.17-32.4,28.59-45,6.1-6.72,19.14-9.19,29.27-9.78,23.25-1.37,43.85,15.44,49.75,38,5.34,20.38-4.28,44.15-22.46,55.51-22.92,14.32-42.71,10.61-71.23-13.63-43,36.09-85.92,72.38-129.15,108.32-28,23.26-28.07,23-17.53,57.41q22.77,74.34,45.21,148.64c41.33,4,58.12,15.31,63.85,42.81,4.13,19.85-6.2,42.06-24.53,52.79-19.66,11.49-42.35,9.43-59.3-5.39-19.58-17.12-22.15-38.26-7.81-71.85-18.57-11.81-37.52-23.65-56.24-35.84-31.49-20.49-62.66-41.46-94.41-61.52-4.67-3-13.62-5-17.49-2.51-52.3,33.14-104,67.14-155.92,100.92,13.47,35.69,10.4,56.32-10.74,72.49-18,13.8-41,14.65-59.62,2.2s-26.72-35.64-20-58c7.12-23.77,26.9-35,63.15-34.91Q233,583.23,261.26,490.64L114.85,368c-17.47,11.79-38,19.64-57.78,5.48-11.49-8.21-19-22-28.29-33.28Z\" transform=\"translate(-28.78 -39.77)\" fill=\"#222\" />\n        </svg>\n\n    )\n}\n\nexport default Security;","import { IAmenitiesInteractiveList, IFloorSelectorProps, TMapMode } from \"types\"\nimport FloorSelector from \"./FloorSelector\"\nimport { MouseEventHandler } from \"react\";\nimport styles from '../../MapBox.module.css';\nimport ATM from \"components/Icons/ATM\";\nimport DogPoopStation from \"components/Icons/DogPoopStation\";\nimport Elevator from \"components/Icons/Elevator\";\nimport FamilyRestroom from \"components/Icons/FamilyRestroom\";\nimport Management from \"components/Icons/Management\";\nimport PlayArea from \"components/Icons/PlayArea\";\nimport Restroom from \"components/Icons/Restroom\";\nimport Security from \"components/Icons/Security\";\n\nconst Names = ['atm', 'dog-poop-station', 'elevator', 'family-restroom', 'management', 'playarea', 'restroom', 'security'] as const;\n\ntype TIconName = (typeof Names)[number];\n\ntype TAmenityIconProps = {\n    type: TIconName,\n}\n\ntype TElement =  undefined | (() => JSX.Element);\n\nconst AmenityIcon = ({type}: TAmenityIconProps) => {\n    let name: TElement;\n    name = undefined;\n\n    switch (type) {\n        case 'atm':\n                name = ATM;\n            break;\n        case 'dog-poop-station':\n                name = DogPoopStation;\n            break;\n        case 'elevator':\n                name = Elevator;\n            break;\n        case 'family-restroom':\n                name = FamilyRestroom;\n            break;\n        case 'management':\n                name = Management;\n            break;\n        case 'playarea':\n                name = PlayArea;\n            break;\n        case 'restroom':\n                name = Restroom;\n            break;\n        case 'security':\n                name = Security;\n            break;\n    \n        default:\n            break;\n    }\n    if (name !== undefined) {\n        const Comp = name;\n        return (\n            <>\n                <Comp></Comp>\n            </>\n        )\n    } else {\n        return null;\n    }\n\n}\n\n\nconst UIComponent = ({\n    floors,\n    accentColor,\n    selectedFloorIndex,\n    handleFloorChange,\n    amenitiesList,\n    zoomIn,\n    zoomOut,\n    reset,\n    clearRoute,\n    handleAmenityClick,\n    mode,\n}: IFloorSelectorProps & {\n    amenitiesList: IAmenitiesInteractiveList[],\n    zoomIn?: MouseEventHandler<HTMLDivElement>,\n    zoomOut?: MouseEventHandler<HTMLDivElement>,\n    reset?: () => void,\n    clearRoute?: MouseEventHandler<HTMLDivElement>,\n    handleAmenityClick: (type: string) => void,\n    mode?: TMapMode,\n}\n) => {\n    const handleResetClick: MouseEventHandler = (e) => {\n        e.preventDefault();\n        if (reset instanceof Function) {\n            reset();\n        }\n    }\n return(\n        <div id={styles['threejs-map-wrapper']}>\n            <div id={styles['threejs-map']}>\n                <div id={styles['map_controls']} className={`${!floors? 'hide' : ''}`}>\n                    <div className={styles['btn_group']}>\n                        <div onClick={handleResetClick} className={`${styles['reset']} ${styles['control_btn']}`}>RESET</div>\n                        <div onClick={clearRoute} className={`${styles['clear_route']} ${styles['control_btn']} ${clearRoute? '' : styles.hide}`}>Clear Route</div>\n                    </div>\n                    <FloorSelector  accentColor={accentColor} floors={floors} selectedFloorIndex={selectedFloorIndex} handleFloorChange={handleFloorChange}/>\n                    <div className={`${styles['btn_group']} ${styles['zoom_btns']}`}>\n                        <div onClick={zoomOut} className={`${styles['zoom-out']} ${styles['control_btn']}`}>–</div>\n                        <div onClick={zoomIn} className={`${styles['zoom-in']} ${styles['control_btn']}`}>+</div>\n                    </div>\n                </div>\n                <div id={styles['mapit2_loader']} className={styles['hide']}>Loading map, please wait...</div>\n                    {mode !== 'edit' &&\n                        <div className={`${styles.amenities}`} style={{ display: 'block' }}>\n                            {amenitiesList.map((amenity, index) => (\n                                <div key={`amenity-${amenity.name}-${index}`} className={`${styles.amenity}`} style={{ backgroundColor: '#000000' }} onClick={() => handleAmenityClick(amenity.type)}>\n                                    <div className={styles.img}>\n                                        <AmenityIcon type={amenity.type as TIconName}></AmenityIcon>\n                                        {/* <img src={amenity.imageUrl} alt=\"\" /> */}\n                                    </div>\n                                    <div className={`${styles.name}`}>{amenity.name}</div>\n                                </div>\n                            ))}\n                        </div>\n                    }\n            </div>\n        </div>\n )   \n}\n\nexport default UIComponent;\n","import React, {useEffect} from \"react\";\nimport styles from '../../MapBox.module.css';\n\nexport const MapCenterMarker = () => {\n    const kioskElementRef = React.useRef<HTMLDivElement>(null);\n\n    // todo figure out better way\n    useEffect(() => {\n        if (!kioskElementRef.current) return;\n        const kioskElement = kioskElementRef.current;\n        const svgOrigin = document.querySelector('#map-special-svg-kiosk svg');\n        let svgClone:Node;\n        if (svgOrigin) {\n            svgClone = svgOrigin.cloneNode(true);\n            kioskElement.appendChild(svgClone);\n        }\n\n        return () => {\n            if (svgClone) {\n                kioskElement.removeChild(svgClone);\n            }\n        }\n    }, []);\n\n    return <>\n        <div className={styles['mapCenterMarker']}></div>\n        <div className={styles['kioskMarker']} ref={kioskElementRef}></div>\n    </>\n}","import { createContext, useContext, useState } from \"react\"\nimport { Object3D } from \"three\";\nimport { IExtMesh } from \"types\";\n\n\ntype TMeshObjectContext = {\n    MeshObject: IExtMesh[] | null;\n    SetMeshObject: React.Dispatch<React.SetStateAction<IExtMesh[] | null>>;\n}\n\nconst MeshObjectContext = createContext<TMeshObjectContext | null>(null);\n\nexport default function MeshObjectContextProvider({children}: {children: React.ReactNode}) {\n    const [MeshObject, SetMeshObject] = useState<IExtMesh[] | null>(null);\n\n    return (\n        <MeshObjectContext.Provider\n            value={{\n                MeshObject,\n                SetMeshObject,\n            }}\n        >\n            {children}\n        </MeshObjectContext.Provider>\n    )\n}\n\nexport function useMeshObjectContext() {\n    const context = useContext(MeshObjectContext);\n\n    if (context === undefined) {\n        throw new Error(\"useMeshObjectContext must be used within MeshObjectContextProvider\");\n    }\n\n    return context;\n}\n","import { HtmlProps } from \"@react-three/drei/web/Html\";\nimport { useThree } from \"@react-three/fiber\";\nimport { MeshType, getMaterial } from \"Hooks/useMeshFloors/getMaterialAndGeometry\";\nimport { useMeshObjectContext } from \"contexts/MeshObjectContextProvider\";\nimport { getImage, layer_text_logo_position_by_id, processImage } from \"helpers/draw.logo.helpers\";\nimport { getFormatedColor, hex_to_color } from \"helpers/misc\";\nimport { IRetailer, MapObj } from \"mapitApiTypes\";\nimport { MouseEventHandler, SyntheticEvent, useEffect, useRef, useState, useTransition } from \"react\";\nimport { Button, Col, Form, FormControl, FormControlProps, Nav, Row, Tab, Tabs } from \"react-bootstrap\"\nimport { DoubleSide, Euler, MeshBasicMaterial, MeshPhongMaterial, Object3D, Vector3 } from \"three\";\n// import { TextGeometry } from \"three/examples/jsm/geometries/TextGeometry\";\nimport { Geometry, TextGeometry } from \"three-stdlib\";\nimport { IConfig, IExtMesh, IJsonConfig, IMeshParamsTmp } from \"types\";\n\n\n\ninterface IMapboxForm {\n    floorIndex: number;\n    meshFloors: IMeshParamsTmp;\n    config: IConfig;\n    data: any;\n    setData: (index: number, data: MapObj) => void;\n    selectedId: string;\n    centerId: string;\n}\n\nconst mainTabs = ['retailer', 'special', 'custom', ''] as const;\ntype TMainTabsKey = (typeof mainTabs)[number];\nconst isTMainTabsKey = (x: any): x is TMainTabsKey => mainTabs.includes(x);\n\nconst retailerTabs = ['retail_name', 'retail_text', 'retail_logo', 'custom_text', 'custom_image', ''] as const;\ntype TRetailerTabsKey = (typeof retailerTabs)[number];\nconst isTRetailerTabsKey = (x: any): x is TRetailerTabsKey => retailerTabs.includes(x);\n\nconst specialTabs = ['kiosk', 'amenity', ''] as const;\ntype TSpecialTabsKey = (typeof specialTabs)[number];\nconst isTSpecialTabsKey = (x: any): x is TSpecialTabsKey => specialTabs.includes(x);\n\nconst getDefaultMapOjbValues = (centerId: string): MapObj => ({\n\tid: '',\n\tcenter_id: centerId,\n\tretailer_id: '',\n\tkiosk_id: null,\n\tmap_obj_name: '',\n\tobj_type: 'retailer',\n\tlayer_type: 'retail_name',\n\tvalue: '',\n\tcustom_text: '',\n\tcustom_image: '',\n\thover_text: '',\n\tbg_color: '',\n\ttransparent: 0,\n\ttext_color: '',\n\tsize: '8',\n\trotate: '0',\n\toffsetX: '0',\n\toffsetY: '0',\n});\n\nconst MapboxForm = (params: IMapboxForm) => {\n\n    const {data, setData, selectedId, centerId, config, floorIndex, meshFloors} = params;\n\n    const [mainTabKey, setMainTabKey] = useState<TMainTabsKey>('');\n    const [retailerTabsKey, setRetailerTabsKey] = useState<TRetailerTabsKey>('');\n    const [specialTabsKey, setSpecialTabsKey] = useState<TSpecialTabsKey>('');\n    const [formData, setFormData] = useState<MapObj>(getDefaultMapOjbValues(centerId));\n    const [rotation, setRotation] = useState<number | undefined>(undefined);\n    const context = useMeshObjectContext();\n    const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n    const [isPending, startTransition] = useTransition();\n\n    useEffect(() => {\n        switch(mainTabKey) {\n            case 'retailer':\n                console.debug({\n                    formData,\n                    mainTabKey,\n                    retailerTabsKey\n                })\n                handleChangeTab(retailerTabsKey);\n                break;\n        }\n    }, [formData, mainTabKey, retailerTabsKey])\n\n    const handleChangeTab = (k:  any | null) => {\n        console.debug({handleChangeTab: k});\n        const key: TMainTabsKey | TRetailerTabsKey | TSpecialTabsKey | null = k;\n        if (key !== null) {\n            if (isTMainTabsKey(key)) {\n                setMainTabKey(key);\n                if (formData.id && formData.obj_type !== key && mainTabKey && key) {\n                    formData.obj_type = key;\n                    if (key === 'retailer') {\n                        formData.layer_type = 'retail_name';\n                    } else if (key === 'special') {\n                        formData.layer_type = 'kiosk';\n                        formData.retailer_id = '';\n                    } else if (key === 'custom') {\n                        formData.layer_type = 'custom_text';\n                        formData.retailer_id = '';\n                    }\n                    setMainTabKey('');\n                    setRetailerTabsKey('');\n                    setSpecialTabsKey('');\n                    setFormData({...formData});\n                    updateData({\n                        ...formData,\n                    });\n                }\n            } else if (isTRetailerTabsKey(key)) {\n                setRetailerTabsKey(key);\n                if (formData.id && retailerTabsKey && key) {\n                    formData.layer_type = key;\n                    if (formData.layer_type !== key) {\n                        setFormData({ ...formData });\n                    }\n                    updateData({\n                        ...formData,\n                    })\n                    if (['retail_name', 'custom_text', 'retail_text'].includes(key)) {\n                        let text = '';\n                        switch (key) {\n                            case 'retail_name':\n                                const retailIndex = data.retailers.findIndex((item: IRetailer) => formData.retailer_id === item.id);\n                                if (retailIndex !== -1) {\n                                    text = data.retailers[retailIndex].retail_name;\n                                    console.debug({\n                                        retailer: data.retailers[retailIndex],\n                                    })\n                                }\n                                break;\n                            case 'retail_text':\n                            case 'custom_text':\n                                text = formData.custom_text;\n                                break;\n                        }\n                        if (context && context.MeshObject) {\n                            const obj = context.MeshObject[1];\n                            makeTextGeometry(obj, text, formData.size);\n                        }\n                    }\n\n                    if (['retail_logo', 'custom_image'].includes(key)) {\n                        context?.MeshObject?.forEach((obj, index) => {\n                            if (index === 0) return;\n\n                            makeImage(formData, obj);\n                        })\n                    }\n                }\n            } else if (isTSpecialTabsKey(key)) {\n                setSpecialTabsKey(key);\n                if (formData.id && formData.layer_type !== key && specialTabsKey && key) {\n                    formData.layer_type = key;\n                    formData.kiosk_id = '';\n                    formData.retailer_id = '';\n                    formData.value = '';\n                    setFormData({ ...formData });\n                    updateData({ ...formData });\n                }\n            }\n        }\n    }\n\n    const handleRotateChange = (e: any) => {\n        formData.rotate = e.target.value;\n        setFormData({...formData});\n        const index = data.map_objs.findIndex((value: MapObj) => value.id === formData.id);\n        if (index !== -1) {\n            data.map_objs[index] = {...formData};\n            setData(index, {...data});\n        }\n    }\n\n    const handleReset = () => {\n        const defaultValues = getDefaultMapOjbValues(formData.center_id);\n        setFormData({\n            ...defaultValues,\n            id: formData.id,\n        });\n        updateData({\n            ...defaultValues,\n            id: formData.id,\n        });\n    }\n\n    const updateData = (formData: MapObj) => {\n        const index = data.map_objs.findIndex((value: MapObj) => value.id === formData.id);\n        if (index !== -1) {\n            data.map_objs[index] = { ...formData };\n            setData(index, { ...formData });\n        }\n    }\n\n    const handleChangeRetailer = (e: any) => {\n        if (e.target.value) {\n            formData.retailer_id = e.target.value;\n            formData.kiosk_id = '';\n            setFormData({...formData});\n            updateData({...formData});\n        }\n    }\n\n    const handleChangeKiosk = (e: any) => {\n        if (e.target.value) {\n            formData.kiosk_id = e.target.value;\n            formData.retailer_id = '';\n            setFormData({...formData});\n            updateData({...formData});\n            context?.MeshObject?.forEach((obj, index) => {\n                if (index === 0) return;\n                makeImage(formData, obj);\n            })\n        }\n    }\n\n    const handleChangeAmenity = (e: any) => {\n        if (e.target.value) {\n            formData.value = e.target.value; \n            setFormData({...formData});\n            updateData({...formData});\n            context?.MeshObject?.forEach((obj, index) => {\n                if (index === 0) return;\n                makeImage(formData, obj);\n            })\n        }\n    }\n\n    const makeTextGeometry = (obj: IExtMesh, text: string, size: string) => {\n        let text_geometry = new TextGeometry(text, {\n            font: obj.userData.font,\n            size: parseInt(size),\n            height: 0.01,\n            curveSegments: 4,\n        });\n        text_geometry.center();\n        obj.geometry.dispose();\n        obj.geometry = text_geometry;\n    }\n\n    const makeImage = (formData: MapObj, obj: IExtMesh) => {\n        let img = null;\n        if (formData.layer_type === 'retail_logo') {\n            const retailIndex = data.retailers.findIndex((item: IRetailer) => formData.retailer_id === item.id);\n            if (retailIndex !== -1) {\n                img = getImage(formData, data.retailers[retailIndex]);\n            }\n        } else {\n            img = getImage(formData);\n        }\n        if (img instanceof HTMLImageElement) {\n            processImage(img, formData, (geometry, material) => {\n                obj.geometry = geometry;\n                obj.material = material;\n\n                const boundingBox = geometry.boundingBox;\n\n                const mesh_center_point = new Vector3();\n                if (boundingBox) {\n                    boundingBox.getCenter(mesh_center_point);\n\n                    const mesh_size = new Vector3();\n                    boundingBox.getSize(mesh_size);\n                    if (obj.object_id) {\n                        layer_text_logo_position_by_id(obj.object_id, mesh_center_point, mesh_size, obj, { [obj.object_id]: { ...formData } });\n                    }\n                }\n            });\n        }\n    }\n\n    const changeValue = (name: string, value: string) => {\n        // if (name === 'custom_image' && context?.MeshObject && context.MeshObject.length <= 1) {\n        //     formData.custom_image = value;\n        //     setFormData({...formData});\n        //     updateData({...formData});\n        // }\n\n        context?.MeshObject?.forEach((obj, index) => {\n            if (!obj.userData.position) {\n                obj.userData.position = new Vector3();\n                obj.userData.position.copy(obj.position);\n            }\n            const position = new Vector3();\n            position.copy(obj.userData.position);\n            switch (name) {\n                case 'custom_text':\n                    if (index === 0) break;\n                    formData.custom_text = value;\n                    if (['retail_text', 'custom_text'].includes(formData.layer_type)) {\n                        makeTextGeometry(obj, formData.custom_text, formData.size);\n                    }\n                    break;\n                case 'custom_image':\n                    if (index === 0) break;\n                    formData.custom_image = value;\n                    makeImage(formData, obj);\n                    updateData({\n                        ...formData,\n                    })\n                    break;\n                case 'size':\n                    if (index === 0) break;\n                    formData.size = value;\n                    if (!(['retail_logo', 'kiosk', 'amenity', 'custom_image'].includes(formData.layer_type))) {\n                        let text = '';\n                        if (formData.layer_type === 'retail_name' && obj.userData.retail_name) {\n                            const retailIndex = data.retailers.findIndex((item: IRetailer) => formData.retailer_id === item.id);\n                            if (retailIndex !== -1) {\n                                text = data.retailers[retailIndex].retail_name;\n                            }\n                        } else if (['retail_text', 'custom_text'].includes(formData.layer_type)) {\n                            text = formData.custom_text;\n                        }\n                        makeTextGeometry(obj, text, formData.size);\n                    } else if (formData.layer_type === 'retail_logo' || formData.layer_type === 'custom_image') {\n                        makeImage(formData, obj);\n                        if (timeoutRef.current) {\n                            clearInterval(timeoutRef.current);\n                        }\n                        timeoutRef.current = setTimeout(() => {\n                            updateData({ ...formData });\n                        }, 300);\n                    } else if (['amenity', 'kiosk'].includes(formData.layer_type)) {\n                        startTransition(() => {\n                            setFormData({ ...formData });\n                            updateData({ ...formData });\n                        })\n                    } \n                    break;\n\n                case 'rotate':\n                    if (index === 0) break;\n                    formData.rotate = value;\n                    obj.rotation.set(\n                        obj.rotation.x,\n                        obj.rotation.y,\n                        parseFloat(formData.rotate) * Math.PI / 180\n                    );\n                    break;\n\n                case 'offsetX':\n                    if (index === 0) break;\n                    position.x += parseFloat(value);\n                    obj.position.setX(position.x);\n                    formData.offsetX = value;\n                    break;\n\n                case 'offsetY':\n                    if (index === 0) break;\n                    position.y += parseFloat(value);\n                    obj.position.setY(position.y);\n                    formData.offsetY = value;\n                    break;\n\n                case 'text_color':\n                    if (index === 0) break;\n                    formData.text_color = value;\n                    if (['retail_name', 'retail_text', 'custom_text'].includes(formData.layer_type)) {\n                        const material_settings = {\n                            // color: hex_to_color(formData.text_color),\n                            color: formData.text_color,\n                            transparent: true,\n                            side: DoubleSide,\n                            depthWrite: false,\n                            depthTest: false,\n                        };\n                        let text_material = new MeshPhongMaterial(material_settings);\n                        obj.material = text_material;\n                    } else if (\n                        formData.layer_type === 'retail_logo' ||\n                        formData.layer_type === 'custom_image' ||\n                        (formData.obj_type === 'special' && formData.layer_type === 'kiosk' && formData.kiosk_id != null) ||\n                        (formData.obj_type === 'special' && formData.layer_type === 'amenity' && formData.value !== '')) {\n                        makeImage(formData, obj);\n                        startTransition(() => {\n                            updateData({\n                                ...formData,\n                                text_color: formData.text_color.replace('#', ''),\n                            });\n                        })\n                    }\n                    break;\n\n                case 'bg_color':\n                    if (index !== 0) break;\n                    formData.bg_color = value;\n                    let meshType: MeshType = 'store';\n                    if (obj.object_id?.startsWith('big-store')) {\n                        meshType = 'big-store';\n                    }\n                    obj.material = getMaterial(\n                        config,\n                        meshType,\n                        formData.map_obj_name,\n                        formData.bg_color,\n                        formData.transparent === \"1\"? true : false,\n                        {[formData.map_obj_name]: {...formData}}\n                        );\n                    // updateData({...formData});\n                    break;\n            \n                default:\n                    break;\n            }\n            startTransition(() => {\n                setFormData({ ...formData })\n                updateData({ ...formData });\n            });\n\n        })\n    }\n    const handleChange = (e: any) => {\n        const target = e.target as HTMLInputElement;\n        const value = target.value;\n        const name = target.name;\n        changeValue(name, value);\n    }\n\n    useEffect(() => {\n        if (data && data.map_objs && selectedId) {\n            const index = data.map_objs.findIndex((value: any) => value.map_obj_name === selectedId);\n            if (index !== -1) {\n                setFormData({...data.map_objs[index]});\n            }\n        }\n        return () => {\n            setRetailerTabsKey('');\n        }\n    }, [data, selectedId])\n\n    useEffect(() => {\n        if (formData.obj_type) {\n            handleChangeTab(formData.obj_type);\n        }\n        if (formData.layer_type) {\n            handleChangeTab(formData.layer_type);\n        }\n    }, [formData])\n\n    const handleDecrement = (key: 'size' | 'rotate' | 'offsetX' | 'offsetY') => () => {\n        if (Object.hasOwn(formData, key)) {\n            let value = parseInt(formData[key]);\n            value -= 1;\n            changeValue(key, value.toString());\n        }\n    }\n\n    const handleIncrement = (key: 'size' | 'rotate' | 'offsetX' | 'offsetY') => () => {\n        if (Object.hasOwn(formData, key)) {\n            let value = parseInt(formData[key]);\n            value += 1;\n            changeValue(key, value.toString());\n        }\n    }\n\n\n    return (\n        <>\n            <Tab.Container activeKey={mainTabKey}>\n                <Col>\n                    <Row>\n                        <Col sm=\"9\">\n                            <Nav\n                                variant=\"tabs\"\n                                className=\"flex-row\"\n                                // activeKey={mainTabKey}\n                                onSelect={handleChangeTab}\n                            >\n                                <Nav.Item>\n                                    <Nav.Link eventKey={\"retailer\"}>Retailer</Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link eventKey={\"special\"}>Special</Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link eventKey={\"custom\"}>Custom</Nav.Link>\n                                </Nav.Item>\n                            </Nav>\n                        </Col>\n                        <Col sm=\"3\" className=\"px-0\">\n                            {/* \n                //@ts-ignore */}\n                            <Button variant=\"danger\" className=\"mb-3\" onClick={handleReset}>Reset</Button>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col sm=\"12\">\n                            <Tab.Content>\n                                <Tab.Pane eventKey={\"retailer\"}>\n                    <Form.Select className=\"mb-3\" aria-label=\"Choose a Retailer\" value={formData.retailer_id?? ''} onChange={handleChangeRetailer}>\n                        <option value={''} disabled hidden>Choose a Retalier...</option>\n                        {data.retailers?.map((value: any) => <option key={`retailer-${value.id}`} value={value.id}>{value.retail_name} - {value.location}</option>)}\n                    </Form.Select>\n                    <Tabs\n                        variant=\"pills\"\n                        id=\"retail-tab-form\"\n                        activeKey={retailerTabsKey}\n                        onSelect={handleChangeTab}\n                    >\n                        <Tab eventKey=\"retail_name\" title=\"Retail Name\"></Tab>\n                        <Tab eventKey=\"retail_logo\" title=\"Retail Logo\"></Tab>\n                        <Tab eventKey=\"retail_text\" title=\"Custom Text\">\n                            <Form.Group className=\"m-3\">\n                                <Row className=\"align-items-center mb-3\">\n                                    <Col sm=\"2\">\n                                        <Form.Label className=\"mb-0\">Text</Form.Label>\n                                    </Col>\n                                    <Col sm=\"10\">\n                                        <Form.Control\n                                            as=\"textarea\"\n                                            name=\"custom_text\"\n                                            rows={3}\n                                            value={formData.custom_text}\n                                            onChange={handleChange}\n                                        />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Tab>\n\n                    </Tabs>\n                                </Tab.Pane>\n                                <Tab.Pane eventKey={\"special\"}>\n                    <Tabs\n                        variant=\"pills\"\n                        id=\"special-tab-form\"\n                        activeKey={specialTabsKey}\n                        onSelect={handleChangeTab}\n                     >\n                        <Tab eventKey=\"kiosk\" title=\"Kiosk\">\n                            <Form.Select className=\"m-3\" aria-label=\"Choose a Retailer\" value={formData.kiosk_id?? ''} onChange={handleChangeKiosk}>\n                                <option value={''} disabled hidden>Choose a Kiosk...</option>\n                                {data.kiosks?.map((value: any, index: number) => <option key={`kiosk-${value.id}-${index}`} value={value.id}>{value.title}</option>)}\n                            </Form.Select>\n                        </Tab>\n                        <Tab eventKey=\"amenity\" title=\"Amenity\">\n                            <Form.Select className=\"m-3\" aria-label=\"Choose a Retailer\" value={formData.value} onChange={handleChangeAmenity}>\n                                <option value={''} disabled hidden>Choose Amenity...</option>\n                                {Object.keys(data.amenities)?.map((value: string) => (\n                                    <option key={`amenity-${value}`} value={value}>{data.amenities[value].name}</option>\n                                ))}\n                            </Form.Select>\n                        </Tab>\n                    </Tabs>\n                                </Tab.Pane>\n                                <Tab.Pane eventKey={\"custom\"}>\n                    <Tabs\n                        variant=\"pills\"\n                        id=\"custom-tab-form\"\n                        activeKey={retailerTabsKey}\n                        onSelect={handleChangeTab}\n                     >\n                        <Tab eventKey=\"custom_text\" title=\"Text\">\n                            <Form.Group className=\"m-3\">\n                                <Row className=\"align-items-center mb-3\">\n                                    <Col sm=\"2\">\n                                        <Form.Label className=\"mb-0\">text</Form.Label>\n                                    </Col>\n                                    <Col sm=\"10\">\n                                        <Form.Control\n                                            name=\"custom_text\"\n                                            as=\"textarea\"\n                                            rows={3}\n                                            value={formData.custom_text}\n                                            onChange={handleChange}\n                                        />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Tab>\n                        <Tab eventKey=\"custom_image\" title=\"Image\">\n                            <Form.Group className=\"m-3\">\n                                <Row className=\"align-items-center mb-3\">\n                                    <Col sm=\"2\">\n                                        <Form.Label className=\"mb-0\">Image URL</Form.Label>\n                                    </Col>\n                                    <Col sm=\"10\">\n                                        <Form.Control\n                                            type=\"string\"\n                                            name=\"custom_image\"\n                                            value={formData.custom_image}\n                                            onChange={handleChange}\n                                        />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Tab>\n                    </Tabs>\n                                </Tab.Pane>\n                            </Tab.Content>\n                        </Col>\n                    </Row>\n                </Col>\n            </Tab.Container>\n            <Form.Group className=\"mb-3 mt-3\">\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"4\" className=\"d-flex justify-content-start\">\n                        <Form.Label className=\"mb-0\">Size</Form.Label>\n                    </Col>\n                    <Col sm=\"8\">\n                        <Row>\n                            <Col sm=\"4\" className=\"d-flex\">\n                                <Button onClick={handleDecrement('size')} variant=\"outline-dark\">-</Button>\n                            </Col>\n                            <Col sm=\"4\">\n                                <Form.Control\n                                    name=\"size\"\n                                    type=\"number\"\n                                    value={formData.size}\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                            <Col sm=\"4\" className=\"d-flex justify-content-end\">\n                                <Button onClick={handleIncrement('size')} variant=\"outline-dark\">+</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"4\" className=\"d-flex justify-content-start\">\n                        <Form.Label className=\"mb-0\">Rotate</Form.Label>\n                    </Col>\n                    <Col sm=\"8\">\n                        <Row>\n                            <Col sm=\"4\" className=\"d-flex\">\n                                <Button onClick={handleDecrement('rotate')} variant=\"outline-dark\">-</Button>\n                            </Col>\n                            <Col sm=\"4\">\n                                <Form.Control\n                                    name=\"rotate\"\n                                    type=\"number\"\n                                    value={rotation ?? formData.rotate}\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                            <Col sm=\"4\" className=\"d-flex justify-content-end\">\n                                <Button onClick={handleIncrement('rotate')} variant=\"outline-dark\">+</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"4\" className=\"d-flex justify-content-start\">\n                        <Form.Label className=\"mb-0\">Offset X</Form.Label>\n                    </Col>\n                    <Col sm=\"8\">\n                        <Row>\n                            <Col sm=\"4\" className=\"d-flex\">\n                                <Button onClick={handleDecrement('offsetX')} variant=\"outline-dark\">-</Button>\n                            </Col>\n                            <Col sm=\"4\">\n\n                                <Form.Control\n                                    name=\"offsetX\"\n                                    type=\"number\"\n                                    value={formData.offsetX}\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                            <Col sm=\"4\" className=\"d-flex justify-content-end\">\n                                <Button onClick={handleIncrement('offsetX')} variant=\"outline-dark\">+</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"4\" className=\"d-flex justify-content-start\">\n                        <Form.Label className=\"mb-0\">Offset Y</Form.Label>\n                    </Col>\n                    <Col sm=\"8\">\n                        <Row>\n                            <Col sm=\"4\" className=\"d-flex\">\n                                <Button onClick={handleDecrement('offsetY')} variant=\"outline-dark\">-</Button>\n                            </Col>\n                            <Col sm=\"4\">\n                                <Form.Control\n                                    name=\"offsetY\"\n                                    type=\"number\"\n                                    value={formData.offsetY}\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                            <Col sm=\"4\" className=\"d-flex justify-content-end\">\n                                <Button onClick={handleIncrement('offsetY')} variant=\"outline-dark\">+</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Row className=\"align-items-center mb-3\">\n                    <Col sm=\"3\" className=\"d-flex justify-content-start\">\n                        <Form.Label className=\"mb-0\">BG Color</Form.Label>\n                    </Col>\n                    <Col sm=\"3\" className=\"p-0\">\n                        <Form.Control\n                            name=\"bg_color\"\n                            type=\"string\"\n                            value={getFormatedColor(formData.bg_color)}\n                            onChange={handleChange}\n                        />\n                    </Col>\n                    <Col sm=\"2\">\n                        <Form.Control\n                            type=\"color\"\n                            name=\"bg_color\"\n                            value={getFormatedColor(formData.bg_color)}\n                            onChange={handleChange}\n                        />\n                    </Col>\n                    <Col sm=\"4\">\n                        <Row>\n                            <Col sm=\"3\">\n                                <input\n                                        name=\"transparent\"\n                                        id=\"transparent\"\n                                        type=\"checkbox\"\n                                        value={formData.transparent}\n                                        onChange={handleChange}\n                                ></input>\n                                    {/* <Form.Control\n                                        name=\"transparent\"\n                                        type=\"checkbox\"\n                                        value={formData.transparent}\n                                        onChange={handleChange}\n                                    ></Form.Control> */}\n                            </Col>\n                            <Col sm=\"9\" className=\"p-0\">\n                                <Form.Label htmlFor=\"transparent\" className=\"mb-0\">Transparent</Form.Label>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                {['retail_name', 'custom_text', 'retail_text'].includes(formData.layer_type) && \n                    <Row className=\"align-items-center mb-3\">\n                        <Col sm=\"4\" className=\"d-flex justify-content-start\">\n                            <Form.Label className=\"mb-0\">Text Color</Form.Label>\n                        </Col>\n                        <Col sm=\"5\">\n                            <Form.Control\n                                type=\"string\"\n                                name=\"text_color\"\n                                value={getFormatedColor(formData.text_color)}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                        <Col sm=\"3\">\n                            <Form.Control\n                                name=\"text_color\"\n                                type=\"color\"\n                                value={getFormatedColor(formData.text_color)}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                    </Row>\n                }\n                {['kiosk', 'amenity'].includes(formData.layer_type) && \n                    <Row className=\"align-items-center mb-3\">\n                        <Col sm=\"3\">\n                            <Form.Label className=\"mb-0\">Icon Color</Form.Label>\n                        </Col>\n                        <Col sm=\"6\">\n                            <Form.Control\n                                type=\"string\"\n                                name=\"text_color\"\n                                value={getFormatedColor(formData.text_color)}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                        <Col sm=\"3\">\n                            <Form.Control\n                                type=\"color\"\n                                name=\"text_color\"\n                                value={getFormatedColor(formData.text_color)}\n                                onChange={handleChange}\n                            />\n                        </Col>\n                    </Row>\n                }\n            </Form.Group>\n        </>\n    );\n}\n\nexport default MapboxForm;\n","import React, {MouseEventHandler, useCallback, useEffect, useMemo, useRef, useState} from \"react\";\nimport {Canvas, ThreeEvent, useThree} from \"@react-three/fiber\";\nimport useMeshFloors, { textLogoNamePrefix } from \"Hooks/useMeshFloors\";\nimport {SceneProperties} from \"./SceneProperties\";\nimport {CameraProperties} from \"./CameraProperties\";\nimport {Mesh, Object3D} from \"three\";\nimport {IAmenitiesInteractiveList, IExtMesh, IJsonConfig, IMeshParams, TMapMode} from \"types\";\nimport {FloorsMap} from \"./FloorsMap\";\nimport {useMapit2Data} from \"../../useMapit2Data\";\nimport {MapIt2Response, MapObj} from \"../../mapitApiTypes\";\nimport { Stats } from '@react-three/drei';\nimport UIComponent from \"components/UIComponent\";\nimport {MapCenterMarker} from \"./MapCenterMarker\";\nimport { delete_route_path } from \"helpers/route.helpers\";\nimport { useMeshObjectContext } from \"contexts/MeshObjectContextProvider\";\nimport MapboxForm from \"components/MapboxForm/MapboxForm\";\nimport styles from '../../MapBox.module.css';\n\nconst amenitiesList: IAmenitiesInteractiveList[] = [\n    {\n        name: 'ATM',\n        type: 'atm',\n        imageUrl: '/assets/threejs/assets/img/amenities/atm.svg?color=FFFFFF',\n    },\n    {\n        name: 'Management',\n        type: 'management',\n        imageUrl: '/assets/threejs/assets/img/amenities/management.svg?color=FFFFFF',\n    },\n    {\n        name: 'Kids Area',\n        type: 'playarea',\n        imageUrl: '/assets/threejs/assets/img/amenities/playarea.svg?color=FFFFFF',\n    },\n    {\n        name: 'Restroom',\n        type: 'restroom',\n        imageUrl: '/assets/threejs/assets/img/amenities/restroom.svg?color=FFFFFF',\n    },\n    {\n        name: 'Elevator',\n        type: 'elevator',\n        imageUrl: '/assets/threejs/assets/img/amenities/elevator.svg?color=FFFFFF',\n    },\n    {\n        name: 'Security',\n        type: 'security',\n        imageUrl: '/assets/threejs/assets/img/amenities/security.svg?color=FFFFFF',\n    },\n] \n\ninterface ISceneComponentProps {\n    CENTER_ID?: string;\n    mapitData?: MapIt2Response;\n    config?: Partial<IJsonConfig>;\n    stats?: boolean;\n    selectedActiveObjectId: string;\n    setSelectedActiveObjectId: React.Dispatch<React.SetStateAction<string>>;\n    mode?: TMapMode;\n    onMapDataUpdate?: (data: MapObj[]) => void;\n}\n\nexport interface IZoomData {\n    direction: 'in' | 'out';\n}\n\nexport type TFormMapObjData = {\n  index: number,\n  data: MapObj,\n}\n\nconst SceneComponent = (params:ISceneComponentProps) => {\n    const data = useMapit2Data({ mapitData:params.mapitData, CENTER_ID: params.CENTER_ID });\n    const [selectedFloorIndex, setSelectedFloorIndex] = useState<number>(-1);\n    const [formMapObjData, setFormMapObjData] = useState<TFormMapObjData[]>([]);\n\n    const { selectedActiveObjectId, setSelectedActiveObjectId, onMapDataUpdate } = params;\n\n    const [amenityTargetType, setAmenityTargetType] = useState<string>('');\n    const [zoom, setZoom] = useState<IZoomData | null>(null);\n\n    const handleFloorChange = (floorIndex: number): MouseEventHandler<HTMLDivElement> => (e) => {\n        setSelectedFloorIndex(floorIndex);\n    }\n\n    const { mode } = params;\n\n    const meshFloors = useMeshFloors(data, params.config, mode);\n    const mapCenterMarkerRef = useRef(null);\n    const labelRef = useRef<HTMLDivElement>(null);\n    const [ currentHoveredObject, setCurrentHoveredObject ] = useState<Object3D | null>(null);\n    const meshObjectContext = useMeshObjectContext();\n\n    const config = meshFloors.config;\n    const floors = meshFloors.floors;\n    const meshParams = meshFloors.meshParams;\n\n\n    // if selectedActiveObjectId is not -1, then it is set to the DEFAULT_SELECTED_STORE\n    let activeObjectId = config?.DEFAULT_SELECTED_STORE ?? '';\n    if (selectedActiveObjectId) {\n        activeObjectId = selectedActiveObjectId;\n    } else if (amenityTargetType) {\n        activeObjectId = '';\n    }\n\n    const handleChangeMapitData = (index: number, newData: MapObj) => {\n        const itemIndex = formMapObjData.findIndex((item) => item.data.id === newData.id);\n\n        if (itemIndex !== -1) {\n            formMapObjData[itemIndex] = { index, data: { ...newData } };\n        } else {\n            formMapObjData.push({ index, data: { ...newData } })\n        }\n\n        setFormMapObjData([...formMapObjData]);\n    }\n\n  const getMapitData = (): MapIt2Response | null => {\n    if (data && data.map_objs) {\n      if (formMapObjData) {\n        formMapObjData.forEach((value) => {\n          const index = data.map_objs.findIndex((item: MapObj) => item.id === value.data.id);\n          if (index !== -1) {\n            data.map_objs[index] = { ...value.data };\n          }\n        })\n      }\n    }\n\n    return data;\n  }\n\n\n    useEffect(() => {\n        // console.log('useEffect currentHoveredObject', currentHoveredObject)\n        document.body.style.cursor = currentHoveredObject? 'pointer' : 'default';\n    }, [currentHoveredObject]);\n\n    const [ currKioskObj, currKioskFloorIndex, kioskError ]: [ Mesh | null, number, string ] = useMemo(() => {\n        if (!config) {\n            return [ null, 0, '' ] // not an error - loading/initializing\n        }\n        let kioskError = '';\n        let currKioskObj: Mesh | null = null;\n        let currKioskFloorIndex = 0;\n        if (config.KIOSKS && config.KIOSKS[config.KIOSK]) {\n            const kioskMapObjName = config.KIOSKS[config.KIOSK].map_obj_name;\n            const currKioskMeshParams = meshParams.flat().find(mesh => mesh.object_id === kioskMapObjName);\n            if (currKioskMeshParams) {\n                currKioskObj = currKioskMeshParams.mesh;\n                currKioskFloorIndex = currKioskMeshParams.floor_index;\n            }\n        } else {\n            if (config?.ROLE === 'WEBSITE') {\n                kioskError = \"This Kiosk is not assigned in MAP, so routes won't work. Please assign the Kiosk from Edit Map first.\";\n            }\n\n            console.error('Kiosk not found in config');\n            kioskError = 'Map initialization error';\n        }\n\n        return [ currKioskObj, currKioskFloorIndex, kioskError]\n    }, [config, meshParams]);\n\n    const resetHandle = () => {\n        setSelectedFloorIndex(currKioskFloorIndex);\n        setSelectedActiveObjectId('');\n    }\n\n    useEffect(() => {\n        const currKioskLogo = currKioskObj? meshFloors.storeLogos.flat().find(storeLogo => storeLogo.storeLogo.object_id === 'custom-layer-' + (currKioskObj as IExtMesh).object_id)?.storeLogo : null;\n        if (currKioskLogo && mode !== 'edit') {\n            currKioskLogo.userData.htmlContent = <MapCenterMarker />\n        }\n        return () => {\n            if (currKioskLogo) {\n                currKioskLogo.userData.htmlContent = null;\n            }\n        }\n    }, [meshFloors, currKioskObj]);\n\n    useEffect(() => {\n        if (meshFloors.meshParams && meshFloors.meshParams.length && selectedActiveObjectId && meshObjectContext?.SetMeshObject) {\n            const object = meshFloors.meshParams[selectedFloorIndex === -1? 0 : selectedFloorIndex].find((value) => value.object_id === selectedActiveObjectId);\n            if (object) {\n                //@ts-ignore\n                handleMeshObjectContext(object);\n            }\n            //@ts-ignore\n        }\n    }, [meshFloors])\n\n    useEffect(() => {\n        if (onMapDataUpdate) {\n            const exportData: MapObj[] = [];\n\n            formMapObjData.forEach((value) => {\n                exportData.push({...value.data});\n            })\n        }\n    }, [formMapObjData])\n\n    const handleMeshObjectContext = (object: IExtMesh) => {\n        if (meshObjectContext?.SetMeshObject) {\n            const textParams = meshFloors.textParams[selectedFloorIndex === -1? 0 : selectedFloorIndex]?.find(value => {\n                return value.textMesh.object_id === `${textLogoNamePrefix}${(object as IExtMesh).object_id}`\n            })\n\n            const logoParams = meshFloors.storeLogos[selectedFloorIndex === -1? 0 : selectedFloorIndex]?.find(value => {\n                return value.storeLogo.object_id === `${textLogoNamePrefix}${(object as IExtMesh).object_id}`\n            })\n\n            const result = [object as IExtMesh];\n\n            if (textParams) {\n                result.push(textParams.textMesh);\n            }\n\n            if (logoParams) {\n                result.push(logoParams.storeLogo)\n            }\n\n            meshObjectContext.SetMeshObject([...result]);\n        }\n    }\n\n    const onClick = useCallback((e: ThreeEvent<MouseEvent>) => {\n        e.stopPropagation();\n        // console.log('onClick', e.object)\n\n        const targetId = (e.object as IExtMesh).object_id;\n        handleMeshObjectContext(e.object as IExtMesh);\n        setSelectedActiveObjectId(targetId ?? '');\n        // console.log('set active object', targetId);\n        setAmenityTargetType('');\n    }, [selectedFloorIndex, meshFloors.meshParams.length]);\n\n    const handleAmenityClick = useCallback((type: string) => {\n        setAmenityTargetType(type)\n        setSelectedActiveObjectId('')\n    }, []);\n\n    const onCameraMove = useCallback((e: any) => {\n        if (!mapCenterMarkerRef || !mapCenterMarkerRef.current) {\n            return\n        }\n    }, []);\n\n    const onPointerEnter = useCallback((e: ThreeEvent<PointerEvent>) => {\n        e.stopPropagation();\n        // console.log('onPointerEnter', e.object)\n        if (!e.object.userData.storeName) {\n            // console.warn('onPointerEnter no storeName', e.object);\n            return;\n        }\n        setCurrentHoveredObject(e.object);\n    }, []);\n\n    const onPointerLeave = useCallback((e: ThreeEvent<PointerEvent>) => {\n        e.stopPropagation();\n        // console.log('onPointerLeave', e.object)\n        setCurrentHoveredObject(null);\n    }, []);\n\n    const onPointerMove = (e: ThreeEvent<PointerEvent>) => {\n        e.stopPropagation();\n        // console.log('onPointerMove', e.object)\n\n        if (labelRef && labelRef.current && e.object.userData.storeName && e.object.userData.storeName !== '') {\n            labelRef.current.style.top = `${e.offsetY - 65}px`;\n            labelRef.current.style.left = `${e.offsetX}px`;\n            labelRef.current.style.display = 'block';\n        }\n    }\n\n    if (!config || !meshFloors.meshParams.length) {\n        console.warn('LOADING MAP')\n        return <div>Loading Map</div>\n    }\n\n    if (kioskError) {\n        return <div>{kioskError}</div>\n    }\n\n    const currentFloorIndex = selectedFloorIndex > -1 ? selectedFloorIndex : currKioskFloorIndex;\n\n    if (!currKioskObj) {\n        console.error('NO KIOSK OBJECT FOUND');\n        return <div>Map initialization error</div>\n    }\n\n    // make sure that meshFloors conditionals are not null\n    const meshFloorsChecked: IMeshParams = meshFloors as IMeshParams;\n\n\n    let hoverObject = currentHoveredObject as IExtMesh\n    let hoverObjectId = '';\n    if (hoverObject && hoverObject.object_id) {\n        hoverObjectId = hoverObject.object_id;\n    }\n\n\n\n    return (\n        <>\n            {mode === 'edit' &&\n                <div className={styles['mapbox-admin-form']}>\n                    <MapboxForm\n                        floorIndex={currentFloorIndex}\n                        meshFloors={meshFloors}\n                        config={config}\n                        data={getMapitData()}\n                        setData={handleChangeMapitData}\n                        selectedId={selectedActiveObjectId}\n                        centerId={params.CENTER_ID as string}\n                    />\n                </div>\n            }\n            <div style={{ position: 'relative' }}>\n                <UIComponent accentColor={config.ACCENT_COLOR.getStyle()} floors={floors.length} selectedFloorIndex={currentFloorIndex} handleFloorChange={handleFloorChange} amenitiesList={amenitiesList} handleAmenityClick={handleAmenityClick} reset={resetHandle} zoomIn={() => setZoom({ direction: 'in' })} zoomOut={() => setZoom({ direction: 'out' })} mode={mode} />\n                <Canvas flat>\n                    {/* {params.stats? <Stats /> : null } */}\n                    <SceneProperties background={config.MAP_BACKGROUND_COLOR} />\n                    <CameraProperties near={1} far={10000} />\n                    {/*<axesHelper args={[5000]} />*/}\n\n                    <ambientLight intensity={1} color={'#c4c4c4'} />\n                    <directionalLight position={[0, 400, 0]} color={'#ffffff'} intensity={0.3} />\n                    <directionalLight position={[0, 0, 400]} color={'#c4c4c4'} intensity={0.2} />\n                    <directionalLight position={[0, 0, -400]} color={'#c4c4c4'} intensity={0.2} />\n                    <FloorsMap\n                        onCameraMove={onCameraMove}\n                        meshFloors={meshFloorsChecked}\n                        activeObjectId={activeObjectId}\n                        hoverObjectId={hoverObjectId}\n                        currKioskObj={currKioskObj}\n                        routeTargetId={activeObjectId}\n                        currentFloorIndex={currentFloorIndex}\n                        onPointerEnter={onPointerEnter}\n                        onPointerLeave={onPointerLeave}\n                        onPointerMove={onPointerMove}\n                        onClick={onClick}\n                        handleChangeFloor={handleFloorChange}\n                        amenityTargetType={amenityTargetType}\n                        escalatorNodes={meshFloors.escalator_nodes}\n                        zoom={zoom}\n                        mode={mode}\n                    />\n                </Canvas>\n                <div ref={labelRef}\n                    style={{\n                        position: 'absolute',\n                        padding: 10,\n                        background: '#ffffff',\n                        fontWeight: 600,\n                        color: '#000000',\n                        fontSize: 16,\n                        display: currentHoveredObject ? 'block' : 'none',\n                        top: 300,\n                        left: 400,\n                        opacity: .8,\n                    }}\n                >\n                    <div>\n                        {currentHoveredObject && currentHoveredObject.userData.storeName}\n                    </div>\n                </div>\n\n            </div>\n        </>\n    )\n};\n\n\n\nexport default SceneComponent;\n","import {useEffect, useState} from \"react\";\nimport {MapIt2Response} from \"./mapitApiTypes\";\n\ninterface useMapIt2DataProps {\n    CENTER_ID?: string;\n    mapitData?: MapIt2Response;\n}\n\n/**\n * This is a hook that fetches the mapit2 data from the server by CENTER_ID. or uses the data passed in.\n * @param CENTER_ID\n * @param mapitData\n */\nexport function useMapit2Data({ CENTER_ID, mapitData }: useMapIt2DataProps) {\n    const [data, setData] = useState<MapIt2Response|null>(null);\n\n    if (!CENTER_ID && !mapitData) {\n        console.error('useMapit2Data requires either CENTER_ID or mapitData');\n    }\n\n    useEffect(() => {\n        if (mapitData) {\n            setData(mapitData);\n            return;\n        }\n\n        if (!CENTER_ID) {\n            return;\n        }\n        // const url = '/data/mapit2/' + CENTER_ID + '.json';\n        const url = `https://test.mycenterdeals.com/api/mapit2/data?center=${CENTER_ID}&time=1693919608355`;\n        console.log('URL', url);\n\n        fetch(url)\n            .then(response => response.json())\n            .then((response: MapIt2Response) => {\n                setData({...response});\n            });\n\n    }, [CENTER_ID, mapitData]);\n\n    return data;\n}","import React, { useEffect, useState } from 'react';\nimport styles from './MapBox.module.css';\nimport SceneComponent from './components/SceneComponent/SceneComponent';\nimport {isMapIt2Response, MapIt2Response, MapObj} from \"./mapitApiTypes\";\nimport {IJsonConfig, TMapMode} from \"./types\";\nimport MeshObjectContextProvider from 'contexts/MeshObjectContextProvider';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport interface IAppProps {\n    CENTER_ID?: string;\n    mapitData?: unknown;\n    config?: Partial<IJsonConfig>;\n    stats?: boolean;\n    mode: TMapMode;\n}\n\nfunction MapBox({ CENTER_ID, mapitData, config, stats, mode }: IAppProps) {\n\n  const [selectedActiveObjectId, setSelectedActiveObjectId] = useState<string>('');\n  const [mapData, setMapData] = useState<any>(undefined);\n\n  useEffect(() => {\n    setMapData(mapitData);\n  }, [mapitData])\n\n  if (!mapitData && !CENTER_ID) {\n    console.error('Please provide either mapitData or CENTER_ID');\n    return null;\n  }\n  if (!CENTER_ID && !isMapIt2Response(mapitData)) {\n    console.error('mapitData is not a valid MapIt2Response');\n    return null;\n  }\n\n  return (\n    <MeshObjectContextProvider>\n      <div className={`${styles['mapbox-component']} ${mode !== 'edit'? styles.view : ''}`}>\n          <SceneComponent setSelectedActiveObjectId={setSelectedActiveObjectId} selectedActiveObjectId={selectedActiveObjectId} stats={stats} mapitData={mapData} CENTER_ID={CENTER_ID} config={config} mode={mode} />\n        <div className={styles.hide}>\n          <div id=\"map-special-svg-kiosk\">\n            <svg id=\"Layer_2\" data-name=\"Layer 2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 443.83 787.21\">\n              <path d=\"M451,587.7V8.14H7.14V589.5H111.43V730.89H71.27L38.59,763.58v31.78H416.36V764.93l-34.05-34H345.78V587.7ZM396.91,71.23v452.7H59.85V71.23Z\" transform=\"translate(-7.14 -8.14)\" fill=\"#222222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-atm\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 248.08 247.92\">\n              <path d=\"M122,257.27c-5.39-1-10.81-1.79-16.17-2.92C46.21,241.73,4.83,187.22,8.2,125.78,11.48,65.91,58.61,16.49,118.57,10.07a123.9,123.9,0,0,1,136.17,105.3c9.72,65.14-34,126.76-99,139.57-4.56.9-9.16,1.56-13.74,2.33Zm119.67-124c0-60.41-49.38-109.74-109.76-109.66S22.16,73.17,22.33,133.47A109.8,109.8,0,0,0,131.87,242.79C192.39,242.87,241.67,193.71,241.67,133.26Z\" transform=\"translate(-8.01 -9.35)\" fill=\"#222\" />\n              <path d=\"M142.74,209.12v17.52h-20V209.15c-16.35-2.42-30.49-8.31-39.37-22.87-5.29-8.67-7.81-18.17-8.61-28.56H104c.63,12.29,6,21.26,18.19,26a31.6,31.6,0,0,0,.46-3.66c0-11.83-.09-23.66.1-35.49,0-3-.93-4.26-3.86-5.14-6.36-1.9-12.81-3.81-18.77-6.68-24.22-11.66-29.61-43.54-10.9-63.07,7.4-7.74,16.65-12,27-14.3,1.94-.43,3.89-.79,6.33-1.28V38.43H142.7c0,4.09.19,8-.06,12-.21,3.14,1,4.26,4,4.9C161.3,58.39,173.8,65,180.47,79.1c2.7,5.7,3.82,12.15,5.84,18.89h-29c-2.52-5-4.56-9.87-7.34-14.25-1.3-2-4-3.16-6.85-5.24-.21,2.37-.43,3.76-.43,5.15,0,9,.2,18-.12,27-.15,4,1,5.68,5,6.81a120.71,120.71,0,0,1,19.6,7.27c29.52,14.08,31.09,54.34,5.8,72.94a60.33,60.33,0,0,1-25.11,10.52Zm.17-25.19c12.19-2.62,18.79-10.58,18-21.25-.58-8.26-7.84-14.53-18-15.4Zm-20.7-73.36V79.24c-8.71,1.32-14.1,7.27-14.38,15.45C107.55,103.15,112,108.2,122.21,110.57Z\" transform=\"translate(-8.01 -9.35)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-management\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 772.14 772.14\">\n              <path d=\"M12.61,738.09V58.45C28.35,20.11,40.21,12.29,82.7,12.29q319.74,0,639.46,0c41.63,0,62.59,21,62.59,62.6q0,319.73,0,639.46c0,42.33-7.5,53.72-46.15,70.07H59C35.27,777.22,19.94,761.66,12.61,738.09ZM400.34,61.77c-107.07,0-214.15.2-321.22-.26-12.89-.06-16.48,3.72-16.45,16.58q.55,319.68,0,639.36c0,12.41,2.94,17,16.27,16.93q319.68-.57,639.36,0c13.72,0,17.24-4.07,17.22-17.54q-.62-318.92.09-637.82c0-15.33-5.44-17.56-18.71-17.5C611.41,62,505.88,61.77,400.34,61.77Z\" transform=\"translate(-12.61 -12.29)\" fill=\"#222\" />\n              <path d=\"M262.69,306.22V651.6H192.15V166.28c30.74,0,61.46-.43,92.13.58,3.59.11,8.35,7.62,10.16,12.58Q342.59,311.11,390.09,443c1.68,4.63,3.75,9.13,6.67,16.17,25-70.19,49-137.75,73-205.3,9.13-25.64,18-51.37,27.69-76.8,1.63-4.29,6.68-10.23,10.3-10.34,28.14-.86,56.31-.47,85.28-.47V651.68h-70.4V306.9l-3.4-.66c-40.49,114.34-81,228.68-122.82,346.81L266,305.68Z\" transform=\"translate(-12.61 -12.29)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-playarea\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 670 772.73\">\n              <path d=\"M148.12,16l38.67,19.35c-1.08,3.94-1,5.26-1.61,5.69C146.81,68.47,142,105.72,153.25,148.13c4,15,10.9,27.7,8.38,46.15-3.85,28.24,2.4,58.08,5.93,87,7.47,61.24,15.95,122.37,24.06,183.54.22,1.7,1,3.32,5.06,4.77,0-6.85-.19-13.72,0-20.57q3.48-108,7-216.07c.49-15.79-.36-28.92-15.76-41.44-31.82-25.87-40.12-82.17-21.82-117.88,12.56-24.5,42.67-39.33,70-34.48,29.31,5.19,52.71,28.25,56.62,55.79,6.76,47.64-31.32,101.11-82.12,110.92-3.34,93-6.71,186.81-10.08,280.64l2,.51c8.65-25.2,17.71-50.26,25.86-75.62,12.44-38.67,20.78-45.73,62-45.4,25.4.2,51.66-5.14,75.71,8.28h0c10,20.57,21.3,40.63,29.58,61.87,8.15,20.92,13.22,43,22.11,64.6,0-22.62-1-45.31.36-67.85.9-14.63,2.86-30.09,8.56-43.36,15.8-36.77,49.23-48,85.26-51.6,53.64-5.4,91.8,16.8,118.08,67.53,4.33-48.86,8.76-95.83,12.54-142.85,1.47-18.36,2-36.83,1.8-55.24,0-4.14-3.6-9.86-7.24-12.11-38.47-23.86-61.06-77.9-50.47-122.24,7.85-32.89,45-57.77,80.43-53.93,34.42,3.72,64.49,35.87,65.08,69.56.87,50.08-32.63,99.45-78.55,111.54-8,98.49-16.21,198.19-24,297.92-1.24,15.88-.18,31.94-.77,47.89-.61,16.7-9.35,26.37-22.36,25.79-12.72-.56-20.17-9.65-20.3-25.88-.23-31.43,0-62.86-.16-94.28,0-5.15-.88-10.3-1.35-15.45l-4.94,0c-.44,5.2-1.27,10.39-1.28,15.59q-.09,149.16,0,298.31c0,6.16.36,12.61-1.28,18.41-3.27,11.61-9.78,20.13-23.7,20.13-13.76,0-20.67-8.24-24.18-19.78-1.75-5.74-1.29-12.24-1.29-18.4,0-55.13.07-110.26,0-165.39,0-5.75-1.1-11.49-1.68-17.24l-4.78-.27c-.79,5.38-2.25,10.76-2.26,16.14-.14,55.13,0,110.26,0,165.39,0,5.65.47,11.51-.8,16.92-3.05,13-9.77,22.67-25,22.54-12.68-.11-22.84-8.63-24.07-23.15-1.39-16.37-.93-32.92-.93-49.4q0-132.15.09-264.3c0-4.84-.76-9.69-1.16-14.53l-4.29-.33c-.77,4.87-2.16,9.73-2.2,14.6-.21,31.95.12,63.89-.24,95.83-.22,20.06-10.43,27-30.12,22.18-3.33-.82-7.64.15-10.89,1.63C405.73,577.45,398.51,575.6,393,561c-6.64-17.8-11.54-36.25-17.17-54.42-4.77-15.39-9.5-30.79-16.31-45.56,4.61,66.85,34.83,126.95,50.18,192.46H356c-.4,6.2-1,11.09-1,16-.07,30.92.13,61.83,0,92.74-.09,17.27-7.59,26.31-21.15,26.44s-21.28-8.67-21.46-26.19c-.33-30.39.05-60.8-.24-91.19-.05-5.32-1.93-10.62-3-15.92l-5.05.34c-.55,5.2-1.55,10.39-1.57,15.59-.14,27.31,0,54.62,0,81.92,0,4.12.27,8.27-.08,12.36-1.21,14.52-9.54,23.29-21.64,23.09s-20.85-9.05-21.09-23.66c-.51-30.9-.11-61.82-.09-92.74,0-5.55,0-11.1,0-18.3h-54.7c15.54-65.55,45.77-125.27,48.86-192.3a75.07,75.07,0,0,0-3.63,8.3c-9,29.51-17.65,59.11-26.79,88.56C220,569.27,213.22,577.24,200.64,574c-13.58-3.53-12.34-14-12.36-25.82-.06-33.23-.45-66.69-4.26-99.64-8.85-76.66-19.93-153.07-29.78-229.61-2.15-16.73-7.5-28.15-25.78-34.52-36.3-12.65-68.26-62.14-66.11-99.94,1.71-30,18.74-50.32,45.57-62.84,4.11-1.92,8.25-3.76,12.38-5.64Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n              <path d=\"M366.14,374.32c-10.69-26.47-3.48-53.71-3.51-80.64,0-5.71-.5-11.43-.77-17.14l-6.36-.05c0,7.36-.44,14.76.07,22.08,2.61,37.58-28.14,62.52-64,51.69-22.85-6.91-35.81-29.12-32.36-54.56.85-6.27.13-12.75.13-19.13l-7-.39c-.36,6.46-1.24,12.95-1,19.38.8,18.49,2.46,36.94,2.93,55.43.15,6-2.36,12-3.42,16.92-8-28.07-16.1-55.61-23.69-83.28-5.76-21-.8-30.34,20.52-31.34,21.48-1,43.14,2.79,64.75,3.44,7.73.23,15.57-3.86,23.32-3.71,15.13.3,30.72.3,45.19,4,11.92,3.08,10.3,15.27,7.59,25-4.42,15.82-10.3,31.26-14.23,47.19-3.64,14.79-5.54,30-8.21,45.07Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n              <path d=\"M573.81,274.55c-.08,26.89-23.52,50.26-50.32,50.17-27.05-.08-50.08-23.2-50.09-50.26,0-27.7,22.11-49.49,50.18-49.45S573.9,247,573.81,274.55Z\" transform=\"translate(-62.25 -15.96)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-restroom\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 732.38 614.5\">\n              <path d=\"M129.05,159.85a55.6,55.6,0,1,1,55.6,55.6,55.69,55.69,0,0,1-55.6-55.6m55.7,69.6h-1.5a133.5,133.5,0,0,0-132,134.6v58.6a27,27,0,0,0,54,0v-58.9a78.92,78.92,0,0,1,18.9-52.2v366a27,27,0,1,0,53.9,0V472.65h13.2v204.9a27,27,0,0,0,54,0V311.35a78.75,78.75,0,0,1,18.9,50.4v60.9a27,27,0,0,0,54,0v-61.2c-.8-73.1-60.5-132-133.4-132m596.5,182.1c-3.7-8-7.3-16.8-11.1-26.2-25.9-62.1-64.9-155.9-157.8-155.9s-132,93.9-157.7,156c-3.9,9.3-7.6,18.1-11.2,26.1a27,27,0,0,0,13.5,35.7,26.17,26.17,0,0,0,11.1,2.4,26.93,26.93,0,0,0,24.6-15.9c3.9-8.5,7.7-17.8,11.8-27.6,19.4-46.8,37.7-86.1,63.7-106.9l-70.4,174.4c-10,24.6,3.7,44.8,30.2,44.8h23.8v159.1a27,27,0,0,0,54,0V518.45h13.1v159.1a27,27,0,0,0,54,0V518.45h23.9c26.6,0,40.2-20.2,30.3-44.8l-70.4-174.4c26,20.7,44.2,60,63.7,106.8,4,9.8,8,19.2,11.8,27.7a26.93,26.93,0,0,0,24.6,15.9,27.41,27.41,0,0,0,11.1-2.4,27.12,27.12,0,0,0,13.4-35.7m-169-196.2a55.65,55.65,0,1,0-55.6-55.6,55.61,55.61,0,0,0,55.6,55.6m-228-125.3a14.08,14.08,0,0,0-14.1,14.1v580.7a14.1,14.1,0,1,0,28.2,0V104.15a14.08,14.08,0,0,0-14.1-14.1\" transform=\"translate(-51.24 -90.05)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-family-restroom\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 648 604.44\">\n              <path d=\"M483.26,183.08v386.3c0,20.7,3.14,35.6,25.57,35.6,19.63,0,26.32-13.86,26.32-35.6v-214h10.61v214c0,22.64,8.55,35.6,28.5,35.6,19.25,0,27.17-11.72,27.17-35.6V183.08h12.24V322.52c0,20.29,1.88,32.84,20.75,32.84,15.42,0,21.58-12.38,21.58-32.84V193.68c0-60.18-27-74.85-90.31-74.85H515.52c-64.65,0-86.88,18.41-86.88,77.21V322.52c0,19,2.67,32.84,21.83,32.84,16.63,0,20.56-12.55,20.56-32.84V183.08\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M97.85,188.81,35.17,411.09H90V575.35c0,17.9,5.81,31.18,23,31.18,16.19,0,23.49-12.42,23.49-31.18V411.09h12.67V575.35c0,17.9,5.81,31.18,23.07,31.18,16.95,0,23.64-13.28,23.64-31.18V411.09h58.29L189.45,188.81l12.84-3.06L242,312.43c3.55,11.83,13.09,18.19,22.2,18.19,10.86,0,18.07-8.11,18.07-18.63,0-1.41,0-5.55-2.25-13.3L243.65,175.23c-12.45-42-35.09-56.37-75.2-56.37H127c-53.8,0-70.43,17.68-79.58,51.26L8,313.13c0,9.38,8.71,18,18.63,18,8.54,0,16.13-5.55,20-17.4l39-127,12.22,2.09\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M444.91,518.05l-12.71-42.8c-5.36-18.12-17.21-46.31-57.5-46.31H329.6c-40.48,0-52.27,28.19-57.94,46.31l-12.45,42.8c-3.94,11.24-.6,19.51,7.92,22,8.11,2.4,14.93-2.71,18.68-12.67l7.7-29.5c1.82-7,5.6-10,11-8.29,5.18,2.26,5.41,7.32,3.34,14.3,0,0-10.85,72.51-3.74,92,6.62,17.86,32,16,48,15.37,16.16.61,40.9,2.49,47.75-15.37,6.82-19.51-4.18-92-4.18-92-1.23-7-1.23-12,3.94-14.3,5-1.72,8.74,1.25,11,8.29l7.85,29.5c3.15,10,10.42,15.07,18.53,12.67,8.29-2.5,11.59-10.77,7.92-22m-93-102.53A48.95,48.95,0,1,0,303,366.57a48.87,48.87,0,0,0,48.83,48.95\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M542.27,104.18c25.92,0,47.77-21.76,47.77-49a48.11,48.11,0,0,0-47.77-48c-26,0-47.59,21.39-47.59,48,0,27.24,21.6,49,47.59,49\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n              <path d=\"M145.37,104.18c26,0,46.33-21.76,46.33-47.57S171.35,8.66,145.37,8.66s-46.91,22-46.91,48,21,47.57,46.91,47.57\" transform=\"translate(-8 -7.22)\" fill=\"#262626\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-elevator\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 581.01 581\">\n              <path d=\"M480.87,597H125.13A112.77,112.77,0,0,1,12.5,484.34V128.66A112.77,112.77,0,0,1,125.13,16H480.87A112.77,112.77,0,0,1,593.5,128.66V484.34A112.77,112.77,0,0,1,480.87,597ZM125.13,42.39a86.35,86.35,0,0,0-86.24,86.27V484.34a86.35,86.35,0,0,0,86.24,86.27H480.87a86.35,86.35,0,0,0,86.24-86.27V128.66a86.35,86.35,0,0,0-86.24-86.27Z\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n              <path d=\"M428.75,273.7a24.08,24.08,0,0,1-17.18-7.13L303,158,194.42,266.57A24.3,24.3,0,0,1,160,232.21l143-143L446,232.21a24.31,24.31,0,0,1-17.2,41.49\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n              <path d=\"M303,538.3,160.05,395.35A24.31,24.31,0,0,1,194.44,361L303,469.53,411.56,361A24.31,24.31,0,1,1,446,395.35Z\" transform=\"translate(-12.5 -16)\" fill=\"#111\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-security\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 752.09 736.37\">\n              <path d=\"M28.78,317.59c2.71-4.8,5.33-9.66,8.15-14.4,11-18.36,31.75-27.56,53.13-23.59a49.46,49.46,0,0,1,40.14,39.7c.84,4.22,1.11,8.54,1.85,14.52h27.87c47.62,0,95.26-.18,142.88.32,10.18.1,15.63-2.52,18.93-12.91,19.06-60,38.82-119.85,58.39-179.92C350,120.53,340.16,99.37,349,73.44c6.33-18.56,27.67-33.56,47.89-33.67,21-.11,43.11,15.71,48.91,34.9,8.25,27.35-1.23,46.47-34.08,67.83,24.11,60,48.07,120.23,72.84,180.12,2,4.88,9.59,10.54,14.65,10.61,58.85.74,117.72.47,172.57.47,9.85-16.1,17.17-32.4,28.59-45,6.1-6.72,19.14-9.19,29.27-9.78,23.25-1.37,43.85,15.44,49.75,38,5.34,20.38-4.28,44.15-22.46,55.51-22.92,14.32-42.71,10.61-71.23-13.63-43,36.09-85.92,72.38-129.15,108.32-28,23.26-28.07,23-17.53,57.41q22.77,74.34,45.21,148.64c41.33,4,58.12,15.31,63.85,42.81,4.13,19.85-6.2,42.06-24.53,52.79-19.66,11.49-42.35,9.43-59.3-5.39-19.58-17.12-22.15-38.26-7.81-71.85-18.57-11.81-37.52-23.65-56.24-35.84-31.49-20.49-62.66-41.46-94.41-61.52-4.67-3-13.62-5-17.49-2.51-52.3,33.14-104,67.14-155.92,100.92,13.47,35.69,10.4,56.32-10.74,72.49-18,13.8-41,14.65-59.62,2.2s-26.72-35.64-20-58c7.12-23.77,26.9-35,63.15-34.91Q233,583.23,261.26,490.64L114.85,368c-17.47,11.79-38,19.64-57.78,5.48-11.49-8.21-19-22-28.29-33.28Z\" transform=\"translate(-28.78 -39.77)\" fill=\"#222\" />\n            </svg>\n          </div>\n          <div id=\"map-special-svg-dog-poop-station\">\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 752.1 736.4\">\n              <ellipse transform=\"matrix(0.9488 -0.3159 0.3159 0.9488 -30.6034 83.2258)\" fill=\"#222\" cx=\"241.4\" cy=\"136\" rx=\"85.6\" ry=\"135.9\" />\n              <ellipse transform=\"matrix(0.3917 -0.9201 0.9201 0.3917 178.2635 541.6781)\" fill=\"#222\" cx=\"498.8\" cy=\"136\" rx=\"135.8\" ry=\"85.7\" />\n              <ellipse transform=\"matrix(0.665 -0.7469 0.7469 0.665 -223.1496 187.105)\" fill=\"#222\" cx=\"97\" cy=\"342.3\" rx=\"74.4\" ry=\"109.6\" />\n              <ellipse transform=\"matrix(0.6879 -0.7258 0.7258 0.6879 -19.9475 571.058)\" fill=\"#222\" cx=\"654\" cy=\"308.7\" rx=\"111.1\" ry=\"75.7\" />\n              <path fill=\"#222\" d=\"M747.3,578.7c-9.7-67.6-60.5-124.7-119.6-134.8l7.4,1.7c-48.9-3.7-96.1-32.2-126.4-76.3\n\t\tc-14.6-21.3-25.8-46.4-44.8-62.7c-15.5-13.3-34.9-19.4-54.1-22.6c-30.9-5.1-63.1-3.3-92.3,9.5s-55,37.1-68.5,69.4\n\t\tc-7.4,17.8-11,37.5-18.6,55.2C209.1,468,160.4,494,129.8,537c-22.6,31.8-34.8,73.1-33.6,114.1c0.3,10.8,1.6,22,6.5,31.3\n\t\tc4.9,9.5,13.1,16.1,21.4,21.7c40.2,27.1,90.4,34.1,135.1,19c56.2-19,105.8-71.2,164.1-65c21,2.2,40.7,12,60.7,19.4\n\tc73,27,154.5,22,224.6-13.7c9.8-5,19.6-10.8,26.8-19.9C748.9,626.8,750.6,601.3,747.3,578.7z\"/>\n            </svg>\n          </div>\n        </div>\n      </div>\n    </MeshObjectContextProvider>\n\n  );\n}\n\nexport default MapBox;\n","// API mapit2 data types\n\nimport { Group, Texture, Vector3 } from \"three\";\n\nexport type IRetailer = {\n    id: string;\n    index?: string;\n    retail_name: string;\n    slug: string;\n    location: string;\n    retailer_phone: string;\n    retailer_description: string;\n    logo: string;\n    map_obj_name: string;\n};\n\nexport type MapObj = {\n    id: string | number;\n    center_id: string;\n    retailer_id: string;\n    kiosk_id: string | null;\n    map_obj_name: string;\n    obj_type: string;\n    layer_type: string;\n    value: string;\n    custom_text: string;\n    custom_image: string;\n    hover_text: string;\n    bg_color: string;\n    transparent: string | number;\n    text_color: string;\n    size: string;\n    rotate: string;\n    offsetX: string;\n    offsetY: string;\n    goToFloor?: Function;\n};\n\nexport type Floor = {\n    id: string;\n    svg_map?: string;\n    objsGroup?: Group;\n    interactiveObjs?: any[];\n    escalatorsObjs?: any[];\n    escalatorsNodes?: Record<any, any>;\n    escalatorMeshes?: any[];\n    route_points?: IRoutePoint[];\n    route_tube?: any;\n    route_texture?: Texture | null | undefined;\n    routeMeshes?: any[];\n    route_active?: boolean;\n    center_id?: string;\n    title: string;\n    svg?: string;\n    status?: string;\n    created_at?: string;\n};\n\nexport type CameraControlsState = {\n    camera: null;\n    controls: null;\n};\n\nexport type Settings = {\n    MAP_BACKGROUND_COLOR: string;\n    ACCENT_COLOR: string;\n    STORE_DEFAULT_COLOR: string;\n    BIG_STORE_DEFAULT_COLOR: string;\n    WALL_THICKNESS: string;\n    WALL_COLOR: string;\n    BOUNDARY_THICKNESS: string;\n    BOUNDARY_COLOR: string;\n    BASE_COLOR: string;\n    STORE_TEXT_COLOR: string;\n    OVERLAY_COLOR: string;\n    OVERLAY_OPACITY: string;\n    AMENITIES_NAV_BG_COLOR: string;\n    AMENITIES_NAV_ICON_COLOR: string;\n};\n\nexport type Kiosk = {\n    id: string;\n    title: string;\n    map_obj_name: string;\n};\n\nexport type Amenity = {\n    name: string;\n    image: string;\n};\n\nexport type MapIt2Response = {\n    retailers: IRetailer[];\n    map_objs: MapObj[];\n    floors: Floor[];\n    camera_controls_states: {\n        display_app: CameraControlsState;\n        desktop: CameraControlsState;\n        tablet: CameraControlsState;\n        mobile: CameraControlsState;\n    };\n    settings: Settings;\n    kiosks: Kiosk[];\n    amenities: Record<string, Amenity>;\n};\n\nexport type IRoutePoint = {\n    name: string;\n    node: Vector3;\n}\n\nexport function isMapIt2Response(obj: unknown): obj is MapIt2Response {\n    if (typeof obj !== 'object' || obj === null) return false;\n\n    const response = obj as Record<string, unknown>;\n\n    return (\n        Array.isArray(response.retailers) &&\n        Array.isArray(response.map_objs) &&\n        Array.isArray(response.floors) &&\n        typeof response.camera_controls_states === 'object' &&\n        response.camera_controls_states !== null &&\n        typeof (response.camera_controls_states as Record<string, unknown>).display_app === 'object' &&\n        typeof (response.camera_controls_states as Record<string, unknown>).desktop === 'object' &&\n        typeof (response.camera_controls_states as Record<string, unknown>).tablet === 'object' &&\n        typeof (response.camera_controls_states as Record<string, unknown>).mobile === 'object' &&\n        typeof response.settings === 'object' &&\n        Array.isArray(response.kiosks) &&\n        typeof response.amenities === 'object'\n    );\n}"],"names":["get_node_name","vertex","floor_index","floors","node_count","exists","node_name","currentFloor","undefined","route_points","i","length","x","node","y","name","next_node_name","getMeshParams","path","paths","config","nodeCount","allNodesFloor","pathFinderGraph","_path$userData","consolePrefix","mesh_type","layer_color","color","clone","extrude","z_index","mesh_visible","mesh_draw","mesh_transparent","line_thickness","WALL_THICKNESS","interactiveMesh","layer_name","userData","id","startsWith","BOUNDARY_COLOR","BOUNDARY_THICKNESS","STYLE","WALL_COLOR","BUILDING_BASE_COLOR","BASE_COLOR","STORE_DEFAULT_COLOR","BIG_STORE_DEFAULT_COLOR","subPaths","forEach","subPath","curves","console","warn","curve","_floors$floor_index$r","v1","v2","_get_node_name","node1_name","exists1","push","Vector3","_floors$floor_index$r2","_get_node_name2","node2_name","addNode","_extends","addLink","weight","distanceTo","allIndexedMapObjects","allIndexedRetailers","createGraph","hex_to_color","hex_code","Color","parseInt","getFormatedColor","replace","renderOrders","escalator","underlay","overlay","base","store","kiosk","wall","boundary","amenity","getRenderOrder","getMaterial","material_settings","side","DoubleSide","transparent","depthWrite","depthTest","opacity","OVERLAY_COLOR","OVERLAY_OPACITY","includes","ROLE","material","MeshLambertMaterial","colorDefault","bg_color","active","getMaterialAndGeometry","mode","_allIndexedMapObjects","geometry","shapes","toShapes","ExtrudeGeometry","depth","bevelEnabled","wall_geometries","type","shape_extend","shape1","thickness","wallShape","Shape","point1","point2","dir","sub","normalize","multiplyScalar","point1_center","add","point2_center","distance","point1_above","point1_below","point2_above","point2_below","moveTo","lineTo","getWallShape","wall_geometry","mergeGeometries","mergeBufferGeometries","ShapeGeometry","attributes","position","count","e","error","message","getGeometry","mesh","Mesh","object_id","visible","z","_mesh$mesh_type","storeName","layer_type","retailer_id","retail_name","custom_text","renderOrder","objsGroup","escalatorsNodes","escalatorsObjs","escalator_id","route_node_id","obj_type","value","interactiveObjs","create_route","from_mesh_object_id","to_mesh_object_id","scene","escalator_nodes","style","routePaths","routeCallback","_floor$objsGroup","floor","route_active","route_tube","dispose","remove","route_texture","escalatorMeshes","delete_route_path","from_obj","getObjectByProperty","to_obj","from_node_name","to_node_name","from_route_floor_index","to_route_floor_index","routeNodes","aStarPathFinder","find","get_route_nodes","ngraphPath","aStar","fromNode","toNode","link","data","debug","routeNodesEsclators","floor_routes","index","routeNode","_loop","_floors$allNodesFloor2","Object","keys","key","_floors$allNodesFloor","escalator_mesh","goToFloor","direction","floor_route","_floors$floor_index","_floors$floor_index2","routePath","create_route_path","routeMeshes","create_route_paths","_floors$floor_index$o","route_path","CurvePath","from_node","to_node","LineCurve3","TubeGeometry","BufferGeometry","copy","MeshBasicMaterial","map","get_route_texture","setDrawRange","ctx","document","createElement","getContext","canvas","width","height","fillStyle","fillRect","grd_width","grd","createLinearGradient","addColorStop","CanvasTexture","offset","colorSpace","loadFloors","results","GeometriesAndMaterials","result","pathIds","_result$paths$i","_getMeshParams","meshParams","findStoreNodeRaycaster","Raycaster","routeNodeIds","find_store_node_raycaster","role","Map","point","origin_point","target_direction","set","storeIntersects","intersectObjects","object","escalatorIntersects","escalatorNodes","assign_route_nodes_to_stores","size","has","get","_loop2","_floors$i$escalatorsN","_floors$escalatorsNod","_floors$i$escalatorsN2","_floors$escalatorsNod2","nodeIdFrom","nodeIdTo","linkFloorEscalators","graph","layer_text_logo_position_by_id","newMeshPos","mesh_size","newMesh","map_obj","offsetX","offsetY","obj_angle","rotate","rotateZ","Math","PI","scale","getImage","retailer","img","Image","crossOrigin","src","logo","svg_image_name","svg_color","text_color","svg_block","getElementById","svg_element","querySelector","querySelectorAll","svgColoredPart","setAttribute","svgData","XMLSerializer","serializeToString","window","btoa","unescape","encodeURIComponent","custom_image","processImage","afterOnload","onload","c","drawImage","texture","PlaneGeometry","getImageLogo","new_object_id","mesh_center_point","handleAsync","logoMesh","storeLogo","textLogoNamePrefix","defaultVars","MAP_BACKGROUND_COLOR","DEVICE","KIOSK","FLOORS","KIOSKS","CENTER_ID","STATS","DEBUG","ACCENT_COLOR","STORE_TEXT_COLOR","CAMERA_CONTROLS_STATES","ORIGINAL_CAMERA_POSITION","DEFAULT_CAMERA_POSITION","DEFAULT_CONTROLS_TARGET","DEFAULT_SELECTED_STORE","defaultMapObjValues","center_id","kiosk_id","map_obj_name","hover_text","allNonIndexedMapObjects","floorsData","BASE_URL","useMeshFloors","jsonConfig","_useState","useState","setMeshParams","_useState2","textParams","setTextParams","_useState3","storeLogos","setStoreLogos","_useState4","setPathFinderGraph","_useState5","setEscalatorNodes","_useState6","urls","setUrls","_useState7","processedConfig","setProcessedConfig","useLoader","SVGLoader","myFont","useFont","fontData","handleAsyncStoreLogos","useCallback","floorIndex","meshLogo","prevLogos","concat","useEffect","response","kiosks","retailers","map_objs","obj","clearObject","makeIndexedMapObjects","Group","lookAt","svg_map","svg","title","settings","parseFloat","CAMERA","camera_controls_states","CONTROLS","AMENITIES","amenities","RETAILERS","init","values","removeFromParent","textMesh","_loadFloors","TextsAndLogos","params","item","boundingBox","computeBoundingBox","getCenter","getSize","text","text_material","MeshPhongMaterial","text_geometry","TextGeometry","font","curveSegments","center","get_store_name_logo_geo","useMemo","SceneProperties","_useThree","useThree","background","CameraProperties","props","camera","cameraProjectionNeedsUpdate","far","near","fov","PerspectiveCamera","updateProjectionMatrix","easeInOutCubic","pow","RouteTube","_ref","animateRoute","useRef","_mesh$geometry$index","startTime","end","animateTube","performance","now","progress","drawRangeEnd","current","animateTexture","offsetVector","log","useFrame","_jsx","meshFloors","routeTube","activeObjectId","hoverObjectId","handleChangeFloor","onPointerMove","onPointerOver","onPointerEnter","onPointerOut","onPointerLeave","onClick","floorMeshParams","floorTextParams","floorStoreLogos","_jsxs","jsxs","children","interactive","hovered","MeshStandardMaterial","baseColor","newColor","r","g","b","getDarkerColor","jsx","uuid","htmlContent","Html","_params$geometry$boun","_params$goToFloor","_params$goToFloor2","boundingSphere","styles","escalator_elems","display","className","element","label","FloorsMap","currentFloorIndex","currKioskObj","routeTargetId","amenityTargetType","zoom","groupRef","routeTubes","setRouteTubes","mapControlRef","cameraFocus","accentColor","from","n","traverse","route","kiosk_obj_name","amenity_type","_to_obj_name","kiosk_obj","kiosk_node_name","to_obj_name","shortest_distance","mapObject","amenity_obj_name","amenity_obj","amenity_node_name","route_distance","getLink","get_nodes_distance","make_amenity_route","selectedFloorMeshParams","meshes","currentActiveObject","focus","objs","aspectRatio","Array","isArray","target","objsBoundingBox","reduce","box","union","Box3","obj_size","localToWorld","tanFOV","tan","new_y","max","new_z","angle","getCameraTiltPosition","get_camera_focus_object","aspect","targetDistance","animationStartTime","cameraTime","targetTime","vector","setLength","onCameraMove","rotation","ref","_Fragment","MapControls","onChange","maxPolarAngle","FloorButton","control_btn","isActive","FloorSelector","_ref2","selectedFloorIndex","handleFloorChange","floorButtons","btn_group","ATM","xmlns","viewBox","d","transform","fill","DogPoopStation","cx","cy","rx","ry","Elevator","FamilyRestroom","Management","PlayArea","Restroom","Security","AmenityIcon","Fragment","UIComponent","amenitiesList","zoomIn","zoomOut","reset","clearRoute","handleAmenityClick","preventDefault","Function","hide","backgroundColor","MapCenterMarker","kioskElementRef","React","svgClone","kioskElement","svgOrigin","cloneNode","appendChild","removeChild","MeshObjectContext","createContext","MeshObjectContextProvider","Provider","MeshObject","SetMeshObject","useMeshObjectContext","context","useContext","Error","mainTabs","retailerTabs","specialTabs","getDefaultMapOjbValues","centerId","MapboxForm","_formData$retailer_id","_data$retailers","_formData$kiosk_id","_data$kiosks","_Object$keys","setData","selectedId","mainTabKey","setMainTabKey","retailerTabsKey","setRetailerTabsKey","specialTabsKey","setSpecialTabsKey","formData","setFormData","timeoutRef","startTransition","useTransition","handleChangeTab","k","updateData","isTRetailerTabsKey","retailIndex","findIndex","makeTextGeometry","_context$MeshObject","makeImage","HTMLImageElement","_layer_text_logo_posi","changeValue","_context$MeshObject4","_obj$object_id","_getMaterial","clearInterval","setTimeout","setX","setY","meshType","handleChange","handleDecrement","hasOwn","toString","handleIncrement","Tab","Container","activeKey","Col","Row","sm","Nav","variant","onSelect","Item","Link","eventKey","Button","defaultValues","Content","Pane","Form","Select","disabled","hidden","location","Tabs","Label","Control","as","rows","_context$MeshObject2","_context$MeshObject3","htmlFor","imageUrl","SceneComponent","_config$DEFAULT_SELEC","mapitData","url","fetch","then","json","useMapit2Data","setSelectedFloorIndex","formMapObjData","setFormMapObjData","selectedActiveObjectId","setSelectedActiveObjectId","onMapDataUpdate","setAmenityTargetType","setZoom","labelRef","currentHoveredObject","setCurrentHoveredObject","meshObjectContext","body","cursor","_useMemo","kioskError","currKioskFloorIndex","kioskMapObjName","currKioskMeshParams","flat","_meshFloors$storeLogo","currKioskLogo","handleMeshObjectContext","exportData","_meshFloors$textParam","_meshFloors$storeLogo2","logoParams","stopPropagation","targetId","meshFloorsChecked","newData","itemIndex","getStyle","Canvas","intensity","top","left","padding","fontWeight","fontSize","stats","mapData","setMapData","display_app","desktop","tablet","mobile","isMapIt2Response","view"],"mappings":"u8CAOgBA,EAAcC,EAAiBC,EAAqBC,EAAsBC,GACtF,IAAIC,GAAS,EACTC,EAAmB,mBACjBC,EAAeJ,EAAOD,GAC5B,QAAkCM,IAA9BD,EAAaE,aAA4B,CACzC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAaE,aAAaE,OAAQD,IAClD,GAAIT,EAAOW,GAAKL,EAAaE,aAAaC,GAAGG,KAAKD,GAAKX,EAAOa,GAAKP,EAAaE,aAAaC,GAAGG,KAAKC,EAAG,CACpGT,GAAS,EACTC,EAAYC,EAAaE,aAAaC,GAAGK,KACzC,KACH,CAEAV,IACDC,EAjBI,SAAeF,GAC3B,MAAO,QAAUA,CACrB,CAewBY,CAAeZ,GAGlC,CACD,MAAO,CAACE,EAAWD,EACvB,KCjBaY,EAAgB,SAACC,EAAsBC,EAAyBhB,EAAsBD,EAAqBkB,EAAiBC,EAAmBC,EAAuCC,GAA0B,IAAAC,EACnNC,EAAgB,aAClBC,EAAqB,KACrBC,EAA8BT,EAAKU,MAAMC,QACzCC,EAAU,EACVC,EAAU,EACVC,GAAe,EACfC,GAAY,EACZC,GAAmB,EACnBC,EAAiBf,EAAOgB,eACxBC,GAAkB,EAClBC,SAAUd,EAAGN,EAAKqB,iBAALf,EAAeX,KAAK2B,GAuHrC,OAtHkBhC,MAAd8B,EACIA,EAAWG,WAAW,aACtBf,EAAY,WACZC,EAAcP,EAAOsB,eACrBP,EAAiBf,EAAOuB,mBACJ,MAAhBvB,EAAOwB,QACPd,EAAU,IAEPQ,EAAWG,WAAW,SAC7Bf,EAAY,OACZC,EAAcP,EAAOyB,WACD,MAAhBzB,EAAOwB,QACPd,EAAU,MAEPQ,EAAWG,WAAW,eAC7Bf,EAAY,aACZC,EAAcP,EAAOyB,WACD,MAAhBzB,EAAOwB,QACPX,GAAY,IAETK,EAAWG,WAAW,kBAC7Bf,EAAY,gBACZC,EAAcP,EAAO0B,oBACD,MAAhB1B,EAAOwB,QACPd,EAAU,GACVC,GAAW,KAERO,EAAWG,WAAW,SAC7Bf,EAAY,OACZC,EAAcP,EAAO2B,YACdT,EAAWG,WAAW,UAC7Bf,EAAY,QACZC,EAAcP,EAAO4B,oBACD,MAAhB5B,EAAOwB,QACPd,EAAU,GAEVQ,EAAWG,WAAW,oBACtBJ,GAAkB,IAEfC,EAAWG,WAAW,cAC7Bf,EAAY,YACZC,EAAcP,EAAO6B,wBACD,MAAhB7B,EAAOwB,QACPd,EAAU,KAEPQ,EAAWG,WAAW,eAC7Bf,EAAY,aACZO,GAAY,EACZf,EAAKgC,SAASC,QAAQ,SAAAC,GACW,GAAzBA,EAAQC,OAAO1C,QACf2C,QAAQC,KAAK9B,EAAgB,8DAA+Da,GAGhGc,EAAQC,OAAOF,QAAQ,SAAAK,GAEnB,IAKcC,EALRC,EAAaF,EAAME,GAEnBC,EAAaH,EAAMG,GAEzBC,EAA8B5D,EAAc0D,EAAIxD,EAAaC,EAAQkB,GAA9DwC,EAAUD,EAAEE,GAAOF,EAAA,YAEtBH,EAAAtD,EAAOD,GAAaO,eAApBgD,EAAkCM,KAAK,CACnChD,KAAM8C,EACNhD,KAAM,IAAImD,EAAAA,QAAQN,EAAG9C,EAAG8C,EAAG5C,EAAG,KAElCQ,EAAcuC,GAAc3D,GAEhC,IACc+D,EADdC,EAA8BlE,EAAc2D,EAAIzD,EAAaC,EAAQkB,GAA9D8C,EAAUD,EAAA,GAASA,OAEU,OAAhCD,EAAA9D,EAAOD,GAAaO,eAApBwD,EAAkCF,KAAK,CACnChD,KAAMoD,EACNtD,KAAM,IAAImD,EAAOA,QAACL,EAAG/C,EAAG+C,EAAG7C,EAAG,KAElCQ,EAAc6C,GAAcjE,GAEhCqB,EAAgB6C,QAAQP,EAAUQ,EAAA,CAAA,EAAOX,IACzCnC,EAAgB6C,QAAQD,EAAUE,EAAOV,GAAAA,IAGzCpC,EAAgB+C,QAAQT,EAAYM,EAAY,CAAEI,OAAQb,EAAGc,WAAWb,KACxEpC,EAAgB+C,QAAQH,EAAYN,EAAY,CAAEU,OAAQb,EAAGc,WAAWb,IAC5E,EACJ,IACOrB,EAAWG,WAAW,eAC7Bf,EAAY,YACZM,GAAe,GACRM,EAAWG,WAAW,WAC7Bf,EAAY,QACZQ,GAAmB,GACZI,EAAWG,WAAW,aAC7Bf,EAAY,UACZQ,GAAmB,EACnBH,EAAU,GACHO,EAAWG,WAAW,WAC7Bf,EAAY,UACLY,EAAWG,WAAW,iBAC7Bf,EAAY,gBAEZI,EAAU,EAGdwB,QAAQC,KAAK9B,EAAgB,gCAAiCP,GAiB3D,CACHQ,UAAAA,EACAC,YAAAA,EACAG,QAAAA,EACAC,QAAAA,EACAC,aAAAA,EACAC,UAAAA,EACAC,iBAAAA,EACAC,eAAAA,EACAE,gBAAAA,EACAnB,KAAAA,EACAoB,WAAAA,EAER,EChJamC,EAAuB,CAAA,EACvBC,EAAsB,CAA+B,EACrDpD,EAAgB,CAA4B,EAG5CC,EAAkBoD,YCVf,SAAAC,EAAaC,GACzB,OAAO,IAAIC,EAAAA,MAA0B,IAApBD,EAASlE,OAAeoE,SAAS,KAAOF,EAAU,IAAMA,EAC7E,CAEa,IAAAG,EAAmB,SAACpD,GAC7B,OAAKA,EAAMjB,OAGJ,IAAMiB,EAAMqD,QADT,KACoB,IAHJ,EAI9B,ECAMC,EAAe,CACjB,aAAc,EACdC,UAAa,EACbC,SAAY,EACZC,QAAW,EACX,gBAAiB,EACjBC,KAAQ,EACRC,MAAS,EACT,YAAa,EACbC,MAAS,EACTC,KAAQ,EACR,aAAc,EACdC,SAAY,EACZC,QAAW,EACX,cAAe,GACf,aAAc,GACd,aAAc,GACd,gBAAiB,IAKf,SAAUC,EAAelE,GAC3B,OAAIA,cAA6ElB,IAA5B0E,EAAaxD,GACvDwD,EAAaxD,GAGjB,CACX,CAEO,IAAMmE,EAAc,SACvBzE,EACAM,EACAY,EACAX,EACAO,EACAuC,GAEA,IAAMqB,EAAoB,CACtBlE,MAAOD,aAAuBmD,EAAKA,MAAGnD,EAAciD,EAAajD,GACjEoE,KAAMC,EAAAA,WACNC,aAAa,EACbC,YAAY,EACZC,WAAW,EACXC,QAAS,GAEO,MAAhBhF,EAAOwB,OAA8B,QAAblB,GAAoC,MAAbA,GAC9B,YAAbA,IACAoE,EAAkBI,YAAa,EAC/BJ,EAAkBK,WAAY,GAGrB,WAAbzE,IACAoE,EAAkBlE,MAAQR,EAAOiF,cACjCP,EAAkBM,QAAUhF,EAAOkF,iBAEnC5E,GAAa,CAAC,QAAS,YAAa,SAAS6E,SAAS7E,IAA6B,UAAfN,EAAOoF,MAAoB/B,EAAqBnC,IAA+D,GAAhDmC,EAAqBnC,GAAY2D,cACpKH,EAAkBM,QAAU,GAEhC,IAAIK,EAAW,IAAIC,EAAAA,oBAAoBZ,GAmBvC,OAlBIpE,GAAa,CAAC,QAAS,YAAa,QAAS,WAAW6E,SAAS7E,KAEjE+E,EAASE,aAAeF,EAAS7E,MAC7B6C,EAAqBnC,IAA4D,IAA7CmC,EAAqBnC,GAAYsE,WACrEH,EAAS7E,MAAQgD,EAAaH,EAAqBnC,GAAYsE,UAE/DH,EAASE,aAAeF,EAAS7E,OAGrC6E,EAASI,QAAS,GAEH,UAAfzF,EAAOoF,MAAoBtE,IAC3BuE,EAASL,QAAU,EACnBK,EAASR,aAAc,GAG3BQ,EAASR,YAAmC,IAArBQ,EAASL,QAEzBK,CACX,EAgFaK,EAAyB,SAAC1F,EAAiBM,EAAqBY,EAAoBX,EAA6BO,EAA2BF,EAAuBD,EAAiBD,EAAiBK,EAAwBhC,EAAaD,EAAqBuE,EAA8CC,EAAgDxD,EAAW6F,GAAgCC,IAAAA,EAE3YP,EAAWZ,EACbzE,EACAM,EACAY,EACAX,EACAO,EACAuC,GAGEwC,EAzFiB,SACvB7F,EACAM,EACAY,EACAR,EACAK,EACAjB,GAEA,IAcI+F,EAdExF,EAAgB,sBAElByF,EAAShG,EAAKiG,UAAS,GAa3B,GAAIzF,IATgB,MAAhBN,EAAOwB,MACU,CAAC,iBAED,CAAC,QAAS,YAAa,OAAQ,kBAMpB2D,SAAS7E,GACrCuF,EAAW,IAAIG,EAAeA,gBAACF,EAAQ,CACnCG,OAAQvF,EACRwF,cAAc,SAEf,GAAI5F,GARO,CAAC,OAAQ,aAAc,YAQL6E,SAAS7E,GAAY,CAErD,IAAI6F,EAAkB,GAEtBrG,EAAKgC,SAASC,QAAQ,SAAAC,GAElBA,EAAQC,OAAOF,QAAQ,SAAAK,GACnB,GAAkB,aAAdA,EAAMgE,KAAqB,CAC3B,IAAIC,EAAe,EACF,YAAb/F,IACA+F,EAAe,GAInB,IAAIC,WCpIKlE,EAAkBmE,EAAeF,QAAfE,IAAAA,IAAAA,EAAY,QAAe,IAAZF,IAAAA,EAAe,GACzE,IAAIG,EAAY,IAAIC,EAAOA,MACvBC,EAAS,IAAI9D,EAAOA,QAACR,EAAME,GAAG9C,EAAG4C,EAAME,GAAG5C,EAAG,GAC7CiH,EAAS,IAAI/D,EAAOA,QAACR,EAAMG,GAAG/C,EAAG4C,EAAMG,GAAG7C,EAAG,GAG7CkH,EAAMD,EAAOlG,QAAQoG,IAAIH,GAAQI,YAAYC,gBAAgBR,EAAYF,GACzEW,EAAgBN,EAAOjG,QAAQwG,IAAIL,GAEvCA,EAAMF,EAAOjG,QAAQoG,IAAIF,GAAQG,YAAYC,gBAAgBR,EAAYF,GACzE,IAAIa,EAAgBP,EAAOlG,QAAQwG,IAAIL,GAEnCO,EAAWT,EAAOtD,WAAW8D,GAE7BE,EAAe,CACf5H,EAAGwH,EAAcxH,GAAKmH,EAAOjH,EAAIsH,EAActH,GAAK6G,EAAYY,EAChEzH,EAAGsH,EAActH,GAAKsH,EAAcxH,EAAImH,EAAOnH,GAAK+G,EAAYY,GAEhEE,EAAe,CACf7H,EAAGwH,EAAcxH,GAAKmH,EAAOjH,EAAIsH,EAActH,GAAK6G,EAAYY,EAChEzH,EAAGsH,EAActH,GAAKsH,EAAcxH,EAAImH,EAAOnH,GAAK+G,EAAYY,GAGhEG,EAAe,CACf9H,EAAG0H,EAAc1H,GAAKkH,EAAOhH,EAAIwH,EAAcxH,GAAK6G,EAAYY,EAChEzH,EAAGwH,EAAcxH,GAAKwH,EAAc1H,EAAIkH,EAAOlH,GAAK+G,EAAYY,GAEhEI,EAAe,CACf/H,EAAG0H,EAAc1H,GAAKkH,EAAOhH,EAAIwH,EAAcxH,GAAK6G,EAAYY,EAChEzH,EAAGwH,EAAcxH,GAAKwH,EAAc1H,EAAIkH,EAAOlH,GAAK+G,EAAYY,GAapE,OAVAX,EAAUgB,OAAOJ,EAAa5H,EAAG4H,EAAa1H,GAC9C8G,EAAUiB,OAAOJ,EAAa7H,EAAG6H,EAAa3H,GAC9C8G,EAAUiB,OAAOF,EAAa/H,EAAG+H,EAAa7H,GAC9C8G,EAAUiB,OAAOH,EAAa9H,EAAG8H,EAAa5H,GAOvC8G,CACX,CDyFiCkB,CAAatF,EAAOrB,EAAgBsF,GAC7CsB,EAAgB,IAAI3B,EAAAA,gBAAgBM,EAAQ,CAC5CL,OAAQvF,EACRwF,cAAc,IAElBC,EAAgBxD,KAAKgF,EACxB,MACGzF,QAAQC,KAAK9B,EAAgB,wCAAyC+B,EAAMgE,KAAMlF,EAE1F,EACJ,GAE8B,GAA1BiF,EAAgB5G,OAEhBsG,EAAWM,EAAgB,GACpBA,EAAgB5G,OAAS,EAEhCsG,EAAW+B,EAAeC,sBAAC1B,GAE3BjE,QAAQC,KAAK9B,EAAgB,gCAAiCa,EAErE,KAAM,CACH2E,EAAW,IAAIiC,gBAAchC,GAC7B,IAE8C,GAAtCD,EAASkC,WAAWC,SAASC,OAC7B/F,QAAQC,KAAK9B,EAAgB,8BAA+Ba,EAAYpB,EAAKqB,SAAS1B,KAE7F,CAAC,MAAOyI,GACLhG,QAAQiG,MAAMD,EAAEE,QACnB,CACJ,CAED,OAAOvC,CACX,CAaqBwC,CACbrI,EACAM,EACAY,EACAR,EACAK,EACAjB,GAGEwI,EAAO,IAAIC,EAAAA,KAAK1C,EAAUR,GAChCiD,EAAKE,UAAYtH,EACjBoH,EAAKhI,UAAYA,EACjBgI,EAAKxJ,YAAcA,EACnBwJ,EAAKG,QAAU7H,EACf0H,EAAKN,SAASU,EAAI/H,EAClB,IAwBiFgI,EAxB7EC,EAAY,GAyDhB,MAxDI,CAAC,cAAe,cAAe,eAAezD,SAAyC,OAAjCS,EAACvC,EAAqBnC,SAAW,EAAhC0E,EAAkCiD,cACrFxF,EAAqBnC,GAAY2H,YAA6D,eAA/CxF,EAAqBnC,GAAY2H,YAA+BxF,EAAqBnC,GAAY4H,aAAexF,EAAoBD,EAAqBnC,GAAY4H,aACpNF,EAAYtF,EAAoBD,EAAqBnC,GAAY4H,aAAaC,YACvE,CAAC,cAAe,eAAe5D,SAAS9B,EAAqBnC,GAAY2H,cAChFD,EAAYvF,EAAqBnC,GAAY8H,cAGrDV,EAAKnH,SAASyH,UAAYA,EACN,MAAhB5I,EAAOwB,QACP8G,EAAKW,YAAczE,EAAelE,GAC9BY,GAAcA,EAAWiE,SAAS,cAClCmD,EAAKW,YAAczE,EAAe,cAI1CzF,EAAOD,GAAaoK,UAAUjC,IAAIqB,GAEjB,aAAbhI,IACAvB,EAAOD,GAAaqK,gBAAgBjI,GAAc,KAClDnC,EAAOD,GAAasK,eAAezG,KAAK2F,GACxCA,EAAKe,aAAevK,EAAc,IAAMoC,GAGxCZ,GAAa,CAAC,QAAS,YAAa,QAAS,WAAW6E,SAAS7E,KAEjEgI,EAAKgB,cAAgB,MAcD,UAAftJ,EAAOoF,MACQ,UAAfpF,EAAOoF,MAAiC,SAAb9E,GACZ,UAAfN,EAAOoF,MAAmC,gBAAfpF,EAAOoF,MAA0B/B,EAAqBnC,IAA4D,YAA7CmC,EAAqBnC,GAAYqI,UAA0E,MAAhDlG,EAAqBnC,GAAY4H,aAC7K,UAAf9I,EAAOoF,MAAmC,gBAAfpF,EAAOoF,MAA0B/B,EAAqBnC,IAA8D,WAA/CmC,EAAqBnC,GAAY2H,YAAqE,IAA1CxF,EAAqBnC,GAAYsI,OACpL,SAAT7D,GAAoBtC,EAAqBnC,KAA+D,YAA9CmC,EAAqBnC,GAAYqI,UAAwE,WAA9ClG,EAAqBnC,GAAYqI,WAC7I,SAAT5D,GAAmB,CAAC,QAAS,QAAS,WAAWR,gBAAQwD,EAACL,EAAKhI,WAASqI,EAAG,MAG5E5J,EAAOD,GAAa2K,gBAAgB9G,KAAK2F,IAS1C,CACHA,KAAAA,EACAzC,SAAAA,EACAR,SAAAA,EACAmD,UAAWtH,EACXZ,UAAAA,EACAxB,YAAAA,EACA2J,QAAS7H,EACTqI,YAAaX,EAAKW,YAI1B,EElPM5I,EAAgB,UA6CN,SAAAqJ,EAAaC,EAA6BC,EAA2BC,EAAc9K,EAAsB+K,EAA2B3J,EAAwB4J,GACxK,GAAIJ,IAAwBC,EACxB,MAAO,GAEX,IAAMI,EAMV,SAA4BL,EAA6BC,EAA2BC,EAAc3J,EAAuC4J,EAAyB/K,EAAsBoB,EAAwB4J,EAAeE,GAE3N,IAAMD,EAAa,aA9BWjL,GAC9B,IAAK,IAAID,EAAc,EAAGA,EAAcC,EAAOQ,OAAQT,IAAe,CAClE,IAG8BoL,EAHxBC,EAAQpL,EAAOD,GACrBqL,EAAMC,cAAe,EAEG,MAApBD,EAAME,aACNF,EAAME,WAAWxE,SAASyE,UAE1BH,EAAME,WAAWhF,SAASiF,UAC1BJ,OAAAA,EAAAC,EAAMjB,YAANgB,EAAiBK,OAAOJ,EAAME,aAGlCF,EAAME,gBAAajL,EACnB+K,EAAMK,cAAgB,KACtBL,EAAMM,gBAAkB,EAC3B,CACL,CAeIC,CAAkB3L,GAClB,IAAI4L,EAAWd,EAAMe,oBAAoB,YAAajB,GAClDkB,EAAShB,EAAMe,oBAAoB,YAAahB,GAChDkB,EAAiBH,EAASrB,cAC1ByB,EAAeF,EAAOvB,cAiB1B,GAHKwB,GAAgB5I,QAAQiG,MAAM9H,EAAgB,sCAAuCsJ,GACrFoB,GAAc7I,QAAQiG,MAAM9H,EAAgB,sCAAuCuJ,IAEnFkB,IAAmBC,EAAc,OAAOf,EAE7C,IAAMgB,EAAyBL,EAAS7L,YAClCmM,EAAuBJ,EAAO/L,YAU9BoM,EA0HV,SAAyBJ,EAAwBC,EAAsBI,GACnE,IAAID,EAAaC,EAAgBC,KAAKL,EAAcD,GACpD,OAAyB,GAArBI,EAAW3L,QACR2L,CACX,CA9HuBG,CAAgBP,EAAgBC,EAR3BO,EAAWC,MAAMpL,EAAiB,CACtDgH,SAAU,SAAUqE,EAAUC,EAAQC,GAClC,QAAIA,EAAKC,MAAaD,EAAKC,KAAKxI,MAEpC,EAEAyI,OAAO,KAGLC,EAAsB,GAC5B,IAAKX,EACD,MAAO,GAIX,IAFA,IAAMY,EAAe,GAEZC,EAAQ,EAAGA,EAAQb,EAAW3L,OAAQwM,IAAS,CACpD,IAAMC,EAAYd,EAAWa,GACzBD,EAAa5L,EAAc8L,EAAU5K,KACrC0K,EAAa5L,EAAc8L,EAAU5K,KAAKuB,KAAKqJ,GAE/CF,EAAa5L,EAAc8L,EAAU5K,KAAO,CAAC4K,GAG7ClC,EAAgB3E,SAAS6G,EAAU5K,KAAO0I,EAAgB3E,SAAS+F,EAAWa,EAAQ,GAAG3K,KAAO0I,EAAgB3E,SAAS+F,EAAWa,EAAQ,GAAG3K,KAG/IyK,EAAoBlJ,KAAKqJ,EAEhC,CACD,IADC,IAAAC,EAAA,WAEG,IAAMD,EAAYH,EAAoBE,GACtC,GACI7L,EAAc2L,EAAoB,GAAGzK,MAAQlB,EAAc2L,EAAoBA,EAAoBtM,OAAS,GAAG6B,KAC5G0I,EAAgB3E,SAAS6G,EAAU5K,IACxC,CACE,IAkBiC8K,EAlB3B7C,EAAe8C,OAAOC,KAAKrN,EAAOmB,EAAc8L,EAAU5K,KAAK+H,iBAA2BiC,KAAK,SAAAiB,GAAGC,IAAAA,gBAAIA,EAAAvN,EAAOmB,EAAc8L,EAAU5K,OAA/BkL,OAAmCA,EAAnCA,EAAqCnD,sBAArCmD,EAAAA,EAAuDD,MAASL,EAAU5K,EAAE,GAClLmL,EAA2B1C,EAAMe,oBAAoB,eAAgB1K,EAAc8L,EAAU5K,IAAM,IAAMiI,GAC3GmD,EAAY,KAEZtM,EAAc8L,EAAU5K,MAAQlB,EAAc2L,EAAoBE,EAAQ,GAAG3K,KAAO0I,EAAgB3E,SAAS0G,EAAoBE,EAAQ,GAAG3K,MAC5IoL,EAAY,CACRT,MAAO7L,EAAc2L,EAAoBE,EAAQ,GAAG3K,IACpDqL,UAAW,SAIfvM,EAAc8L,EAAU5K,MAAQlB,EAAc2L,EAAoBE,EAAQ,GAAG3K,KAAO0I,EAAgB3E,SAAS0G,EAAoBE,EAAQ,GAAG3K,MAC5IoL,EAAY,CACRT,MAAO7L,EAAc2L,EAAoBE,EAAQ,GAAG3K,IACpDqL,UAAW,aAIfD,GAAaD,IACbA,EAAeC,UAAYA,EAEQN,OAAnCA,EAAAnN,EAAOmB,EAAc8L,EAAU5K,OAAqB,OAAjB8K,EAAnCA,EAAqCzB,kBAArCyB,EAAsDvJ,KAAK4J,GAElE,CAEJ,EA/BQR,EAAQ,EAAGA,EAAQF,EAAoBtM,OAAQwM,IAAOE,IAgC/D,IAAK,IAAInN,EAAc,EAAGA,EAAcgN,EAAavM,OAAQT,IAAe,CACxE,IAAM4N,EAAcZ,EAAahN,GACjC,GAAI4N,GAAeA,EAAYnN,OAAS,EAAG,CACvC,IAK4CoN,EAIFC,EATpCC,EAAYC,EAAkBJ,EAAa5N,EAAaC,EAAQgL,GACtEC,EAAWlL,GAAe+N,EAE1B9N,EAAOD,GAAasL,cAAe,EACnCrL,EAAOD,GAAaiO,YAAc,CAAEF,GAChC/N,IAAgBkM,IAEG2B,OAAnBA,EAAA5N,EAAOD,KAAP6N,OAAmBA,EAAnBA,EAAqBI,cAArBJ,EAAkChK,KAAKgI,IAEvC7L,IAAgBmM,IAEG,OAAnB2B,EAAA7N,EAAOD,YAAY8N,EAAnBA,EAAqBG,cAArBH,EAAkCjK,KAAKkI,GAE9C,CACJ,CAOD,OAAOb,CACX,CAzHuBgD,CAAmBrD,EAAqBC,EAAmBC,EAAO3J,EAAe4J,EAAiB/K,EAAQoB,EAAiB4J,GAG9I,OAFKC,EAAWzK,QAAQ2C,QAAQC,KAAK9B,EAAgB,0CAA2CsJ,EAAqBC,GAE9GI,CACX,CAuHA,SAAS8C,EACL5B,EACApM,EACAC,EACAgL,OAAYkD,OAAP,IAALlD,IAAAA,EAAQ,MAIR,IAFA,IAAI5C,EAAW,EACX+F,EAAa,IAAIC,EAAoBA,UAChC7N,EAAI,EAAGA,EAAI4L,EAAW3L,OAAQD,IAAK,CACxC,IAAI8N,EAAY,IAAIxK,EAAAA,QAAQsI,EAAW5L,EAAI,GAAGqM,KAAKnM,EAAG0L,EAAW5L,EAAI,GAAGqM,KAAKjM,EAAG,GAC5E2N,EAAU,IAAIzK,EAAAA,QAAQsI,EAAW5L,GAAGqM,KAAKnM,EAAG0L,EAAW5L,GAAGqM,KAAKjM,EAAG,GACtEwN,EAAWjG,IAAI,IAAIqG,aAAWF,EAAWC,IACzClG,GAAYiG,EAAUhK,WAAWiK,EACpC,CACD,IAAIxH,EAAyB,IAAI0H,EAAAA,aAAaL,EAAY,IAAK,EAAG,GAElErH,GAAW,IAAI2H,EAAcA,gBAAGC,KAAK5H,GACrC,IAAIR,EAAW,IAAIqI,oBAAkB,CACjCC,IAAKC,EAAkBzG,EAAUrI,EAAaC,GAC9C8F,aAAa,EACbF,KAAMC,EAAAA,WACNG,WAAW,EACXD,YAAY,IAGZuF,EAAa,IAAI9B,EAAAA,KAAK1C,EAAUR,GAcpC,MAba,MAAT0E,IACAM,EAAWrC,SAASU,GAAK,IAE7B2B,EAAWrC,SAASU,EAAI,EACxB2B,EAAWpB,YAAczE,EAAe,cACxC6F,EAAW/J,UAAY,aAEvB+J,EAAWxE,SAASgI,aAAa,EAAGxD,EAAWxE,SAASkG,MAAM9D,OAG9DlJ,EAAOD,GAAauL,WAAaA,EACJ,OAA7B4C,EAAAlO,EAAOD,GAAaoK,YAApB+D,EAA+BhG,IAAIoD,GAE5BA,CACX,CAuCA,SAASuD,EAAkBzG,EAAkBrI,EAAqBC,GAC9D,IACI+O,EADSC,SAASC,cAAc,UACnBC,WAAW,MAC5B,GAAIH,EAAK,CACLA,EAAII,OAAOC,MAAQhH,EACnB2G,EAAII,OAAOE,OAAS,GAEpBN,EAAIO,UAAY,UAChBP,EAAIQ,SAAS,EAAG,EAAGnH,EAAU,IAE7B,IAAIoH,EAAY,GAAMpH,EAGlBoH,EAFkB,KAESA,EAFT,IAGlBA,EAFkB,MAESA,EAFT,KAItB,IAAIC,EAAMV,EAAIW,qBAAqB,EAAG,EAAGF,EAAW,GACpDC,EAAIE,aAAa,EAAG,WACpBF,EAAIE,aAAa,GAAK,SACtBF,EAAIE,aAAa,GAAK,SACtBF,EAAIE,aAAa,EAAG,WAEpBZ,EAAIO,UAAYG,EAChBV,EAAIQ,SAAS,GAAI,EAAGC,EAAW,IAEnC,IAAI/D,EAAgB,IAAImE,EAAaA,cAACb,EAAII,QAMtC,OALJ1D,EAAcoE,OAAOpP,EAAI,EACzBgL,EAAcqE,WAAa,OAEvB9P,EAAOD,GAAa0L,cAAgBA,EAE7BA,CACV,CAGL,CC3SA,IAAIxL,EAAa,EAED,SAAA8P,EAAW/P,EAAqBiB,EAAgB+O,EAAqBpJ,GACjF,IAAMqJ,EAA+C,GAG/ClF,EAA4B,GAmFlC,OAlFAiF,EAAQhN,QAAQ,SAACkN,EAAQnQ,GACrB,GAAImQ,EAAOlP,OAASkP,EAAOlP,MAAMR,OAAQ,CAErC,IADA,IAAM2P,EAAU,GACP5P,EAAI,EAAGA,EAAI2P,EAAOlP,MAAMR,OAAQD,IAAK,CAAA6P,IAAAA,EAC1CD,EAAQvM,KAAoB,OAAhBwM,EAACF,EAAOlP,MAAMT,KAAb6P,OAAeA,EAAfA,EAAiBhO,eAAjBgO,EAAAA,EAA2B1P,KAAK2B,GAChD,CAED,IADA,IAAMrB,EAAQkP,EAAOlP,MACZT,EAAI,EAAGA,EAAIS,EAAMR,OAAQD,IAAK,CACnC8P,IAAAA,EAYIvP,EACAE,EAAMT,GACNS,EACAhB,EACAD,EACAkB,IACEhB,EAEFkB,EACAC,GAGJ,GAlBaiP,EAATvO,UAkBW,CACX,IAAMwO,EAAa3J,EACf1F,EAzBKoP,EAAT9O,UAUU8O,EAAVlO,WATWkO,EAAX7O,YAKgB6O,EAAhBtO,iBAFYsO,EAAZxO,aADOwO,EAAPzO,QADOyO,EAAP1O,QAKc0O,EAAdrO,eA2BIhC,EACAD,EACAuE,EACAC,EA5BA8L,EAAJtP,KA8BI6F,GAECqJ,EAAuBlQ,KACxBkQ,EAAuBlQ,GAAe,IAG1CkQ,EAAuBlQ,GAAa6D,KAAK0M,EAC5C,CACJ,CACD,IAAMC,EAAyB,IAAIC,EAAAA,UAC7BC,WDwPd1Q,EACCC,EACAsE,EACAC,EACApD,EACA4J,EACA2F,EACAC,GAED,IAAMT,EAAS,IAAIU,IACbxQ,EAAeJ,EAAOD,GAoC5B,OAnCIK,GAAgBA,EAAaE,cAC7BF,EAAaE,aAAa0C,QAAQ,SAAA6N,GAC9B,IAAIC,EAAe,IAAIjN,EAAOA,QAACgN,EAAMnQ,KAAKD,EAAGoQ,EAAMnQ,KAAKC,GAAI,IACxDoQ,EAAmB,IAAIlN,EAAOA,QAAC,EAAG,EAAG,GACzC6M,EAA0BM,IAAIF,EAAcC,GAE5C,IAAIE,EAAkBP,EAA0BQ,iBAAiBlR,EAAOD,GAAa2K,iBACjFuG,EAAgBzQ,SAEhByQ,EAAgB,GAAGE,OAAO5G,cAAgBsG,EAAMjQ,KAEhDsP,EAAOc,IAAIC,EAAgB,GAAGE,OAAO1H,UAAWoH,EAAMjQ,OAW1D,IAAIwQ,EAAsBV,EAA0BQ,iBAAiBlR,EAAOD,GAAasK,gBACzF,GAAI+G,EAAoB5Q,OAAQ,CAC5B,IAEM6Q,EAAiBrR,EAAOD,GAAaqK,gBACvCiH,IACAA,EAJkBD,EAAoB,GAAGD,OAClB1H,WAGsBoH,EAAMjQ,KACnDO,EAAc0P,EAAMjQ,MAAQb,EAC5BgL,EAAgBnH,KAAKiN,EAAMjQ,MAElC,CACL,GAEGsP,CACX,CCvSiCoB,CACjBvR,EACAC,EACAsE,EACAC,EACApD,EACA4J,EACAwF,GAIJ,GAAIE,EAAac,MAAQtB,EAAuBlQ,GAAaS,OACzD,IAAK,IAAID,EAAI,EAAGA,EAAI0P,EAAuBlQ,GAAaS,OAAQD,IACxDkQ,EAAae,IAAIvB,EAAuBlQ,GAAaQ,GAAGgJ,KAAKE,aAC7DwG,EAAuBlQ,GAAaQ,GAAGgJ,KAAKgB,cAAgBkG,EAAagB,IAAIxB,EAAuBlQ,GAAaQ,GAAGgJ,KAAKE,aD2RjI,SAAoBzJ,EAAsBoB,GAEtD,GAAIpB,EAAOQ,OAAS,EAChB,IADmBkR,IAAAA,WAAAnR,GAKf6M,OAAOC,KAFkBrN,EAAOO,GAAG6J,iBAEKpH,QAAQ,SAAAgC,GAAY,IAAA2M,EAAAC,EACxD,GAA8C,OAAjB,OAAzBD,EAAA3R,EAAOO,GAAG6J,sBAAe,EAAzBuH,EAA4B3M,KAAkE,cAA5C4M,EAAA5R,EAAOO,EAAE,GAAG6J,wBAAZwH,EAA8B5M,IAAoB,CAAA6M,IAAAA,EAAAC,EAE9FC,EAAsC,OAA5BF,EAAG7R,EAAOO,GAAG6J,sBAAe,EAAzByH,EAA4B7M,GACzCgN,EAAsC,OAA9BF,EAAG9R,EAAOO,EAAE,GAAG6J,sBAAe,EAA3B0H,EAA8B9M,GAC3C+M,GAAcC,IACd5Q,EAAgB+C,QAAQ4N,EAAYC,EAAU,CAAE5N,OAAQ,IACxDhD,EAAgB+C,QAAQ6N,EAAUD,EAAY,CAAE3N,OAAQ,IAE/D,CAGL,EACH,EAjBO7D,EAAE,EAAGA,EAAKP,EAAOQ,OAAO,EAAID,IAAGmR,EAAAnR,EAmB/C,CC5SY0R,CAAoBjS,EAAQoB,EAE/B,CACL,GAEO,CAAE6O,uBAAAA,EAAwBiC,MAAO9Q,EAAiB2J,gBAAAA,EAC7D,CC3BM,SAAUoH,EAA+B1I,EAAmB2I,EAAqBC,EAAoBC,EAAehO,GACtH,IAAIiO,EAAUjO,EAAqBmF,GAE/B+I,EAAU5N,SAAS2N,EAAQC,SAC3BC,EAAU7N,SAAS2N,EAAQE,SAE/BL,EAAWzI,GAAK0I,EAAU1I,EAG1B2I,EAAQI,UAAY9N,SAAS2N,EAAQI,QAErCL,EAAQM,QAAQN,EAAQI,UAAYG,KAAKC,GAAK,KAE9CR,EAAQS,MAAMpS,IAAM,EAEpByR,EAAW3R,GAAK+R,EAChBJ,EAAWzR,GAAK8R,EAEhBH,EAAQrJ,SAAS+H,IAAIoB,EAAW3R,EAAG2R,EAAWzR,EAAGyR,EAAWzI,EAAI,EACpE,KAoFaqJ,EAAW,SAACT,EAA8BU,GAC/C,IAAMC,EAAM,IAAIC,MAEhB,GADAD,EAAIE,YAAc,YACM,YAApBb,EAAQ/H,SAAwB,CAChC,IAAIyI,EAIA,OADA9P,QAAQiG,MAAM,2BAFd8J,EAAIG,IAAMJ,EAASK,IAK1B,MAAUf,GAAoB,WAApBA,EAAQ/H,SAAuB,CAEtC,IAAI+I,EAAiBhB,EAAQ9H,MAE7B,GAD0B,SAAtB8H,EAAQzI,aAAuByJ,EAAiB,SAChDA,EAAgB,CAChB,IAAIC,EAAY,SACU,MAAtBjB,EAAQkB,aACRD,EAAYjB,EAAQkB,YAGxB,IAAMC,EAAY1E,SAAS2E,eAAe,mBAAqBJ,GAC/D,IAAKG,EAED,OADAvQ,QAAQiG,MAAM,sBAAuBmK,GAC9B,KAEX,IAAMK,EAAcF,EAAUG,cAAc,OAC5C,IAAKD,EAED,OADAzQ,QAAQiG,MAAM,wBAAyBmK,QAInBK,EAAYE,iBAAiB,UACrC9Q,QAAQ,SAAC+Q,GACrBA,EAAeC,aAAa,OAAQ,IAAMR,EAC9C,GAEA,IAAMS,GAAW,IAAIC,eAAiBC,kBAAkBP,GACxDV,EAAIG,IAAM,6BAA+Be,OAAOC,KAAKC,SAASC,mBAAmBN,IACpF,CAEJ,MACGf,EAAIG,IAAMd,EAAQiC,aAGtB,OAAOtB,CACf,EAEauB,EAAe,SAACvB,EAAuBX,EAA8BmC,GAC9ExB,EAAIyB,OAAS,WACT,IAAMC,EAAI5F,SAASC,cAAc,UAC3BF,EAAM6F,EAAE1F,WAAW,MAEzB0F,EAAExF,MAAQ8D,EAAI9D,MACdwF,EAAEvF,OAAS6D,EAAI7D,aAEfN,GAAAA,EAAK8F,UAAU3B,EAAK,EAAG,GAEvB,IAAI4B,EAAU,IAAIlF,EAAAA,cAAcgF,GAChCE,EAAQhF,WAAa,OAErB,IAAMhJ,EAAW,IAAIiO,EAAAA,cAAcxC,EAAQhB,KAAMgB,EAAQhB,KAAO2B,EAAI7D,OAAS6D,EAAI9D,OAC3E9I,EAAW,IAAIqI,EAAiBA,kBAAC,CACnCC,IAAKkG,EACLhP,aAAa,EACbF,KAAMC,EAAAA,WACNG,WAAW,EACXD,YAAY,IAGhB2O,EAAY5N,EAAUR,EAC1B,CACJ,EAEA,SAAS0O,EAAazQ,EAA0CgO,EAA8BhJ,EAAqBE,EAAmBwL,EAA8BC,EAA4B7C,EAAoBrS,EAAamV,GAE7N,IAAMjC,EAAMF,EAAST,EAAShO,EAAoBgO,EAAQxI,cAE9C,OAARmJ,GAEJuB,EAAavB,EAAKX,EAAS,SAACzL,EAAUR,OAAYsH,EACxCwH,EAAW,IAAI5L,EAAIA,KAAC1C,EAAUR,GAG9BvG,EAAcwJ,EAAKxJ,YACzBoS,EAA+B1I,EAAWyL,EAAmB7C,EAAW+C,EAAU9Q,GAClF8Q,EAAS3L,UAAYwL,EACrBG,EAASrV,YAAcA,EACvBqV,EAASlL,YAAczE,EAAe,eACnB,OAAnBmI,EAAA5N,EAAOD,KAAP6N,EAAqBzD,UAAUjC,IAAIkN,GAkBnCD,EAAY,CAACE,UAAWD,GAC5B,EAEJ,2i0GChQaE,EAAqB,gBAE5BrU,EAAMiD,EAAqBqR,CAAAA,ECHO,CACpCC,qBAAsB,GACtBnP,KAAM,UACNoP,OAAQ,cACRC,MAAO,IACPC,OAAQ,GACRC,OAAQ,CAAA,EACRC,UAAW,KACXC,MAAO,QACPrT,MAAO,KACPsT,MAAO,IACPC,aAAc,SACdnT,oBAAqB,SACrBC,wBAAyB,SACzBb,eAAgB,MAChBO,mBAAoB,MACpBE,WAAY,SACZH,eAAgB,SAChBK,WAAY,SACZD,oBAAqB,SACrBsT,iBAAkB,SAClB/P,cAAe,SACfC,gBAAiB,MACjB+P,uBAAwB,KACxBC,yBAA0B,KAC1BC,wBAAyB,KACzBC,wBAAyB,KACzBC,uBAAwB,MArD2B,CACnDjQ,KAAM,UACNoP,OAAQ,cACRI,UAAW,IAEXH,MAAO,MACPjT,MAAO,KACP6T,uBAAwB,GACxBP,MAAO,IAEPP,qBAAsB,SACtBQ,aAAc,SACdnT,oBAAqB,SACrBC,wBAAyB,SACzBb,eAAgB,MAChBS,WAAY,SACZF,mBAAoB,MACpBD,eAAgB,SAChBK,WAAY,SACZqT,iBAAkB,SAClB/P,cAAe,SACfC,gBAAiB,QDUfoQ,EAAsB,CAC3BlU,GAAI,KACJmU,UAAWvV,EAAO4U,UAClB9L,YAAa,KACb0M,SAAU,KACVC,aAAc,GACdlM,SAAU,WACVV,WAAY,cACZW,MAAO,GACPR,YAAa,GACbuK,aAAc,GACdmC,WAAY,GACZlQ,SAAU,GACVX,YAAa,EACb2N,WAAY,GACZlC,KAAM,EACNoB,OAAQ,EACRH,QAAS,EACTC,QAAS,GAINmE,EAAoC,GAIlCC,EAA0B,GAG1BC,EAAW,8CAgJXC,EAAgB,SAACnK,EAA2BoK,EAAmCpQ,GACjF,IAAAqQ,EAAoCC,EAAQA,SAAkB,IAAvD5G,EAAU2G,KAAEE,EAAaF,EAAA,GAChCG,EAAoCF,EAAQA,SAA+B,IAApEG,EAAUD,EAAEE,GAAAA,EAAaF,KAChCG,EAAoCL,EAAAA,SAAgC,IAA7DM,EAAUD,EAAA,GAAEE,EAAaF,KAChCG,EAA8CR,EAAAA,WAAvC9V,EAAesW,EAAEC,GAAAA,EAAkBD,EAC1C,GAAAE,EAA4CV,EAAQA,SAAW,IAAxD7F,EAAcuG,KAAEC,EAAiBD,EACxC,GAAAE,EAAwBZ,EAAQA,SAAW,IAApCa,EAAID,KAAEE,EAAOF,EAAA,GACpBG,EAAgDf,EAAAA,SAAuB,MAA/DgB,EAAeD,EAAEE,GAAAA,EAAkBF,KACvC/H,EAASkI,EAAAA,UAAUC,EAASA,UAAEN,GAI5BO,EAASC,UAAQC,GAOjBC,EAAwBC,EAAAA,YAAY,SAACC,GAAkB,OAAOC,SAAAA,GAChEnB,EAAc,SAACoB,GAQX,OANIA,EAAUF,GACVE,EAAUF,GAAY/U,KAAIM,EAAK0U,CAAAA,EAAAA,IAE/BC,EAAUF,GAAc,CAAAzU,EAAA,CAAA,EAAK0U,IAGjC,GAAAE,OAAWD,EACf,EACJ,CAAC,EAAG,IAqFJ,OAlFAE,EAAAA,UAAU,WACN,GAAKnM,EAAL,CAKA,IAAMsL,EAxJD,SAACjX,EAAqBjB,EAAqBgZ,GAEpD,IAAMpD,EAA+B,CAAA,EAMrC,IAAK,IAAI5I,KALTgM,EAASC,OAAOjW,QAAQ,SAACqC,GACrBuQ,EAAOvQ,EAAMhD,IAAMgD,CACvB,GAGkB2T,EAASE,UAAW,CAClC,IAAMjG,EAAW+F,EAASE,UAAUlM,GACpCzI,EAAoB0O,EAAS5Q,IAAM4Q,EACnC1O,EAAoB0O,EAAS5Q,IAAI2K,MAAQA,CAC5C,CAoED,OAnGJ,SAA+BmM,IANX,SAACC,GACpB,IAAK,IAAI9L,KAAO8L,SACRA,EAAI9L,EAEb,CAGC+L,CAAY/U,GAETsS,EAA0BuC,EAE1B,IAAK,IAAI5Y,EAAI,EAAGA,EAAI4Y,EAAS3Y,OAAQD,IAAK,CACtC,IAAM6Y,EAAMD,EAAS5Y,GAErB,IAAK,IAAI+M,KADThJ,EAAqB8U,EAAI1C,cAAgB0C,EACzB7C,EAAqB,CACjC,IAAM9L,EAAQ8L,EAAoBjJ,GAErB,MAAT7C,GAA6B,MAAZ2O,EAAI9L,KAErBhJ,EAAqB8U,EAAI1C,cAAcpJ,GAAO7C,EAErD,CACJ,CACL,CAmBI6O,CAAsBN,EAASG,UAE/BnZ,EAAOQ,OAAS,EAChBwY,EAAShZ,OAAOgD,QAAQ,SAACyH,EAAmBuC,GACxC,IAAM7C,EAAY,IAAIoP,EAAAA,MACtBpP,EAAU4I,MAAMpS,IAAM,EACtBwJ,EAAUqP,OAAO,EAAG,EAAG,GAEvBxZ,EAAO4D,KAAK,CACRvB,GAAIoI,EAAMpI,GAEVoX,QAAS3C,EAAWrM,EAAMiP,IAC1BC,MAAOlP,EAAMkP,MACbxP,UAAWA,EACXO,gBAAiB,GACjBL,eAAgB,GAChBD,gBAAiB,CAAE,EACnBsB,gBAAiB,GACjBpL,aAAc,GACdgL,gBAAYjL,EACZoL,cAAe,KACfuC,YAAa,GACb3C,cAAc,GAEtB,GAEiC,CAC7B2K,aAAcvR,EAAauU,EAASY,SAAS5D,aAAegD,EAASY,SAAS5D,aAAe/U,EAAO+U,cACpGpT,WAAY6B,EAAauU,EAASY,SAAShX,WAAaoW,EAASY,SAAShX,WAAa3B,EAAO2B,YAC9FE,wBAAyB2B,EAAauU,EAASY,SAAS9W,wBAA0BkW,EAASY,SAAS9W,wBAA0B7B,EAAO6B,yBACrIP,eAAgBkC,EAAauU,EAASY,SAASrX,eAAiByW,EAASY,SAASrX,eAAiBtB,EAAOsB,gBAC1GC,mBAAoBqX,WAAWb,EAASY,SAASpX,mBAAqBwW,EAASY,SAASpX,mBAAqBvB,EAAOuB,oBACpHG,oBAAqB8B,EAAaxD,EAAO0B,qBACzCmX,OAAQ,KACR5D,uBAAwB8C,EAASe,uBAAuB9Y,EAAOwU,QAC/DI,UAAW5U,EAAO4U,UAClBmE,SAAU,KACVjE,MAAO9U,EAAO8U,MACdK,wBAAyBnV,EAAOmV,wBAChCC,wBAAyBpV,EAAOoV,wBAChCC,uBAAwBrV,EAAOqV,uBAC/Bb,OAAQxU,EAAOwU,OACfC,MAAOzU,EAAOyU,MACdE,OAAQA,EACRJ,qBAAsB/Q,EAAauU,EAASY,SAASpE,qBAAuBwD,EAASY,SAASpE,qBAAuBvU,EAAOuU,sBAC5HW,yBAA0BlV,EAAOkV,yBACjCjQ,cAAezB,EAAauU,EAASY,SAAS1T,cAAgB8S,EAASY,SAAS1T,cAAgBjF,EAAOiF,eACvGC,gBAAiB0T,WAAWb,EAASY,SAASzT,gBAAkB6S,EAASY,SAASzT,gBAAkBlF,EAAOkF,iBAC3GE,KAAMpF,EAAOoF,KACbyP,MAAwB,SAAjB7U,EAAO6U,OAAqC,MAAjB7U,EAAO6U,MACzCjT,oBAAqB4B,EAAauU,EAASY,SAAS/W,oBAAsBmW,EAASY,SAAS/W,oBAAsB5B,EAAO4B,qBACzHoT,iBAAkBxR,EAAauU,EAASY,SAAS3D,iBAAmB+C,EAASY,SAAS3D,iBAAmBhV,EAAOgV,kBAChHxT,MAAOxB,EAAOwB,MACdC,WAAY+B,EAAauU,EAASY,SAASlX,WAAasW,EAASY,SAASlX,WAAazB,EAAOyB,YAC9FT,eAAgB4X,WAAWb,EAASY,SAAS3X,eAAiB+W,EAASY,SAAS3X,eAAiBhB,EAAOgB,gBACxG0T,OAAQqD,EAAShZ,OACjBia,UAAWjB,EAASkB,UACpBC,UAAWnB,EAASE,UAO5B,CAuEgCkB,CAAKpD,EAAU9S,EAAA,CAAA,EAAOjD,EAAW+V,GAAc/V,EAAQ4V,EAAYjK,GACrFyN,EAAmB,GAQ7B,OAPInC,EAAgBvC,OAAO3S,QAAQ,SAACyH,GAC5B4P,EAAOzW,KAAI,GAAIkT,EAAWrM,EAAMiP,IACpC,GAEAvB,EAAmBD,GACnBF,EAAOc,GAAAA,OAAKuB,IAET,WACC/J,GACAA,EAAWtN,QAAQ,SAAAoI,GACXA,GACAA,EAAMpI,QAAQ,SAAAyH,GACVA,EAAMlB,KAAK+Q,kBACf,EAER,GAGAjD,GACAA,EAAWrU,QAAQ,SAAAoI,GACXA,GACAA,EAAMpI,QAAQ,SAAAyH,GACVA,EAAM8P,SAASD,kBACnB,EAER,GAGA9C,GACAA,EAAWxU,QAAQ,SAAAoI,GACXA,GACAA,EAAMpI,QAAQ,SAAAyH,GACVA,EAAM4K,UAAUiF,kBACpB,EAER,GAGJnD,EAAc,IACdG,EAAc,IACdG,EAAc,GAClB,CAhDe,CAiDf,EAAG,CAAC7K,IAEJmM,YAAU,WACN,GAAKb,GAAoBH,EAAKvX,QAAW8X,GAAWpI,EAApD,CAEA,IAAAsK,EAA2DzK,EAAW8G,EAAYqB,EAAiBhI,EAAQtJ,GAAnGqJ,EAAsBuK,EAAtBvK,uBAAwBiC,EAAKsI,EAALtI,MAAOnH,EAAeyP,EAAfzP,gBACjC0P,EAA6C,GACnD7D,EAAwB5T,QAAQ,SAAC0X,GAE7B,IADA,IAAIL,EACK9Z,EAAI,EAAGA,EAAI0P,EAAuBzP,aAGxBH,KADfga,EAASpK,EAAuB1P,GAAG8L,KAAK,SAAAsO,GAAQ,OAAAA,EAAKlR,YAAciR,EAAOhE,YAAY,IAFvCnW,KAOnD,IAAK8Z,EAAQ,YACb,IAAMhD,WDjBsBvQ,EAA0B2C,EAAkB1J,EAAqBuV,EAA4BhR,EAAwCC,EAAuCtD,EAA0BqX,EAAatY,EAA0BmV,GACjR,IAAMF,EAAgBK,EAAqB7L,EAEvCyG,EAAS,KAKb,GAHKpJ,EAAS8T,aACV9T,EAAS+T,sBAER/T,EAAS8T,YACV,YAGJ,IAAMA,EAAc9T,EAAS8T,YAEvB1F,EAAoB,IAAIrR,EAASA,QACvC+W,EAAYE,UAAU5F,GAEtB,IAAM7C,EAAY,IAAIxO,EAASA,QAC/B+W,EAAYG,QAAQ1I,GAGpB,IAAME,EAAUjO,EAAqBmF,GAErC,GAAI,CAAC,cAAe,cAAe,eAAerD,SAASmM,EAAQzI,YAAa,CAC5E,IAAIkR,EAEAA,EADsB,eAAtBzI,EAAQzI,YAA+ByI,EAAQxI,aAAexF,EAAoBgO,EAAQxI,aACnFxF,EAAoBgO,EAAQxI,aAAaC,YACzC,CAAC,cAAe,eAAe5D,SAASmM,EAAQzI,YAChDyI,EAAQtI,YAER,GAGX,IAAIwJ,EAAaxS,EAAOgV,iBACE,MAAtB1D,EAAQkB,aACRA,EAAahP,EAAa8N,EAAQkB,aAGtC,IAOIwH,EAAgB,IAAIC,EAAiBA,kBAPf,CACtBzZ,MAAOgS,EACP3N,aAAa,EACbF,KAAMC,EAAUA,WAChBE,YAAY,EACZC,WAAW,IAGXmV,EAAgB,IAAIC,EAAAA,aAAaJ,EAAM,CACvCK,KAAM/C,EACN/G,KAAM3M,SAAS2N,EAAQhB,MACvBlC,OAAQ,IACRiM,cAAe,IAEnBH,EAAcI,SAEd,IAAMhB,EAAW,IAAI/Q,EAAIA,KAAC2R,EAAeF,GACzCV,EAASnY,SAASiZ,KAAO/C,EACzBnG,EAA+B1I,EAAWyL,EAAmB7C,EAAWkI,EAAUjW,GAClFiW,EAAS9Q,UAAYwL,EACrBsF,EAASxa,YAAcA,EACvBwa,EAASrQ,YAAczE,EAAe,cACX,gBAAvB8M,EAAQzI,aACRyQ,EAASnY,SAAS4H,YAAcgR,GAGpChb,EAAOD,GAAaoK,UAAUjC,IAAIqS,GAsBlCrK,EAAS,CAAEqK,SAAAA,EACd,MAGwB,eAAtBhI,EAAQzI,YACc,gBAAtByI,EAAQzI,YACa,WAApByI,EAAQ/H,UAA+C,SAAtB+H,EAAQzI,YAA6C,MAApByI,EAAQkE,UACtD,WAApBlE,EAAQ/H,UAA+C,WAAtB+H,EAAQzI,YAA4C,IAAjByI,EAAQ9H,QAE5EuK,EAAazQ,EAAqBgO,EAASzL,EAAU2C,EAAWwL,EAAeC,EAAmB7C,EAAWrS,EAAQmV,GAI1H,OAAOjF,CACV,CCnF+BsL,CAAwBnB,EAAOvT,SAAU4T,EAAOhE,aAAc2D,EAAOta,YAAauV,EAAoBhR,EAAsBC,EAAqBtD,EAAQqX,EAAQzB,EAAY4B,EAAsB4B,EAAOta,cACzNsX,IACKoD,EAAcJ,EAAOta,eACtB0a,EAAcJ,EAAOta,aAAe,IAExC0a,EAAcJ,EAAOta,aAAa6D,KAAKyT,GAE/C,GACAF,EAAclH,GACdqH,EAAcmD,GACd9C,EAAmBzF,GACnB2F,EAAiBiB,GAAAA,OAAK/N,GAvBtB,CAyBJ,EAAG,CAACmN,EAAiBH,EAAM7H,EAAQoI,IAE5BmD,EAAAA,QAAQ,WACX,MAAO,CACHxa,OAAQiX,EACR5H,WAAAA,EACA+G,WAAAA,EACAG,WAAAA,EACAxX,OAAQ6W,EACRzV,gBAAAA,EACA2J,gBAAiBsG,EAEzB,EAAG,CAAE6G,EAAiB5H,EAAY+G,EAAYG,EAAYX,EAAYzV,EAAiBiQ,GAC3F,EErUaqK,EAAkB,SAAChB,GAC5B,IAAAiB,EAAkBC,aAIlB,OAHIlB,EAAOmB,aADEF,EAAL7Q,MAEE+Q,WAAa,IAAIlX,EAAKA,MAAC+V,EAAOmB,aAEjC,IACX,ECTaC,EAAmB,SAACC,GAC7B,IAAQC,EAAWJ,EAAQA,WAAnBI,OAEFC,EAA8BF,EAAMG,KAAOH,EAAMI,MAAQJ,EAAMK,IAkBrE,OAjBIL,EAAMG,MACNF,EAAOE,IAAMH,EAAMG,KAEnBH,EAAMI,OACNH,EAAOG,KAAOJ,EAAMI,MAGpBH,aAAkBK,EAAiBA,mBAC/BN,EAAMK,MACNJ,EAAOI,IAAML,EAAMK,KAIvBH,GACAD,EAAOM,yBAGJ,IACX,WC1BgBC,EAAe9b,GAC3B,OAAOA,EAAI,GAAM,EAAIA,EAAIA,EAAIA,EAAI,EAAIoS,KAAK2J,KAAK,EAAI/b,EAAI,EAAG,GAAK,CACnE,CCQgB,SAAAgc,EAASC,GAAwB,IAAtBnT,EAAImT,EAAJnT,KACjBoT,EAAeC,EAAAA,OAAwB,MAkF7C,OAhFA7D,EAASA,UAAC,WAAK8D,IAAAA,EACX,GAAKtT,EAIL,GAAKsT,OAADA,EAACtT,EAAKzC,SAASkG,QAAd6P,EAAqB3T,OAK1B,GAAMK,EAAKjD,oBAAoBqI,oBAA/B,CAGA,GAAKpF,EAAKjD,SAASsI,IAAnB,CAKArF,EAAKzC,SAASgI,aAAa,EAAG,GAE9B,IAIcgO,EAJRC,EAAMxT,EAAKzC,SAASkG,MAAM9D,MAC1B8T,GAGQF,EAAYG,YAAYC,MAClB,WACR,IAAMC,GAAYF,YAAYC,MAAQJ,GAH3B,IAILM,EAAevK,KAAKzH,MAAMmR,EAAeY,GAAYJ,GAEvDI,GAAY,IACZR,EAAaU,QAAUC,GAG3B/T,EAAKzC,SAASgI,aAAa,EAAGsO,EAClC,GAIFE,EAAkB,WACpB,KAAM/T,EAAKjD,oBAAoBqI,qBAC3B,OACH,KACD,IAAKpF,EAAKjD,SAASsI,IACf,OACH,KACD,IAAM2O,EAAehU,EAAKjD,SAASsI,IAAIiB,OAEjCiN,EAAYG,YAAYC,MAC9B,OAAO,WACH,IAAMC,GAAYF,YAAYC,MAAQJ,GAH3B,IAGiD,EAC5DS,EAAa9c,GAAK8b,EAAeY,EACrC,CACJ,CAdwB,GAkBxB,OAFAR,EAAaU,QAAUL,EAEhB,WACHL,EAAaU,QAAU,KACvB9T,EAAK+Q,mBACD/Q,EAAKjD,oBAAoBqI,EAAiBA,mBAC1CpF,EAAKjD,SAASiF,UAEdhC,EAAKzC,UACLyC,EAAKzC,SAASyE,SAEtB,CAjDC,CAFGpI,QAAQqa,IAAI,mBAFf,OANGra,QAAQqa,IAAI,qCA6DpB,EAAG,CAACjU,IAEJkU,EAAAA,SAAS,WACL,GAAId,EAAaU,QACb,IACIV,EAAaU,SAChB,CAAC,MAAOlU,GACLhG,QAAQiG,MAAK,wBAAyBD,EAAEE,SACxCsT,EAAaU,QAAU,IAC1B,CAET,GAEK9T,EACEmU,EAAAA,IAAW,YAAA,CAAAvM,OAAQ5H,IADR,IAEtB,CCvEA,IAWaqH,EAAM,SAAC8J,GACT,IAAAiD,EAAsGjD,EAAtGiD,WAAYC,EAA0FlD,EAA1FkD,UAAWjF,EAA+E+B,EAA/E/B,WAAYkF,EAAmEnD,EAAnEmD,eAAgBC,EAAmDpD,EAAnDoD,cAAepU,EAAoCgR,EAApChR,QAASqU,EAA2BrD,EAA3BqD,kBAE1E9c,EAA8C0c,EAA9C1c,OACFmK,EAAQuS,EAAW3d,OAAO2Y,GAE1BqF,EAAgBtD,EAAOsD,cACvBC,EAAgBvD,EAAOwD,eACvBC,EAAezD,EAAO0D,eACtBC,EAAU3D,EAAO2D,QAEjBC,EARgDX,EAAtCrN,WAQmBqI,GAC7B4F,EATgDZ,EAA1BtG,WASOsB,GAC7B6F,EAVgDb,EAAdnG,WAULmB,GAC7BjN,EAAkBiS,EAAW3d,OAAO2Y,GAAYjN,gBAGtD,OACI+S,EAAAC,KAAA,QAAA,CAAOhV,QAASA,EAAOiV,SAAA,CAClBL,MAAAA,OAAAA,EAAAA,EAAiB1P,IAAI,SAAC8L,GACnB,IAAKA,EAAOnR,KAAM,OAAW,KAE7B,IAAMqV,EAAelV,GAAWgR,EAAOnR,KAAKG,SAAW0B,EAAMV,iBAAmBU,EAAMV,gBAAgBtE,SAASsU,EAAOnR,MAChHsV,EAAUf,GAAiBpD,EAAOnR,KAAKE,YAAcqU,EACrDpX,EAASmX,GAAkBnD,EAAOnR,KAAKE,YAAcoU,EAC3D,GAAIe,EAEA,IAAKlY,GAAUmY,KAAanE,EAAOnR,KAAKjD,oBAAoBC,EAAAA,qBAAuBmU,EAAOnR,KAAKjD,oBAAoBwY,EAAoBA,sBAAG,CAEtI,IAAMC,EAAYrY,EAASzF,EAAO+U,aAAe0E,EAAOnR,KAAKjD,SAASE,aAEtEkU,EAAOnR,KAAKjD,SAAS7E,MAAQod,EA1C9B,SAACpd,GACpB,GAAIA,EAAO,CACP,IAAIud,EAAQ9a,EAAQzC,CAAAA,EAAAA,GAIpB,OAHAud,EAASC,EAAc,IAAVxd,EAAMwd,EACnBD,EAASE,EAAc,IAAVzd,EAAMyd,EACnBF,EAASG,EAAc,IAAV1d,EAAM0d,EACZH,CACV,CACD,OACJ,IAAA,CAiC+DI,CAAeL,GAAaA,CACtE,MAEGrE,EAAOnR,KAAKjD,SAAS7E,MAAQiZ,EAAOnR,KAAKjD,SAASE,aAI1D,OAAOkX,EAAAA,IAAkC,QAAAxZ,EAAA,CAAA,EAAC0a,EAAa,CAACX,cAAAA,EAAeD,cAAAA,EAAeG,aAAAA,EAAcE,QAAAA,GAAY,CAAA,EAAE,CAC9GM,SAAAjB,EAAA2B,IAAA,YAAA,CAAWlO,OAAQuJ,EAAOnR,SADXmR,EAAOnR,KAAK+V,KAGnC,GACCf,MAAAA,OAAAA,EAAAA,EAAiB3P,IAAI,SAAC8L,GACnB,OAAKA,EAAOH,SACLmD,EAAAA,IAAsC,YAAA,CAAAvM,OAAQuJ,EAAOH,UAArCG,EAAOH,SAAS+E,MADV,IAGjC,SACCd,SAAAA,EAAiB5P,IAAI,SAAC8L,GACnB,OAAKA,EAAOrF,UAELqI,EAAAA,iBAAuCvM,OAAQuJ,EAAOrF,mBACxD3L,GAAWgR,EAAOrF,UAAUjT,SAASmd,YAAa7B,EAAA2B,IAACG,OAAI,CAAAb,SAAEjE,EAAOrF,UAAUjT,SAASmd,cAAsB,MADvF7E,EAAOrF,UAAUiK,UAG5C,GACC5T,MAAAA,OAAAA,EAAAA,EAAiBkD,IAAI,SAAC8L,GAAU+E,IAAAA,EAAAC,EAAAC,EAE7B,OAAOjC,EAAA2B,IAAA,YAAA,CAAiDlO,OAAQuJ,EAAMiE,SAClEjB,MAAC8B,EAAAA,KAAI,CAAC9V,SAAS,EAAOT,gBAAQwW,EAAE/E,EAAO5T,SAAS8Y,uBAAhBH,EAAgClE,OAC5DoD,SAAAjB,EAAA2B,IAAA,MAAA,CAAKhB,QAASN,UAAkB2B,EAAAhF,EAAOjN,kBAAPiS,EAAkB1S,QAAS,GAAI3K,GAAIwd,EAAOC,gBAAiB9U,MAAO,CAAE+U,QAASrW,EAAU,QAAU,QAC7HiV,SAAAjB,EAAA2B,IAAA,MAAA,CAAKW,UAAWH,EAAOI,QAAS5d,GAAIqY,EAAOjR,mBACvCgV,EAAAA,KAAK,MAAA,CAAAuB,UAAWH,EAAOK,MAAQvB,SAAA,CAAgB,OAAhBgB,EAAAjF,EAAOjN,gBAAS,EAAhBkS,EAAkBjS,UAAmB,WAAAgN,EAAOjN,UAAYiN,EAAOjN,UAAUT,MAAQ,EAAI,aAGzH,aAPyB0N,EAAOjR,UAS/C,GACAiU,EAAA2B,IAAC5C,EAAS,CAAClT,KAAMqU,MAG7B,ECzEauC,EAAY,SAACzF,GACtB,IAAQiD,EAAiIjD,EAAjIiD,WAAYyC,EAAqH1F,EAArH0F,kBAAmBC,EAAkG3F,EAAlG2F,aAAcC,EAAoF5F,EAApF4F,cAAeC,EAAqE7F,EAArE6F,kBAAmBxC,EAAkDrD,EAAlDqD,kBAAmB1M,EAA+BqJ,EAA/BrJ,eAAgBmP,EAAe9F,EAAf8F,KAAM5Z,EAAS8T,EAAT9T,KACxH5G,EAAW2d,EAAX3d,OAEFygB,EAAW7D,EAAAA,OAAc,MAC/B3F,EAAsCC,EAAQA,SAAS,IAA/CwJ,EAAUzJ,EAAE0J,GAAAA,EAAa1J,EACjC,GAAM2J,EAAgBhE,EAAAA,OAAY,MAClCjB,EAA0BC,EAAAA,WAAlBI,EAAML,EAANK,OAAQlR,EAAK6Q,EAAL7Q,MACV+V,EAAcjE,EAAMA,OAA+G,MAEnI5R,EAAQ2S,EAAW1c,OAAOwB,MAC1Bqe,EAAcnD,EAAW1c,OAAO+U,aAChC5U,EAAkBuc,EAAWvc,gBAC7B2f,EAAQV,EAA0B5W,UAExCsP,EAAAA,UAAU,WACN,IACQiI,IAAI,EACRlW,EAAMmW,SAAS,WAAA,QAAQD,CAAC,GAExB7d,QAAQ0J,MAAM,SAAUmU,EAEhC,EAAG,CAACtG,EAAOiD,WAAY7S,IAEvBiO,YAAU,WACN,GAAKwH,GAA8B,SAAT3Z,EAA1B,CAIA,IAAMsa,WVgVqBC,EAAwBC,EAAsBtW,EAAcxG,EAA8ClD,EAAwBpB,EAAsB+K,EAA2BC,GAAa,IAAAqW,EAC3NC,EAAsBxW,EAAMe,oBAAoB,YAAasV,GACjE,IAAKG,EAAW,MAAO,GACvB,IAAIC,EAAkBD,EAAU/W,cAE5BiX,EAAc,KAEdC,EAAoB,KAElBtI,EAAqB,GAC3B,IAAI,IAAI7L,KAAOhJ,EAAsB,CACjC,IAAMod,EAAYpd,EAAqBgJ,GAEV,YAAzBoU,EAAU5X,YACgB,YAAvB4X,EAAUlX,UACVkX,EAAUjX,QAAU2W,GAEvBjI,EAASvV,KAAK0J,EAErB,CA0BD,OAzBA6L,EAASnW,QAAQ,SAAC2e,EAA0B3U,GACxC,IAAI4U,EAAwB9W,EAAMe,oBAAoB,YAAa8V,GAEjEvV,EAAkBG,EAAWC,MAAMpL,EAAiB,CACtDgH,SAAU,SAAUqE,EAAUC,EAAQC,GAClC,QAAIA,EAAKC,MAAaD,EAAKC,KAAKxI,MAEpC,EAEAyI,OAAO,IAGX,GAAI+U,EAAa,CACb,IAAIC,EAAoBD,EAAYrX,cACpC,IACI,IAAIuX,EA3LhB,SAA4B/V,EAAwBC,EAAsBI,EAAkChL,GACxG,IAAIgH,EAAW,EAEX+D,EAAaC,EAAgBC,KAAKL,EAAcD,GACpD,GAAyB,GAArBI,EAAW3L,OAAa,SAE5B,IAAK,IAAID,EAAI,EAAGA,EAAI4L,EAAW3L,OAAQD,IAAK,CACxC,IAAIoM,EAAOvL,EAAgB2gB,QAAQ5V,EAAW5L,EAAI,GAAG8B,GAAI8J,EAAW5L,GAAG8B,IACvE+F,IAAgB,MAAJuE,OAAI,EAAJA,EAAMC,KAAKxI,SAAU,CACpC,CACD,OAAOgE,CACX,CAgLiC4Z,CAAmBT,MAAAA,EAAAA,EAAmB,GAAqB,MAAjBM,EAAAA,EAAqB,GAAIzV,EAAiBhL,GACrG0gB,GAAkBA,EAAiBL,IACnCA,EAAoBK,EACpBN,EAAcG,EAErB,CAAC,MAAMxY,GACJhG,QAAQC,sBAAsB+F,EAAEE,QACnC,CACJ,CACD,GACOsB,EAAawW,EAA2BE,OAAbA,EAAEG,GAAWH,EAAG,GAAIvW,EAAO9K,EAAQ+K,EAAiB3J,EAAiB4J,EAC3G,CU9XsBiX,CAAuB,MAAJlB,EAAAA,EAAO,GAAIR,EAAmBzV,EAAOxG,EAAsBlD,EAAiBpB,EAAQqR,EAAgBrG,GACrI2V,EAAcO,EAFb,MAFGP,EAAc,GAKtB,EAAG,CAACJ,EAAmBzV,EAAO1J,EAAiBpB,EAAQqR,EAAgBrG,EAAO+V,IAE9EhI,EAAAA,UAAU,WACN,GAAKgI,GAAST,GAA0B,SAAT1Z,EAA/B,CAIK2Z,GACDvgB,EAAOgD,QAAQ,SAAAoI,GACXA,EAAMM,gBAAkB,EAC5B,GAIJvI,QAAQqa,IAAI,2BAA4BuD,EAAMT,EAAelf,GAI7D,IAAM8f,EAAQvW,EAAaoW,EAAMT,EAAexV,EAAO9K,EAAQ2d,EAAW5S,gBAAiB3J,EAAiB4J,GAa5G7H,QAAQqa,IAAI,YAAa0D,GACzBP,EAAcO,EA1Bb,MAFGP,EAAc,GA8BtB,EAAG,CAAEI,EAAMT,EAAexV,EAAOkR,EAAQhc,EAAQ8gB,EAAa1f,EAAiB4J,EAAO2S,EAAW5S,kBAEjG,IAAMmX,EAA0BvE,EAAWrN,WAAW8P,GACtDrH,EAASA,UAAC,WAEN,GAAMiD,aAAkBK,EAAiBA,kBAAzC,CAKA,GAAK6F,EAAwB1hB,OAA7B,CAKA,IAAI2hB,EACJ,GAAIzB,EAAWN,GAAoB,CAC/B+B,EAAS,CAACzB,EAAWN,IAErB,IAAMgC,EAAsB9B,GAAiB4B,EAAwB7V,KAAK,SAAAsO,GAAI,OAAIA,EAAKpR,KAAKE,YAAc6W,CAAa,GACnH8B,GACAD,EAAOve,KAAKwe,EAAoB7Y,KAEvC,MACG4Y,EAASD,EAAwBtT,IAAI,SAAA+L,GAAI,OAAIA,EAAKpR,IAAI,GAG1D,IAEM8Y,EC1HR,SAAkCC,EAAalG,EAAYmG,EAAqBvX,GAOlF,GAHKwX,MAAMC,QAAQH,KACfA,EAAO,CAACA,KAEPA,EAAK9hB,OAEN,OADA2C,QAAQC,KAAK,8CACN,CAAE6F,SAAU,IAAIpF,EAAAA,QAAW6e,OAAQ,IAAI7e,EAAAA,SAGlD,IAAM8e,EAAkBL,EAAKM,OAAO,SAACC,EAAKzJ,GAOtC,OANKA,EAAItS,SAAS8T,aACdxB,EAAItS,SAAS+T,qBAEbzB,EAAItS,SAAS8T,aACbiI,EAAIC,MAAM1J,EAAItS,SAAS8T,aAEpBiI,CACX,EAAG,IAAIE,EAAMA,MAEPC,EAAW,IAAInf,EAASA,QAC9B8e,EAAgB5H,QAAQiI,GAExB,IAAMzH,EAAS,IAAI1X,EAAAA,QACnB8e,EAAgB7H,UAAUS,GAE1B+G,EAAK,GAAGW,aAAa1H,GAQrB,IAAI2H,EAASrQ,KAAKsQ,IAAItQ,KAAKC,GAAKsJ,EAAM,KAIlCgH,EAAQvQ,KAAKwQ,IAHH,IACGL,EAASviB,EAAe,GAAKyiB,EAASX,GADzC,IAEIS,EAASriB,EAAe,EAAIuiB,GAE1CI,EAcR,SAA+B3iB,EAAUqK,GACrC,IAAIuY,EAAQ,GAEZ,MADa,MAATvY,IAAeuY,EAAQ,MACpB5iB,EAAIkS,KAAKsQ,IAAII,EAAQ1Q,KAAKC,GAAK,IAC1C,CAlBgB0Q,CAAsBJ,EAAOpY,GAEnC0X,EAAS,IAAI7e,EAAAA,QAAQ0X,EAAO9a,EAAG,EAAG8a,EAAO5R,GAS/C,MAAO,CAACV,SARS,IAAIpF,EAAAA,QAAQ0X,EAAO9a,EAAG2iB,EAAO7H,EAAO5R,EAAI2Z,GAQvCZ,OAAAA,EACtB,CDqEsBe,CAAwBtB,EAAQnG,EAAOI,IAAKJ,EAAO0H,OAAiB,SAAT9c,EAAiB,KAAOoE,GAChF4V,EAAcvD,QAAQlM,OAAOlI,SAAS5E,WAAWge,EAAMpZ,UACxE,IAAM0a,EAAiB/C,EAAcvD,QAAQqF,OAAOre,WAAWge,EAAMK,QAerE,OAdA7B,EAAYxD,QAAOnZ,EAAA,CAAA,EACZme,EAAK,CACRuB,mBAAoB3G,YAAYC,MAChC2G,WAAYF,EARI,GAQuB,IACvCG,WAAYH,EARI,GAQuB,MAI3C/C,EAAcvD,QAAQqF,OAAOhU,KAAK2T,EAAMK,QACxC9B,EAAcvD,QAAQlM,OAAOlI,SAASyF,KAAK2T,EAAMpZ,UACjD2X,EAAcvD,QAAQlM,OAAOqI,OAAO6I,EAAMK,QAC1C9B,EAAcvD,QAAQlM,OAAOmL,yBAGtB,WACHuE,EAAYxD,QAAU,IAC1B,CAnCC,CAFGla,QAAQC,KAAK,yBAHhB,MAFGD,QAAQiG,MAAM,oCA2CtB,EAAG,CAAEsX,EAAYwB,EAAyB9B,EAAmBpV,EAAOgR,EAAQsE,IAE5EvH,EAAAA,UAAU,WACN,GAAQ,MAAJyH,GAAAA,EAAM9S,WAAakT,EAAcvD,QAAS,CAC1C,IAAM0G,EAAS,IAAIlgB,EAASA,QAC5BkgB,EAAOrV,KAAKkS,EAAcvD,QAAQqF,QAClCqB,EAAOjc,IAAI8Y,EAAcvD,QAAQlM,OAAOlI,UACxC8a,EAAOC,UAA4B,GAAlBD,EAAOvjB,UAED,OAAnBggB,EAAK9S,UACLsO,EAAO/S,SAASf,IAAI6b,GAEpB/H,EAAO/S,SAASnB,IAAIic,EAE3B,CACL,EAAG,CAACvD,IAEJ,IAAMyD,EAAevL,EAAAA,YAAY,SAACvP,GAG9B0X,EAAYxD,QAAU,IAC1B,EAAG,IAsBH,OAAQK,EAAAA,IAAA,QAAA,CAAOwG,SAAU,CAACrR,KAAKC,GAAK,EAAG,EAAG,GAAIqR,IAAK1D,EAAQ9B,SACvDF,EAAAA,KACI2F,EAAAA,SAAA,CAAAzF,SAAA,CAAAjB,EAAAA,IAAC2G,EAAAA,YAEG,CAAAC,SAAUL,EACVE,IAAKvD,EACL2D,cAAe1R,KAAKC,GAAK,IAG5B9S,GAAUA,EAAO4O,IAAI,SAAEnE,EAAmBuC,GACvC,OAAA0Q,EAAA2B,IAACzO,EAAG,CAEAlH,QAAS0W,IAAsBpT,EAC/B2L,WAAc3L,EACdqT,aAAc3F,EAAO2F,aACrBxC,eAAgBnD,EAAOmD,eACvBC,cAAepD,EAAOoD,cACtBH,WAAYA,EACZC,UAAW8C,GAAcA,EAAW1T,GACpCkR,eAAgBxD,EAAOwD,eACvBE,eAAgB1D,EAAO0D,eACvBJ,cAAetD,EAAOsD,cACtBK,QAAS3D,EAAO2D,QAChBN,kBAAmBA,EACnBnX,KAAMA,UAbMoG,EAcd,OAIlB,EEhNMwX,EAAc,SAAH9H,GACb,OAEIgB,EAAAA,IAAA,MAAA,CACIsC,UAAcH,EAAOzU,MAASyU,IAAAA,EAAO4E,YAAeC,KAJlChI,EAARgI,SAIqD7E,EAAOnZ,OAAS,IAAM2X,QAJ1D3B,EAAP2B,QAIiFM,SAJpEjC,EAAJ1B,MASzC,EAEM2J,GAAgB,SAAHC,GAEf,IAFoB,IAAA5kB,EAAM4kB,EAAN5kB,OAAQ6kB,EAAkBD,EAAlBC,mBAAoBC,EAAiBF,EAAjBE,kBAC1CC,EAAyD,GACtDxkB,EAAI,EAAGA,EAAIP,EAAQO,IAKxBwkB,EAAanhB,KAAK,CACd0J,IAAyB/M,oBAAAA,EACzBmkB,SAAUnkB,IAAMskB,EAChBxG,QAASyG,EAAkBvkB,GAC3Bya,KAAI,UAAWza,EAAI,KAI3B,OACImd,aAAKsC,UAAcH,EAAO7f,OAAU6f,IAAAA,EAAOmF,UAAWrG,SACjDoG,EAAanW,IAAI,SAAAnE,GAAK,OAAIiT,EAAA2B,IAACmF,EAAW,CAAiBE,SAAUja,EAAMia,SAAUrG,QAAS5T,EAAM4T,QAASrD,KAAMvQ,EAAMuQ,MAAzEvQ,EAAM6C,IAAwF,IAGvJ,ECxCM2X,GAAM,WACR,OACIxG,cAAKpc,GAAG,UAAoB,YAAA,UAAU6iB,MAAM,6BAA6BC,QAAQ,oBAAmBxG,SAAA,CAChGjB,EAAAA,YAAM0H,EAAE,kWAAkWC,UAAU,yBAAyBC,KAAK,SAClZ5H,EAAAA,IAAA,OAAA,CAAM0H,EAAE,kzBAAkzBC,UAAU,yBAAyBC,KAAK,WAG92B,ECNMC,GAAiB,WACnB,OAEI9G,EAAAA,KAAA,MAAA,CAAKpc,GAAG,UAAS,YAAW,UAAU8iB,QAAQ,kBAAiBxG,SAAA,CAC3DjB,MAAS,UAAA,CAAA2H,UAAU,wDAAwDC,KAAK,OAAOE,GAAG,QAAQC,GAAG,MAAMC,GAAG,OAAOC,GAAG,UACxHjI,EAAAA,IAAS,UAAA,CAAA2H,UAAU,yDAAyDC,KAAK,OAAOE,GAAG,QAAQC,GAAG,MAAMC,GAAG,QAAQC,GAAG,SAC1HjI,EAAA2B,IAAA,UAAA,CAASgG,UAAU,uDAAuDC,KAAK,OAAOE,GAAG,KAAKC,GAAG,QAAQC,GAAG,OAAOC,GAAG,UACtHjI,EAAAA,IAAA,UAAA,CAAS2H,UAAU,wDAAwDC,KAAK,OAAOE,GAAG,MAAMC,GAAG,QAAQC,GAAG,QAAQC,GAAG,SACzHjI,EAAM2B,IAAA,OAAA,CAAAiG,KAAK,OAAOF,EAAE,whBAOhC,ECfMQ,GAAW,WACb,OACInH,EAAKC,KAAA,MAAA,CAAArc,GAAG,UAAoB,YAAA,UAAU6iB,MAAM,6BAA6BC,QAAQ,iBAC7ExG,SAAA,CAAAjB,EAAA2B,IAAA,OAAA,CAAM+F,EAAE,oUAAoUC,UAAU,uBAAuBC,KAAK,SAClX5H,MAAA,OAAA,CAAM0H,EAAE,8IAA8IC,UAAU,uBAAuBC,KAAK,SAC5L5H,EAAA2B,IAAA,OAAA,CAAM+F,EAAE,4GAA4GC,UAAU,uBAAuBC,KAAK,WAGtK,ECRMO,GAAiB,WACrB,OACEpH,EAAAA,KAAK,MAAA,CAAApc,GAAG,UAAS,YAAW,UAAU6iB,MAAM,6BAA6BC,QAAQ,iBAC/ExG,SAAA,CAAAjB,EAAA2B,IAAA,OAAA,CAAM+F,EAAE,qYAAqYC,UAAU,sBAAsBC,KAAK,YAClb5H,EAAAA,IAAA,OAAA,CAAM0H,EAAE,8dAA8dC,UAAU,sBAAsBC,KAAK,YAC3gB5H,EAAAA,IAAA,OAAA,CAAM0H,EAAE,whBAAwhBC,UAAU,sBAAsBC,KAAK,YACrkB5H,EAAM2B,IAAA,OAAA,CAAA+F,EAAE,6HAA6HC,UAAU,sBAAsBC,KAAK,YAC1K5H,EAAM2B,IAAA,OAAA,CAAA+F,EAAE,8GAA8GC,UAAU,sBAAsBC,KAAK,cAGjK,ECVMQ,GAAa,WACf,OACIrH,cAAKpc,GAAG,UAAoB,YAAA,UAAU6iB,MAAM,6BAA6BC,QAAQ,oBAAmBxG,SAAA,CAChGjB,EAAAA,YAAM0H,EAAE,0cAA0cC,UAAU,2BAA2BC,KAAK,SAC5f5H,EAAAA,IAAA,OAAA,CAAM0H,EAAE,6VAA6VC,UAAU,2BAA2BC,KAAK,WAI3Z,ECRMS,GAAW,WACb,OACItH,EAAKC,KAAA,MAAA,CAAArc,GAAG,UAAoB,YAAA,UAAU6iB,MAAM,6BAA6BC,QAAQ,iBAC7ExG,SAAA,CAAAjB,EAAA2B,IAAA,OAAA,CAAM+F,EAAE,+jFAA+jFC,UAAU,2BAA2BC,KAAK,SACjnF5H,MAAA,OAAA,CAAM0H,EAAE,whBAAwhBC,UAAU,2BAA2BC,KAAK,SAC1kB5H,EAAA2B,IAAA,OAAA,CAAM+F,EAAE,6IAA6IC,UAAU,2BAA2BC,KAAK,WAI3M,ECTMU,GAAW,WACb,OACItI,EAAA2B,IAAA,MAAA,CAAKhd,GAAG,UAAS,YAAW,UAAU6iB,MAAM,6BAA6BC,QAAQ,mBAC7ExG,SAAAjB,EAAAA,IAAA,OAAA,CAAM0H,EAAE,sgCAAsgCC,UAAU,2BAA2BC,KAAK,UAIpkC,ECPMW,GAAW,WACb,OACIvI,EAAA2B,IAAA,MAAA,CAAKhd,GAAG,UAAS,YAAW,UAAU6iB,MAAM,6BAA6BC,QAAQ,oBAC7ExG,SAAAjB,EAAAA,IAAA,OAAA,CAAM0H,EAAE,0qCAA0qCC,UAAU,2BAA2BC,KAAK,UAIxuC,ECeMY,GAAc,SAAHxJ,GAAK,IACd9b,EAGJ,OAFAA,OAAOP,EAFeqc,EAAJrV,MAKd,IAAK,MACGzG,EAAOqkB,GACX,MACJ,IAAK,mBACGrkB,EAAO2kB,GACX,MACJ,IAAK,WACG3kB,EAAOglB,GACX,MACJ,IAAK,kBACGhlB,EAAOilB,GACX,MACJ,IAAK,aACGjlB,EAAOklB,GACX,MACJ,IAAK,WACGllB,EAAOmlB,GACX,MACJ,IAAK,WACGnlB,EAAOolB,GACX,MACJ,IAAK,WACGplB,EAAOqlB,GAMnB,YAAa5lB,IAATO,EAGI8c,EACI2B,IAAA+E,EAAA+B,SAAA,CAAAxH,SAAAjB,EAAA2B,IAHKze,EAGQ,CAAA,KAKxB,IAEL,EAGMwlB,GAAc,SAAHxB,GACb,IAAA5kB,EAAM4kB,EAAN5kB,OACA8gB,EAAW8D,EAAX9D,YACA+D,EAAkBD,EAAlBC,mBACAC,EAAiBF,EAAjBE,kBACAuB,EAAazB,EAAbyB,cACAC,EAAM1B,EAAN0B,OACAC,EAAO3B,EAAP2B,QACAC,EAAK5B,EAAL4B,MACAC,EAAU7B,EAAV6B,WACAC,EAAkB9B,EAAlB8B,mBACA9f,EAAIge,EAAJhe,KAiBH,OACO8W,aAAKrb,GAAIwd,EAAO,uBACZlB,SAAAF,EAAAC,KAAA,MAAA,CAAKrc,GAAIwd,EAAO,yBACZpB,EAAKC,KAAA,MAAA,CAAArc,GAAIwd,EAAqB,aAAGG,UAAehgB,EAAiB,GAAT,OACpD2e,SAAA,CAAAF,EAAAA,KAAA,MAAA,CAAKuB,UAAWH,EAAkB,UAAClB,SAAA,CAC/BjB,EAAAA,WAAKW,QAXmB,SAAClV,GACzCA,EAAEwd,iBACEH,aAAiBI,UACjBJ,GAER,EAMoDxG,UAAcH,EAAc,MAAKA,IAAAA,EAAoB,+BACrFnC,MAAA,MAAA,CAAKW,QAASoI,EAAYzG,UAAcH,EAAoB,YAAKA,IAAAA,EAAoB,iBAAK4G,EAAY,GAAK5G,EAAOgH,kCAEtHnJ,EAAAA,IAACiH,GAAa,CAAE7D,YAAaA,EAAa9gB,OAAQA,EAAQ6kB,mBAAoBA,EAAoBC,kBAAmBA,IACrHrG,OAAK,MAAA,CAAAuB,UAAcH,EAAkB,UAAKA,IAAAA,EAAkB,oBACxDnC,EAAK2B,IAAA,MAAA,CAAAhB,QAASkI,EAASvG,UAAcH,EAAO,YAAeA,IAAAA,EAAoB,2BAC/EnC,EAAAA,IAAA,MAAA,CAAKW,QAASiI,EAAQtG,UAAcH,EAAO,WAAU,IAAIA,EAAoB,YAAYlB,SAAA,YAGjGjB,EAAAA,IAAA,MAAA,CAAKrb,GAAIwd,EAAsB,cAAGG,UAAWH,EAAa,KAAoClB,SAAA,gCAChF,SAAT/X,GACG8W,EAAAA,IAAK,MAAA,CAAAsC,aAAcH,EAAO3F,UAAalP,MAAO,CAAE+U,QAAS,SACpDpB,SAAA0H,EAAczX,IAAI,SAACpJ,EAASwH,GAAK,OAC9ByR,OAA8C,MAAA,CAAAuB,UAAcH,GAAAA,EAAOra,QAAWwF,MAAO,CAAE8b,gBAAiB,WAAazI,QAAS,WAAM,OAAAqI,EAAmBlhB,EAAQ6B,KAAK,EAAAsX,SAAA,CAChKjB,aAAKsC,UAAWH,EAAO3M,IAAGyL,SACtBjB,MAACwI,GAAW,CAAC7e,KAAM7B,EAAQ6B,SAG/BqW,MAAA,MAAA,CAAKsC,aAAcH,EAAOjf,KAAM+d,SAAGnZ,EAAQ5E,SAAW,WALrC4E,EAAQ5E,SAAQoM,EAM/B,SAOtC,EC9Ha+Z,GAAkB,WAC3B,IAAMC,EAAkBC,EAAAA,QAAMrK,OAAuB,MAoBrD,OAjBA7D,EAASA,UAAC,WACN,GAAKiO,EAAgB3J,QAArB,CACA,IAEI6J,EAFEC,EAAeH,EAAgB3J,QAC/B+J,EAAYpY,SAAS6E,cAAc,8BAOzC,OALIuT,IACAF,EAAWE,EAAUC,WAAU,GAC/BF,EAAaG,YAAYJ,IAGtB,WACCA,GACAC,EAAaI,YAAYL,EAEjC,CAZA,CAaJ,EAAG,IAEIzI,EAAAA,KAAA2F,EAAAA,SAAA,CAAAzF,SAAA,CACHjB,aAAKsC,UAAWH,EAAwB,kBACxCnC,EAAA2B,IAAA,MAAA,CAAKW,UAAWH,EAAoB,YAAGsE,IAAK6C,MAEpD,EClBMQ,GAAoBC,EAAaA,cAA4B,MAErD,SAAUC,GAAyBhL,GAAE,IAAAiC,EAAQjC,EAARiC,SAC/C1H,EAAoCC,EAAQA,SAAoB,MAEhE,OACIwG,EAAC2B,IAAAmI,GAAkBG,SAAQ,CACvBld,MAAO,CACHmd,WALK3Q,EAAE4Q,GAMPA,cANoB5Q,EAEhC,IAOS0H,SAAAA,GAGb,UAEgBmJ,KACZ,IAAMC,EAAUC,EAAUA,WAACR,IAE3B,QAAgBnnB,IAAZ0nB,EACA,MAAM,IAAIE,MAAM,sEAGpB,OAAOF,CACX,CCTA,IAAMG,GAAW,CAAC,WAAY,UAAW,SAAU,IAI7CC,GAAe,CAAC,cAAe,cAAe,cAAe,cAAe,eAAgB,IAI5FC,GAAc,CAAC,QAAS,UAAW,IAInCC,GAAyB,SAACC,GAA8B,MAAA,CAC7DjmB,GAAI,GACJmU,UAAW8R,EACXve,YAAa,GACb0M,SAAU,KACVC,aAAc,GACdlM,SAAU,WACVV,WAAY,cACZW,MAAO,GACPR,YAAa,GACbuK,aAAc,GACdmC,WAAY,GACZlQ,SAAU,GACVX,YAAa,EACb2N,WAAY,GACZlC,KAAM,IACNoB,OAAQ,IACRH,QAAS,IACTC,QAAS,IACT,EAEK8V,GAAa,SAAC7N,GAAuB,IAAA8N,EAAAC,EAAAC,EAAAC,EAAAC,EAEhChc,EAAuE8N,EAAvE9N,KAAMic,EAAiEnO,EAAjEmO,QAASC,EAAwDpO,EAAxDoO,WAAYR,EAA4C5N,EAA5C4N,SAAUrnB,EAAkCyZ,EAAlCzZ,OAE5CgW,EAAoCC,EAAQA,SAAe,IAApD6R,EAAU9R,EAAE+R,GAAAA,EAAa/R,EAAA,GAChCG,EAA8CF,EAAQA,SAAmB,IAAlE+R,EAAe7R,EAAA,GAAE8R,EAAkB9R,EAC1C,GAAAG,EAA4CL,EAAQA,SAAkB,IAA/DiS,EAAc5R,KAAE6R,EAAiB7R,EAAA,GACxCG,EAAgCR,WAAiBmR,GAAuBC,IAAjEe,EAAQ3R,EAAA,GAAE4R,EAAW5R,EAC5B,GAAOwM,EAAyBhN,EAAQA,cAAqB7W,MACvD0nB,EAAUD,KACVyB,EAAa3M,EAAAA,OAA8B,MAC/B4M,EAAmBC,EAAaA,gBAElD1Q,GAAAA,YAAU,WAEG,aADFgQ,IAEC5lB,QAAQ0J,MAAM,CACVwc,SAAAA,EACAN,WAAAA,EACAE,gBAAAA,IAEJS,EAAgBT,GAG5B,EAAG,CAACI,EAAUN,EAAYE,IAE1B,IAAMS,EAAkB,SAACC,GACrBxmB,QAAQ0J,MAAM,CAAC6c,gBAAiBC,IAChC,IAAMrc,EAAgEqc,EACtE,GAAY,OAARrc,EACA,GA7D0C4a,GAAS9hB,SA6DhCkH,GACf0b,EAAc1b,GACV+b,EAAShnB,IAAMgnB,EAAS7e,WAAa8C,GAAOyb,GAAczb,IAC1D+b,EAAS7e,SAAW8C,EACR,aAARA,EACA+b,EAASvf,WAAa,cACP,YAARwD,GACP+b,EAASvf,WAAa,QACtBuf,EAAStf,YAAc,IACR,WAARuD,IACP+b,EAASvf,WAAa,cACtBuf,EAAStf,YAAc,IAE3Bif,EAAc,IACdE,EAAmB,IACnBE,EAAkB,IAClBE,EAAWplB,KAAKmlB,IAChBO,EAAU1lB,EACHmlB,GAAAA,UAGJQ,GA9EuC1B,GAAa/hB,SA8EjCkH,IAE1B,GADA4b,EAAmB5b,GACf+b,EAAShnB,IAAM4mB,GAAmB3b,EAAK,CAQvC,GAPA+b,EAASvf,WAAawD,EAClB+b,EAASvf,aAAewD,GACxBgc,EAAWplB,KAAMmlB,IAErBO,EAAU1lB,EACHmlB,CAAAA,EAAAA,IAEH,CAAC,cAAe,cAAe,eAAejjB,SAASkH,GAAM,CAC7D,IAAI0N,EAAO,GACX,OAAQ1N,GACJ,IAAK,cACD,IAAMwc,EAAcld,EAAKsM,UAAU6Q,UAAU,SAACpP,GAAe,OAAK0O,EAAStf,cAAgB4Q,EAAKtY,EAAE,IAC7E,IAAjBynB,IACA9O,EAAOpO,EAAKsM,UAAU4Q,GAAa9f,YACnC7G,QAAQ0J,MAAM,CACVoG,SAAUrG,EAAKsM,UAAU4Q,MAGjC,MACJ,IAAK,cACL,IAAK,cACD9O,EAAOqO,EAASpf,YAGpB8d,GAAWA,EAAQH,YAEnBoC,EADYjC,EAAQH,WAAW,GACT5M,EAAMqO,EAAS9X,KAE5C,KAEkD0Y,EAA/C,CAAC,cAAe,gBAAgB7jB,SAASkH,KAClC,MAAPya,UAAOkC,EAAPlC,EAASH,aAATqC,EAAqBjnB,QAAQ,SAACoW,EAAKpM,GACjB,IAAVA,GAEJkd,EAAUb,EAAUjQ,EACxB,GAEP,OAlH2CgP,GAAYhiB,SAmH/BkH,KACzB8b,EAAkB9b,GACd+b,EAAShnB,IAAMgnB,EAASvf,aAAewD,GAAO6b,GAAkB7b,IAChE+b,EAASvf,WAAawD,EACtB+b,EAAS5S,SAAW,GACpB4S,EAAStf,YAAc,GACvBsf,EAAS5e,MAAQ,GACjB6e,EAAWplB,EAAA,CAAA,EAAMmlB,IACjBO,EAAU1lB,EAAA,CAAA,EAAMmlB,KAIhC,EAwBMO,EAAa,SAACP,GAChB,IAAMrc,EAAQJ,EAAKuM,SAAS4Q,UAAU,SAACtf,GAAa,OAAKA,EAAMpI,KAAOgnB,EAAShnB,EAAE,IAClE,IAAX2K,IACAJ,EAAKuM,SAASnM,GAAM9I,EAAQmlB,CAAAA,EAAAA,GAC5BR,EAAQ7b,EAAK9I,EAAA,CAAA,EAAOmlB,IAE5B,EAoCMW,EAAmB,SAAC5Q,EAAe4B,EAAczJ,GACnD,IAAI4J,EAAgB,IAAIC,EAAAA,aAAaJ,EAAM,CACvCK,KAAMjC,EAAIhX,SAASiZ,KACnB9J,KAAM3M,SAAS2M,GACflC,OAAQ,IACRiM,cAAe,IAEnBH,EAAcI,SACdnC,EAAItS,SAASyE,UACb6N,EAAItS,SAAWqU,CACnB,EAEM+O,EAAY,SAACb,EAAkBjQ,GACjC,IAAIlG,EAAM,KACV,GAA4B,gBAAxBmW,EAASvf,WAA8B,CACvC,IAAMggB,EAAcld,EAAKsM,UAAU6Q,UAAU,SAACpP,GAAe,OAAK0O,EAAStf,cAAgB4Q,EAAKtY,EAAE,IAC7E,IAAjBynB,IACA5W,EAAMF,EAASqW,EAAUzc,EAAKsM,UAAU4Q,IAE/C,MACG5W,EAAMF,EAASqW,GAEfnW,aAAeiX,kBACf1V,EAAavB,EAAKmW,EAAU,SAACviB,EAAUR,GACnC8S,EAAItS,SAAWA,EACfsS,EAAI9S,SAAWA,EAEf,IAAMsU,EAAc9T,EAAS8T,YAEvB1F,EAAoB,IAAIrR,EAASA,QACvC,GAAI+W,EAAa,CACbA,EAAYE,UAAU5F,GAEtB,IAEmBkV,EAFb/X,EAAY,IAAIxO,EAASA,QAC/B+W,EAAYG,QAAQ1I,GAChB+G,EAAI3P,WACJ0I,EAA+BiH,EAAI3P,UAAWyL,EAAmB7C,EAAW+G,IAAGgR,MAAKhR,EAAI3P,WAASvF,EAAQmlB,CAAAA,EAAAA,GAAQe,GAExH,CACL,EAER,EAEMC,EAAc,SAACzpB,EAAc6J,GAAiB6f,IAAAA,EAOzC,MAAPvC,GAAAuC,OAAOA,EAAPvC,EAASH,aAAT0C,EAAqBtnB,QAAQ,SAACoW,EAAKpM,GAASud,IAAAA,EAAAC,EACnCpR,EAAIhX,SAAS6G,WACdmQ,EAAIhX,SAAS6G,SAAW,IAAIpF,UAC5BuV,EAAIhX,SAAS6G,SAASyF,KAAK0K,EAAInQ,WAEnC,IAAMA,EAAW,IAAIpF,UAErB,OADAoF,EAASyF,KAAK0K,EAAIhX,SAAS6G,UACnBrI,GACJ,IAAK,cACD,GAAc,IAAVoM,EAAa,MACjBqc,EAASpf,YAAcQ,EACnB,CAAC,cAAe,eAAerE,SAASijB,EAASvf,aACjDkgB,EAAiB5Q,EAAKiQ,EAASpf,YAAaof,EAAS9X,MAEzD,MACJ,IAAK,eACD,GAAc,IAAVvE,EAAa,MACjBqc,EAAS7U,aAAe/J,EACxByf,EAAUb,EAAUjQ,GACpBwQ,EAAU1lB,EACHmlB,CAAAA,EAAAA,IAEP,MACJ,IAAK,OACD,GAAc,IAAVrc,EAAa,MAEjB,GADAqc,EAAS9X,KAAO9G,EACV,CAAC,cAAe,QAAS,UAAW,gBAAgBrE,SAASijB,EAASvf,YAWzC,gBAAxBuf,EAASvf,YAAwD,iBAAxBuf,EAASvf,YACzDogB,EAAUb,EAAUjQ,GAChBmQ,EAAWlM,SACXoN,cAAclB,EAAWlM,SAE7BkM,EAAWlM,QAAUqN,WAAW,WAC5Bd,EAAU1lB,EAAA,GAAMmlB,GACpB,EAAG,MACI,CAAC,UAAW,SAASjjB,SAASijB,EAASvf,aAC9C0f,EAAgB,WACZF,EAAWplB,EAAMmlB,CAAAA,EAAAA,IACjBO,EAAU1lB,EAAA,GAAMmlB,GACpB,OAvBsF,CACtF,IAAIrO,EAAO,GACX,GAA4B,gBAAxBqO,EAASvf,YAAgCsP,EAAIhX,SAAS4H,YAAa,CACnE,IAAM8f,EAAcld,EAAKsM,UAAU6Q,UAAU,SAACpP,GAAe,OAAK0O,EAAStf,cAAgB4Q,EAAKtY,EAAE,IAC7E,IAAjBynB,IACA9O,EAAOpO,EAAKsM,UAAU4Q,GAAa9f,YAE1C,KAAU,CAAC,cAAe,eAAe5D,SAASijB,EAASvf,cACxDkR,EAAOqO,EAASpf,aAEpB+f,EAAiB5Q,EAAK4B,EAAMqO,EAAS9X,KACxC,CAcD,MAEJ,IAAK,SACD,GAAc,IAAVvE,EAAa,MACjBqc,EAAS1W,OAASlI,EAClB2O,EAAI8K,SAASlT,IACToI,EAAI8K,SAASzjB,EACb2Y,EAAI8K,SAASvjB,EACbkZ,WAAWwP,EAAS1W,QAAUE,KAAKC,GAAK,KAE5C,MAEJ,IAAK,UACD,GAAc,IAAV9F,EAAa,MACjB/D,EAASxI,GAAKoZ,WAAWpP,GACzB2O,EAAInQ,SAAS0hB,KAAK1hB,EAASxI,GAC3B4oB,EAAS7W,QAAU/H,EACnB,MAEJ,IAAK,UACD,GAAc,IAAVuC,EAAa,MACjB/D,EAAStI,GAAKkZ,WAAWpP,GACzB2O,EAAInQ,SAAS2hB,KAAK3hB,EAAStI,GAC3B0oB,EAAS5W,QAAUhI,EACnB,MAEJ,IAAK,aACD,GAAc,IAAVuC,EAAa,MAEjB,GADAqc,EAAS5V,WAAahJ,EAClB,CAAC,cAAe,cAAe,eAAerE,SAASijB,EAASvf,YAAa,CAC7E,IAQImR,EAAgB,IAAIC,EAAiBA,kBARf,CAEtBzZ,MAAO4nB,EAAS5V,WAChB3N,aAAa,EACbF,KAAMC,aACNE,YAAY,EACZC,WAAW,IAGfoT,EAAI9S,SAAW2U,CAClB,MAC2B,gBAAxBoO,EAASvf,YACe,iBAAxBuf,EAASvf,YACc,YAAtBuf,EAAS7e,UAAkD,UAAxB6e,EAASvf,YAA+C,MAArBuf,EAAS5S,UACzD,YAAtB4S,EAAS7e,UAAkD,YAAxB6e,EAASvf,YAA+C,KAAnBuf,EAAS5e,SAClFyf,EAAUb,EAAUjQ,GACpBoQ,EAAgB,WACZI,EAAU1lB,EAAA,CAAA,EACHmlB,EACH5V,CAAAA,WAAY4V,EAAS5V,WAAW3O,QAAQ,IAAK,MAErD,IAEJ,MAEJ,IAAK,WACD,GAAc,IAAVkI,EAAa,MACjBqc,EAAS5iB,SAAWgE,EACpB,IAAIogB,EAAqB,QACR,OAAjBN,EAAInR,EAAI3P,YAAJ8gB,EAAejoB,WAAW,eAC1BuoB,EAAW,aAEfzR,EAAI9S,SAAWZ,EACXzE,EACA4pB,EACAxB,EAAS3S,aACT2S,EAAS5iB,SACgB,MAAzB4iB,EAASvjB,cAAiC0kB,EAAA,CAAA,GACxCnB,EAAS3S,cAAYxS,EAAA,CAAA,EAAOmlB,GAAQmB,IAQlDhB,EAAgB,WACZF,EAAWplB,KAAMmlB,IACjBO,EAAU1lB,EAAMmlB,CAAAA,EAAAA,GACpB,EAEJ,EACJ,EACMyB,EAAe,SAAC3hB,GAClB,IAAMuZ,EAASvZ,EAAEuZ,OAGjB2H,EADa3H,EAAO9hB,KADN8hB,EAAOjY,MAGzB,EAEAsO,EAASA,UAAC,WACN,GAAInM,GAAQA,EAAKuM,UAAY2P,EAAY,CACrC,IAAM9b,EAAQJ,EAAKuM,SAAS4Q,UAAU,SAACtf,GAAU,OAAKA,EAAMiM,eAAiBoS,CAAU,IACxE,IAAX9b,GACAsc,EAAWplB,EAAK0I,CAAAA,EAAAA,EAAKuM,SAASnM,IAErC,CACD,OAAY,WACRkc,EAAmB,GACvB,CACJ,EAAG,CAACtc,EAAMkc,IAEV/P,EAASA,UAAC,WACFsQ,EAAS7e,UACTkf,EAAgBL,EAAS7e,UAEzB6e,EAASvf,YACT4f,EAAgBL,EAASvf,WAEjC,EAAG,CAACuf,IAEJ,IAAM0B,EAAkB,SAACzd,GAAmD,OAAA,WACxE,GAAIF,OAAO4d,OAAO3B,EAAU/b,GAAM,CAC9B,IAAI7C,EAAQ7F,SAASykB,EAAS/b,IAE9B+c,EAAY/c,GADZ7C,GAAS,GACcwgB,WAC1B,CACL,CAAC,EAEKC,EAAkB,SAAC5d,GAAmD,OAAA,WACxE,GAAIF,OAAO4d,OAAO3B,EAAU/b,GAAM,CAC9B,IAAI7C,EAAQ7F,SAASykB,EAAS/b,IAE9B+c,EAAY/c,GADZ7C,GAAS,GACcwgB,WAC1B,CACL,CAAC,EAGD,OACIxM,EAAAC,KAAA0F,EAAA+B,SAAA,CAAAxH,SAAA,CACIjB,EAAAA,IAACyN,EAAGA,IAACC,UAAS,CAACC,UAAWtC,EAAUpK,SAChCF,EAAAA,KAAC6M,EAAAA,eACG7M,EAACC,KAAA6M,EAAGA,IACA,CAAA5M,SAAA,CAAAjB,EAAAA,IAAC4N,EAAGA,IAAA,CAACE,GAAG,IACJ7M,SAAAF,OAACgN,EAAAA,IAAG,CACAC,QAAQ,OACR1L,UAAU,WAEV2L,SAAUjC,EAAe/K,SAAA,CAEzBjB,MAAC+N,EAAAA,IAAIG,KACD,CAAAjN,SAAAjB,EAAAA,IAAC+N,EAAGA,IAACI,KAAK,CAAAC,SAAU,WAAUnN,SAAA,eAElCjB,EAAA2B,IAACoM,MAAIG,KACD,CAAAjN,SAAAjB,EAAAA,IAAC+N,EAAAA,IAAII,MAAKC,SAAU,UAASnN,SAAA,cAEjCjB,EAAAA,IAAC+N,EAAAA,IAAIG,eACDlO,EAAC2B,IAAAoM,EAAGA,IAACI,MAAKC,SAAU,SAA2BnN,SAAA,kBAI3DjB,EAAC2B,IAAAiM,EAAGA,KAACE,GAAG,IAAIxL,UAAU,OAAMrB,SAGxBjB,EAAC2B,IAAA0M,EAAMA,QAACL,QAAQ,SAAS1L,UAAU,OAAO3B,QArT9C,WAChB,IAAM2N,EAAgB3D,GAAuBgB,EAAS7S,WACtD8S,EAAWplB,EACJ8nB,CAAAA,EAAAA,GACH3pB,GAAIgnB,EAAShnB,MAEjBunB,EAAU1lB,EAAA,CAAA,EACH8nB,EAAa,CAChB3pB,GAAIgnB,EAAShnB,KAErB,EA2SsGsc,SAAA,eAGtFjB,MAAC6N,EAAAA,IACG,CAAA5M,SAAAjB,EAAAA,IAAC4N,EAAAA,IAAG,CAACE,GAAG,cACJ/M,EAACC,KAAAyM,MAAIc,QAAO,CAAAtN,SAAA,CACRF,EAACC,KAAAyM,MAAIe,KAAI,CAACJ,SAAU,qBAChCrN,EAAAA,KAAC0N,EAAAA,KAAKC,QAAOpM,UAAU,OAAkB,aAAA,oBAAoBvV,MAA2B,OAAtB+d,EAAEa,EAAStf,aAAWye,EAAG,GAAIlE,SAxSlF,SAACnb,GACtBA,EAAEuZ,OAAOjY,QACT4e,EAAStf,YAAcZ,EAAEuZ,OAAOjY,MAChC4e,EAAS5S,SAAW,GACpB6S,EAAWplB,EAAA,CAAA,EAAKmlB,IAChBO,EAAU1lB,KAAKmlB,IAEvB,EAkSoB1K,SAAA,CAAAjB,MAAA,SAAA,CAAQjT,MAAO,GAAI4hB,YAASC,QAAM,EAAA3N,SAAA,yBACnB,OADiD8J,EAC/D7b,EAAKsM,gBAAS,EAAduP,EAAgB7Z,IAAI,SAACnE,GAAU,OAAKgU,OAAqC,SAAA,CAAAhU,MAAOA,EAAMpI,GAAEsc,SAAA,CAAGlU,EAAMT,kBAAgBS,EAAM8hB,WAA1D9hB,YAAAA,EAAMpI,GAAsE,MAE9Ioc,EAAAA,KAAC+N,EAAIA,MACDd,QAAQ,QACRrpB,GAAG,kBACHgpB,UAAWpC,EACX0C,SAAUjC,EAAe/K,SAAA,CAEzBjB,MAACyN,MAAG,CAACW,SAAS,cAAcnS,MAAM,gBAClC+D,EAAC2B,IAAA8L,MAAI,CAAAW,SAAS,cAAcnS,MAAM,gBAClC+D,EAAA2B,IAAC8L,MAAG,CAACW,SAAS,cAAcnS,MAAM,cAC9BgF,SAAAjB,EAAAA,IAACyO,EAAIA,KAAC5S,MAAM,CAAAyG,UAAU,MAAKrB,SACvBF,EAAAA,KAAC8M,EAAAA,IAAG,CAACvL,UAAU,0BACXrB,SAAA,CAAAjB,EAAAA,IAAC4N,EAAGA,IAAC,CAAAE,GAAG,IAAG7M,SACPjB,EAAC2B,IAAA8M,EAAIA,KAACM,MAAK,CAACzM,UAAU,2BAE1BtC,MAAC4N,EAAAA,KAAIE,GAAG,KACJ7M,SAAAjB,EAAA2B,IAAC8M,EAAIA,KAACO,QACF,CAAAC,GAAG,WACH/rB,KAAK,cACLgsB,KAAM,EACNniB,MAAO4e,EAASpf,YAChBqa,SAAUwG,mBAStBpN,MAACyN,MAAIe,KAAI,CAACJ,SAAU,mBAChCrN,EAACC,KAAA8N,EAAIA,MACDd,QAAQ,QACRrpB,GAAG,mBACHgpB,UAAWlC,EACXwC,SAAUjC,YAEVhM,EAAC2B,IAAA8L,EAAGA,KAACW,SAAS,QAAQnS,MAAM,iBACxB8E,EAACC,KAAAyN,EAAIA,KAACC,OAAM,CAACpM,UAAU,MAAiB,aAAA,oBAAoBvV,MAAwB,OAAnBie,EAAEW,EAAS5S,UAAQiS,EAAG,GAAIpE,SAxUzF,SAACnb,OACH0jB,EAAhB1jB,EAAEuZ,OAAOjY,QACT4e,EAAS5S,SAAWtN,EAAEuZ,OAAOjY,MAC7B4e,EAAStf,YAAc,GACvBuf,EAAWplB,EAAA,CAAA,EAAKmlB,IAChBO,EAAU1lB,KAAKmlB,IACRwD,MAAP9E,GAAmB,OAAZ8E,EAAP9E,EAASH,aAATiF,EAAqB7pB,QAAQ,SAACoW,EAAKpM,GACjB,IAAVA,GACJkd,EAAUb,EAAUjQ,EACxB,GAER,EA8T4BuF,SAAA,CAAAjB,EAAAA,IAAA,SAAA,CAAQjT,MAAO,GAAI4hB,UAAQ,EAACC,QAAM,EAAA3N,SAAA,sBACtB,OADiDgK,EAC5D/b,EAAKqM,aAAM,EAAX0P,EAAa/Z,IAAI,SAACnE,EAAYuC,GAAkB,OAAA0Q,gBAA2CjT,MAAOA,EAAMpI,GAAKsc,SAAAlU,EAAMkP,gBAA7ClP,EAAMpI,GAAE,IAAI2K,EAAgD,QAG3I0Q,EAAAA,IAACyN,EAAAA,KAAIW,SAAS,UAAUnS,MAAM,mBAC1B8E,EAAAA,KAAC0N,EAAAA,KAAKC,OAAM,CAACpM,UAAU,MAAiB,aAAA,oBAAoBvV,MAAO4e,EAAS5e,MAAO6Z,SAjU/E,SAACnb,GACL,IAAA2jB,EAAhB3jB,EAAEuZ,OAAOjY,QACT4e,EAAS5e,MAAQtB,EAAEuZ,OAAOjY,MAC1B6e,EAAWplB,KAAKmlB,IAChBO,EAAU1lB,EAAKmlB,GAAAA,IACR,MAAPtB,UAAO+E,EAAP/E,EAASH,aAATkF,EAAqB9pB,QAAQ,SAACoW,EAAKpM,GACjB,IAAVA,GACJkd,EAAUb,EAAUjQ,EACxB,GAER,EAuTwIuF,SAAA,CAC5GjB,gBAAQjT,MAAO,GAAI4hB,UAAS,EAAAC,gDAAiC1D,EAC5Dxb,OAAOC,KAAKT,EAAKsN,mBAAjB0O,EAA6Bha,IAAI,SAACnE,GAAa,OAC5CiT,EAAA2B,IAAA,SAAA,CAAiC5U,MAAOA,EAAQkU,SAAA/R,EAAKsN,UAAUzP,GAAO7J,MAAI,WAAlD6J,EAA4D,aAMxFiT,MAACyN,EAAAA,IAAIe,KAAK,CAAAJ,SAAU,SAAQnN,SACxCF,EAACC,KAAA8N,QACGd,QAAQ,QACRrpB,GAAG,kBACHgpB,UAAWpC,EACX0C,SAAUjC,EAAe/K,SAAA,CAEzBjB,EAAAA,IAACyN,EAAAA,IAAG,CAACW,SAAS,cAAcnS,MAAM,OAAMgF,SACpCjB,MAACyO,OAAK5S,MAAK,CAACyG,UAAU,eAClBvB,EAACC,KAAA6M,EAAGA,KAACvL,UAAU,0BAAyBrB,SAAA,CACpCjB,MAAC4N,MAAG,CAACE,GAAG,aACJ9N,EAAAA,IAACyO,EAAAA,KAAKM,OAAMzM,UAAU,OAAwBrB,SAAA,WAElDjB,EAAAA,IAAC4N,EAAGA,IAAC,CAAAE,GAAG,KAAI7M,SACRjB,MAACyO,EAAAA,KAAKO,QACF,CAAA9rB,KAAK,cACL+rB,GAAG,WACHC,KAAM,EACNniB,MAAO4e,EAASpf,YAChBqa,SAAUwG,aAM9BpN,EAAA2B,IAAC8L,EAAGA,IAAC,CAAAW,SAAS,eAAenS,MAAM,QAC/BgF,SAAAjB,EAAA2B,IAAC8M,EAAIA,KAAC5S,OAAMyG,UAAU,MAAKrB,SACvBF,EAAAA,KAAC8M,EAAGA,IAAA,CAACvL,UAAU,oCACXtC,EAAC2B,IAAAiM,EAAGA,IAAC,CAAAE,GAAG,IAAG7M,SACPjB,MAACyO,OAAKM,MAAM,CAAAzM,UAAU,gCAE1BtC,EAAAA,IAAC4N,EAAAA,IAAG,CAACE,GAAG,KACJ7M,SAAAjB,EAAA2B,IAAC8M,OAAKO,SACFrlB,KAAK,SACLzG,KAAK,eACL6J,MAAO4e,EAAS7U,aAChB8P,SAAUwG,8BAa1CrM,EAAAA,KAAC0N,EAAAA,KAAK5S,MAAK,CAACyG,UAAU,YAClBrB,SAAA,CAAAF,EAAAC,KAAC6M,EAAGA,IAAC,CAAAvL,UAAU,0BAAyBrB,SAAA,CACpCjB,MAAC4N,MAAG,CAACE,GAAG,IAAIxL,UAAU,+BAA8BrB,SAChDjB,MAACyO,OAAKM,MAAK,CAACzM,UAAU,2BAE1BtC,EAAAA,IAAC4N,EAAAA,IAAG,CAACE,GAAG,IACJ7M,SAAAF,EAAAC,KAAC6M,EAAGA,IACA,CAAA5M,SAAA,CAAAjB,EAAAA,IAAC4N,EAAAA,IAAI,CAAAE,GAAG,IAAIxL,UAAU,SAClBrB,SAAAjB,EAAAA,IAACqO,EAAAA,OAAO,CAAA1N,QAAS0M,EAAgB,QAASW,QAAQ,eAAyB/M,SAAA,QAE/EjB,EAAAA,IAAC4N,EAAAA,IAAI,CAAAE,GAAG,IAAG7M,SACPjB,MAACyO,OAAKO,QAAO,CACT9rB,KAAK,OACLyG,KAAK,SACLoD,MAAO4e,EAAS9X,KAChB+S,SAAUwG,MAGlBpN,EAAC2B,IAAAiM,OAAIE,GAAG,IAAIxL,UAAU,6BAA4BrB,SAC9CjB,EAAC2B,IAAA0M,UAAO1N,QAAS6M,EAAgB,QAASQ,QAAQ,wCAKlEjN,OAAC8M,EAAAA,IAAG,CAACvL,UAAU,0BACXrB,SAAA,CAAAjB,EAAAA,IAAC4N,EAAAA,IAAI,CAAAE,GAAG,IAAIxL,UAAU,+BAClBrB,SAAAjB,EAAA2B,IAAC8M,OAAKM,OAAMzM,UAAU,OAAMrB,SAAA,aAEhCjB,EAAAA,IAAC4N,EAAAA,IAAI,CAAAE,GAAG,IAAG7M,SACPF,EAACC,KAAA6M,iBACG7N,EAAAA,IAAC4N,EAAAA,KAAIE,GAAG,IAAIxL,UAAU,kBAClBtC,EAAAA,IAACqO,EAAAA,QAAO1N,QAAS0M,EAAgB,UAAWW,QAAQ,gCAExDhO,EAAAA,IAAC4N,EAAAA,IAAG,CAACE,GAAG,IACJ7M,SAAAjB,EAAA2B,IAAC8M,OAAKO,SACF9rB,KAAK,SACLyG,KAAK,SACLoD,MAAOyZ,MAAAA,EAAAA,EAAYmF,EAAS1W,OAC5B2R,SAAUwG,MAGlBpN,EAAC2B,IAAAiM,MAAI,CAAAE,GAAG,IAAIxL,UAAU,sCAClBtC,EAAC2B,IAAA0M,SAAO,CAAA1N,QAAS6M,EAAgB,UAAWQ,QAAQ,eAAyB/M,SAAA,gBAK7FF,EAACC,KAAA6M,EAAGA,KAACvL,UAAU,0BAAyBrB,SAAA,CACpCjB,MAAC4N,MAAG,CAACE,GAAG,IAAIxL,UAAU,+BAA8BrB,SAChDjB,EAAAA,IAACyO,EAAIA,KAACM,MAAM,CAAAzM,UAAU,OAAMrB,SAAA,eAEhCjB,MAAC4N,MAAG,CAACE,GAAG,aACJ/M,EAAAA,KAAC8M,EAAGA,IACA,CAAA5M,SAAA,CAAAjB,EAAA2B,IAACiM,MAAI,CAAAE,GAAG,IAAIxL,UAAU,SAClBrB,SAAAjB,EAAA2B,IAAC0M,SAAO,CAAA1N,QAAS0M,EAAgB,WAAYW,QAAQ,eAAyB/M,SAAA,QAElFjB,EAAAA,IAAC4N,EAAAA,KAAIE,GAAG,IAAG7M,SAEPjB,MAACyO,OAAKO,QACF,CAAA9rB,KAAK,UACLyG,KAAK,SACLoD,MAAO4e,EAAS7W,QAChB8R,SAAUwG,MAGlBpN,MAAC4N,MAAG,CAACE,GAAG,IAAIxL,UAAU,6BAA4BrB,SAC9CjB,MAACqO,SAAM,CAAC1N,QAAS6M,EAAgB,WAAYQ,QAAQ,eAAc/M,SAAA,gBAKnFF,OAAC8M,EAAGA,IAAA,CAACvL,UAAU,oCACXtC,EAAC2B,IAAAiM,MAAI,CAAAE,GAAG,IAAIxL,UAAU,wCAClBtC,EAAC2B,IAAA8M,EAAIA,KAACM,OAAMzM,UAAU,OAA4BrB,SAAA,eAEtDjB,EAAC2B,IAAAiM,MAAI,CAAAE,GAAG,IAAG7M,SACPF,EAAAA,KAAC8M,EAAGA,IAAA,CAAA5M,SAAA,CACAjB,EAAAA,IAAC4N,EAAAA,IAAG,CAACE,GAAG,IAAIxL,UAAU,SAAQrB,SAC1BjB,EAAAA,IAACqO,EAAAA,OAAM,CAAC1N,QAAS0M,EAAgB,WAAYW,QAAQ,eAAc/M,SAAA,QAEvEjB,MAAC4N,EAAGA,IAAA,CAACE,GAAG,aACJ9N,EAAC2B,IAAA8M,OAAKO,SACF9rB,KAAK,UACLyG,KAAK,SACLoD,MAAO4e,EAAS5W,QAChB6R,SAAUwG,MAGlBpN,EAAAA,IAAC4N,EAAAA,IAAI,CAAAE,GAAG,IAAIxL,UAAU,6BAClBrB,SAAAjB,EAAA2B,IAAC0M,SAAO,CAAA1N,QAAS6M,EAAgB,WAAYQ,QAAQ,eAAyB/M,SAAA,gBAK9FF,EAACC,KAAA6M,EAAGA,IAAC,CAAAvL,UAAU,0BAAyBrB,SAAA,CACpCjB,MAAC4N,MAAG,CAACE,GAAG,IAAIxL,UAAU,+BAA8BrB,SAChDjB,MAACyO,OAAKM,MAAM,CAAAzM,UAAU,+BAE1BtC,EAAAA,IAAC4N,EAAAA,IAAG,CAACE,GAAG,IAAIxL,UAAU,MAAKrB,SACvBjB,EAAAA,IAACyO,EAAAA,KAAKO,QACF,CAAA9rB,KAAK,WACLyG,KAAK,SACLoD,MAAO5F,EAAiBwkB,EAAS5iB,UACjC6d,SAAUwG,MAGlBpN,MAAC4N,EAAAA,KAAIE,GAAG,IACJ7M,SAAAjB,EAAA2B,IAAC8M,EAAIA,KAACO,QACF,CAAArlB,KAAK,QACLzG,KAAK,WACL6J,MAAO5F,EAAiBwkB,EAAS5iB,UACjC6d,SAAUwG,MAGlBpN,EAAAA,IAAC4N,EAAGA,IAAA,CAACE,GAAG,aACJ/M,OAAC8M,EAAAA,IACG,CAAA5M,SAAA,CAAAjB,EAAAA,IAAC4N,EAAGA,IAAC,CAAAE,GAAG,IAAG7M,SACPjB,eACQ9c,KAAK,cACLyB,GAAG,cACHgF,KAAK,WACLoD,MAAO4e,EAASvjB,YAChBwe,SAAUwG,MAStBpN,EAAC2B,IAAAiM,EAAGA,KAACE,GAAG,IAAIxL,UAAU,MAAKrB,SACvBjB,EAAC2B,IAAA8M,EAAIA,KAACM,MAAK,CAACM,QAAQ,cAAc/M,UAAU,OAAMrB,SAAA,0BAKjE,CAAC,cAAe,cAAe,eAAevY,SAASijB,EAASvf,aAC7D2U,EAACC,KAAA6M,MAAI,CAAAvL,UAAU,oCACXtC,EAAC2B,IAAAiM,EAAGA,IAAC,CAAAE,GAAG,IAAIxL,UAAU,+BAA8BrB,SAChDjB,EAAC2B,IAAA8M,EAAIA,KAACM,MAAK,CAACzM,UAAU,OAAMrB,SAAA,iBAEhCjB,MAAC4N,EAAAA,IAAG,CAACE,GAAG,IACJ7M,SAAAjB,EAAAA,IAACyO,EAAAA,KAAKO,QAAO,CACTrlB,KAAK,SACLzG,KAAK,aACL6J,MAAO5F,EAAiBwkB,EAAS5V,YACjC6Q,SAAUwG,MAGlBpN,EAAAA,IAAC4N,EAAGA,IAAC,CAAAE,GAAG,aACJ9N,MAACyO,EAAAA,KAAKO,QACF,CAAA9rB,KAAK,aACLyG,KAAK,QACLoD,MAAO5F,EAAiBwkB,EAAS5V,YACjC6Q,SAAUwG,SAKzB,CAAC,QAAS,WAAW1kB,SAASijB,EAASvf,aACpC2U,EAAAA,KAAC8M,EAAGA,KAACvL,UAAU,0BACXrB,SAAA,CAAAjB,EAAA2B,IAACiM,EAAGA,IAAC,CAAAE,GAAG,IAAG7M,SACPjB,EAAAA,IAACyO,EAAAA,KAAKM,MAAM,CAAAzM,UAAU,OAA8BrB,SAAA,iBAExDjB,EAAC2B,IAAAiM,EAAGA,KAACE,GAAG,IACJ7M,SAAAjB,EAAAA,IAACyO,EAAAA,KAAKO,SACFrlB,KAAK,SACLzG,KAAK,aACL6J,MAAO5F,EAAiBwkB,EAAS5V,YACjC6Q,SAAUwG,MAGlBpN,MAAC4N,EAAAA,IAAI,CAAAE,GAAG,IAAG7M,SACPjB,MAACyO,EAAIA,KAACO,QAAO,CACTrlB,KAAK,QACLzG,KAAK,aACL6J,MAAO5F,EAAiBwkB,EAAS5V,YACjC6Q,SAAUwG,cAQ1C,EC5vBMzE,GAA6C,CAC/C,CACIzlB,KAAM,MACNyG,KAAM,MACN2lB,SAAU,6DAEd,CACIpsB,KAAM,aACNyG,KAAM,aACN2lB,SAAU,oEAEd,CACIpsB,KAAM,YACNyG,KAAM,WACN2lB,SAAU,kEAEd,CACIpsB,KAAM,WACNyG,KAAM,WACN2lB,SAAU,kEAEd,CACIpsB,KAAM,WACNyG,KAAM,WACN2lB,SAAU,kEAEd,CACIpsB,KAAM,WACNyG,KAAM,WACN2lB,SAAU,mEAwBZC,GAAiB,SAACvS,GAA+BwS,IAAAA,EAC7CtgB,EC3DM,SAAa8P,OAAG7G,EAAS6G,EAAT7G,UAAWsX,EAASzQ,EAATyQ,UACvClW,EAAwBC,EAAAA,SAA8B,MAA/CtK,EAAIqK,EAAE4R,GAAAA,EAAO5R,EAAA,GA2BpB,OAzBKpB,GAAcsX,GACfhqB,QAAQiG,MAAM,wDAGlB2P,EAAAA,UAAU,WACN,GAAIoU,EACAtE,EAAQsE,QAIZ,GAAKtX,EAAL,CAIA,IAAMuX,EAA+DvX,yDAAAA,wBACrE1S,QAAQqa,IAAI,MAAO4P,GAEnBC,MAAMD,GACDE,KAAK,SAAAtU,GAAQ,OAAIA,EAASuU,MAAM,GAChCD,KAAK,SAACtU,GACH6P,EAAO3kB,EAAA,CAAA,EAAK8U,GAChB,EATH,CAWL,EAAG,CAACnD,EAAWsX,IAERvgB,CACX,CD8BiB4gB,CAAc,CAAEL,UAAUzS,EAAOyS,UAAWtX,UAAW6E,EAAO7E,YAC3EoB,EAAoDC,EAAAA,UAAkB,GAA/D2N,EAAkB5N,EAAEwW,GAAAA,EAAqBxW,EAChD,GAAAG,EAA4CF,EAAQA,SAAoB,IAAjEwW,EAActW,EAAEuW,GAAAA,EAAiBvW,EAExC,GAAQwW,EAAuElT,EAAvEkT,uBAAwBC,EAA+CnT,EAA/CmT,0BAA2BC,EAAoBpT,EAApBoT,gBAE3DvW,EAAkDL,EAAAA,SAAiB,IAA5DqJ,EAAiBhJ,EAAA,GAAEwW,EAAoBxW,EAAA,GAC9CG,EAAwBR,EAAAA,SAA2B,MAA5CsJ,EAAI9I,EAAA,GAAEsW,EAAOtW,EAAA,GAEdoN,EAAoB,SAACnM,GAAkB,OAAyCxP,SAAAA,GAClFskB,EAAsB9U,EAC1B,CAAC,EAEO/R,EAAS8T,EAAT9T,KAEF+W,EAAa5G,EAAcnK,EAAM8N,EAAOzZ,OAAQ2F,GAEhDqnB,GADqBrR,EAAAA,OAAO,MACjBA,EAAMA,OAAiB,OACxChF,EAA0DV,EAAQA,SAAkB,MAA5EgX,EAAoBtW,EAAEuW,GAAAA,EAAuBvW,EACrD,GAAMwW,EAAoBtG,KAEpB7mB,EAAS0c,EAAW1c,OACpBjB,EAAS2d,EAAW3d,OACpBsQ,EAAaqN,EAAWrN,WAI1BuN,EAA+C,OAAjCqP,EAAS,MAANjsB,OAAM,EAANA,EAAQqV,wBAAsB4W,EAAI,GACnDU,EACA/P,EAAiB+P,EACVrN,IACP1C,EAAiB,IA+BrB9E,YAAU,WAEN/J,SAASqf,KAAKrjB,MAAMsjB,OAASJ,EAAsB,UAAY,SACnE,EAAG,CAACA,IAEJ,IAAAK,EAA2F9S,EAAOA,QAAC,WAC/F,IAAKxa,EACD,MAAO,CAAE,KAAM,EAAG,IAEtB,IAAIutB,EAAa,GACbnO,EAA4B,KAC5BoO,EAAsB,EAC1B,GAAIxtB,EAAO2U,QAAU3U,EAAO2U,OAAO3U,EAAOyU,OAAQ,CAC9C,IAAMgZ,EAAkBztB,EAAO2U,OAAO3U,EAAOyU,OAAOgB,aAC9CiY,EAAsBre,EAAWse,OAAOviB,KAAK,SAAA9C,GAAI,OAAIA,EAAKE,YAAcilB,CAAe,GACzFC,IACAtO,EAAesO,EAAoBplB,KACnCklB,EAAsBE,EAAoB5uB,YAEjD,KACwB,aAAjBkB,MAAAA,OAAAA,EAAAA,EAAQoF,QACRmoB,EAAa,yGAGjBrrB,QAAQiG,MAAM,6BACdolB,EAAa,2BAGjB,MAAO,CAAEnO,EAAcoO,EAAqBD,EAChD,EAAG,CAACvtB,EAAQqP,IAxBJ+P,EAAYkO,EAAEE,GAAAA,EAAmBF,EAAEC,GAAAA,EAAUD,EA0BrD,GAKAxV,EAASA,UAAC,WAAK,IAAA8V,EACLC,EAAgBzO,EAAcwO,OAAFA,EAAElR,EAAWnG,WAAWoX,OAAOviB,KAAK,SAAAgJ,GAAa,OAAAA,EAAUA,UAAU5L,YAAc,gBAAmB4W,EAA0B5W,SAAS,SAAvIolB,EAAAA,EAA0IxZ,UAAY,KAI1L,OAHIyZ,GAA0B,SAATloB,IACjBkoB,EAAc1sB,SAASmd,YAAc7B,EAAC2B,IAAA0H,QAEnC,WACC+H,IACAA,EAAc1sB,SAASmd,YAAc,KAE7C,CACJ,EAAG,CAAC5B,EAAY0C,IAEhBtH,EAAAA,UAAU,WACN,GAAI4E,EAAWrN,YAAcqN,EAAWrN,WAAW9P,QAAUotB,GAA2C,MAAjBQ,GAAAA,EAAmBvG,cAAe,CACrH,IAAM1W,EAASwM,EAAWrN,YAAmC,IAAxBuU,EAA2B,EAAIA,GAAoBxY,KAAK,SAAC5B,GAAK,OAAKA,EAAMhB,YAAcmkB,CAAsB,GAC9Izc,GAEA4d,EAAwB5d,EAG/B,CACL,EAAG,CAACwM,IAEJ5E,EAASA,UAAC,WACN,GAAI+U,EAAiB,CACjB,IAAMkB,EAAuB,GAE7BtB,EAAe1qB,QAAQ,SAACyH,GACpBukB,EAAWprB,KAAIM,EAAA,CAAA,EAAKuG,EAAMmC,MAC9B,EACH,CACL,EAAG,CAAC8gB,IAEJ,IAAMqB,EAA0B,SAAC5d,GAC7B,GAAIid,MAAAA,GAAAA,EAAmBvG,cAAe,CAAA,IAAAoH,EAAAC,EAC5B7X,EAAqF,OAA3E4X,EAAGtR,EAAWtG,YAAmC,IAAxBwN,EAA2B,EAAIA,SAAmB,EAAxEoK,EAA0E5iB,KAAK,SAAA5B,GAC9F,OAAOA,EAAM8P,SAAS9Q,YAAS,GAAQ6L,EAAsBnE,EAAoB1H,SACrF,GAEM0lB,EAAqF,OAA3ED,EAAGvR,EAAWnG,YAAmC,IAAxBqN,EAA2B,EAAIA,SAAmB,EAAxEqK,EAA0E7iB,KAAK,SAAA5B,GAC9F,OAAOA,EAAM4K,UAAU5L,YAAS,GAAQ6L,EAAsBnE,EAAoB1H,SACtF,GAEMyG,EAAS,CAACiB,GAEZkG,GACAnH,EAAOtM,KAAKyT,EAAWkD,UAGvB4U,GACAjf,EAAOtM,KAAKurB,EAAW9Z,WAG3B+Y,EAAkBvG,cAAa/O,GAAAA,OAAK5I,GACvC,CACL,EAEMmO,EAAU3F,EAAWA,YAAC,SAACvP,GACzBA,EAAEimB,kBAGF,IAAMC,EAAYlmB,EAAEgI,OAAoB1H,UACxCslB,EAAwB5lB,EAAEgI,QAC1B0c,EAAkC,MAARwB,EAAAA,EAAY,IAEtCtB,EAAqB,GACzB,EAAG,CAAClJ,EAAoBlH,EAAWrN,WAAW9P,SAExCkmB,EAAqBhO,EAAWA,YAAC,SAACrR,GACpC0mB,EAAqB1mB,GACrBwmB,EAA0B,GAC9B,EAAG,IAEG5J,EAAevL,EAAWA,YAAC,SAACvP,GAIlC,EAAG,IAEG+U,EAAiBxF,EAAAA,YAAY,SAACvP,GAChCA,EAAEimB,kBAEGjmB,EAAEgI,OAAO/O,SAASyH,WAIvBskB,EAAwBhlB,EAAEgI,OAC9B,EAAG,IAEGiN,EAAiB1F,EAAWA,YAAC,SAACvP,GAChCA,EAAEimB,kBAEFjB,EAAwB,KAC5B,EAAG,IAaH,IAAKltB,IAAW0c,EAAWrN,WAAW9P,OAElC,OADA2C,QAAQC,KAAK,eACNsa,sCAGX,GAAI8Q,EACA,OAAO9Q,EAAA2B,IAAA,MAAA,CAAAV,SAAM6P,IAGjB,IAAMpO,EAAoByE,GAAsB,EAAIA,EAAqB4J,EAEzE,IAAKpO,EAED,OADAld,QAAQiG,MAAM,yBACPsU,mDAIX,IAAM4R,EAAiC3R,EAInCG,EAAgB,GAOpB,OARkBoQ,KAEazkB,YAC3BqU,EAHcoQ,EAGczkB,WAM5BgV,EAAAC,KAAA0F,EAAA+B,SAAA,CAAAxH,SAAA,CACc,SAAT/X,GACG8W,EAAA2B,IAAA,MAAA,CAAKW,UAAWH,EAAO,qBAAoBlB,SACvCjB,EAAAA,IAAC6K,GACG,CAAA5P,WAAYyH,EACZzC,WAAYA,EACZ1c,OAAQA,EACR2L,MAjMhBA,GAAQA,EAAKuM,UACXuU,GACFA,EAAe1qB,QAAQ,SAACyH,GACtB,IAAMuC,EAAQJ,EAAKuM,SAAS4Q,UAAU,SAACpP,GAAiB,OAAAA,EAAKtY,KAAOoI,EAAMmC,KAAKvK,EAAE,IAClE,IAAX2K,IACFJ,EAAKuM,SAASnM,GAAM9I,EAAQuG,CAAAA,EAAAA,EAAMmC,MAEtC,GAIGA,GAuLaic,QA/MU,SAAC7b,EAAeuiB,GAC1C,IAAMC,EAAY9B,EAAe3D,UAAU,SAACpP,GAAS,OAAAA,EAAK/N,KAAKvK,KAAOktB,EAAQltB,EAAE,IAE7D,IAAfmtB,EACA9B,EAAe8B,GAAa,CAAExiB,MAAAA,EAAOJ,KAAI1I,EAAA,GAAOqrB,IAEhD7B,EAAe9pB,KAAK,CAAEoJ,MAAAA,EAAOJ,KAAI1I,EAAA,CAAA,EAAOqrB,KAG5C5B,EAAiB7U,GAAAA,OAAK4U,GAC1B,EAsMoB5E,WAAY8E,EACZtF,SAAU5N,EAAO7E,cAI7B4I,EAAAC,KAAA,MAAA,CAAK1T,MAAO,CAAE/B,SAAU,sBACpByU,MAAC0I,GAAY,CAAAtF,YAAa7f,EAAO+U,aAAayZ,WAAYzvB,OAAQA,EAAOQ,OAAQqkB,mBAAoBzE,EAAmB0E,kBAAmBA,EAAmBuB,cAAeA,GAAeK,mBAAoBA,EAAoBF,MA3J5N,WAChBiH,EAAsBgB,GACtBZ,EAA0B,GAC9B,EAwJoQvH,OAAQ,WAAM,OAAA0H,EAAQ,CAAEtgB,UAAW,MAAO,EAAE6Y,QAAS,WAAA,OAAMyH,EAAQ,CAAEtgB,UAAW,OAAQ,EAAE9G,KAAMA,IACxV6X,EAAAA,KAACiR,EAAAA,OAAO,CAAAd,kBAEJlR,EAAAA,IAAChC,EAAgB,CAAAG,WAAY5a,EAAOuU,uBACpCkI,EAAAA,IAAC5B,EAAgB,CAACK,KAAM,EAAGD,IAAK,MAGhCwB,EAAA2B,IAAA,eAAA,CAAcsQ,UAAW,EAAGluB,MAAO,YACnCic,EAAkB2B,IAAA,mBAAA,CAAApW,SAAU,CAAC,EAAG,IAAK,GAAIxH,MAAO,UAAWkuB,UAAW,KACtEjS,EAAA2B,IAAA,mBAAA,CAAkBpW,SAAU,CAAC,EAAG,EAAG,KAAMxH,MAAO,UAAWkuB,UAAW,KACtEjS,EAAAA,IAAkB,mBAAA,CAAAzU,SAAU,CAAC,EAAG,GAAI,KAAMxH,MAAO,UAAWkuB,UAAW,KACvEjS,MAACyC,EAAS,CACN8D,aAAcA,EACdtG,WAAY2R,EACZzR,eAAgBA,EAChBC,cAAeA,EACfuC,aAAcA,EACdC,cAAezC,EACfuC,kBAAmBA,EACnBlC,eAAgBA,EAChBE,eAAgBA,EAChBJ,cA5EE,SAAC7U,GACnBA,EAAEimB,kBAGEnB,GAAYA,EAAS5Q,SAAWlU,EAAEgI,OAAO/O,SAASyH,WAA6C,KAAhCV,EAAEgI,OAAO/O,SAASyH,YACjFokB,EAAS5Q,QAAQrS,MAAM4kB,IAASzmB,EAAEsJ,QAAU,GAAM,KAClDwb,EAAS5Q,QAAQrS,MAAM6kB,KAAU1mB,EAAEqJ,QAAO,KAC1Cyb,EAAS5Q,QAAQrS,MAAM+U,QAAU,QAEzC,EAoEoB1B,QAASA,EACTN,kBAAmB+G,EACnBvE,kBAAmBA,EACnBlP,eAAgBsM,EAAW5S,gBAC3ByV,KAAMA,EACN5Z,KAAMA,OAGd8W,EAAAA,WAAKyG,IAAK8J,EACNjjB,MAAO,CACH/B,SAAU,WACV6mB,QAAS,GACTjU,WAAY,UACZkU,WAAY,IACZtuB,MAAO,UACPuuB,SAAU,GACVjQ,QAASmO,EAAuB,QAAU,OAC1C0B,IAAK,IACLC,KAAM,IACN5pB,QAAS,IACZ0Y,SAEDjB,EACK2B,IAAA,MAAA,CAAAV,SAAAuP,GAAwBA,EAAqB9rB,SAASyH,mBAO/E,iBEpWA,SAAe6S,GAAG,IAAA7G,EAAS6G,EAAT7G,UAAWsX,EAASzQ,EAATyQ,UAAWlsB,EAAMyb,EAANzb,OAAQgvB,EAAKvT,EAALuT,MAAOrpB,EAAI8V,EAAJ9V,KAErDqQ,EAA4DC,EAAQA,SAAS,IAAtE0W,EAAsB3W,EAAA,GAAE4W,EAAyB5W,EACxD,GAAAG,EAA8BF,gBAAc7W,GAArC6vB,EAAO9Y,EAAE+Y,GAAAA,EAAU/Y,KAM1B,OAJA2B,EAASA,UAAC,WACRoX,EAAWhD,EACb,EAAG,CAACA,IAECA,GAActX,EAIdA,GCkFS,SAAiBuD,GAC7B,GAAmB,iBAARA,GAA4B,OAARA,EAAc,OAAY,EAEzD,IAAMJ,EAAWI,EAEjB,OACIoJ,MAAMC,QAAQzJ,EAASE,YACvBsJ,MAAMC,QAAQzJ,EAASG,WACvBqJ,MAAMC,QAAQzJ,EAAShZ,SACoB,iBAApCgZ,EAASe,wBACoB,OAApCf,EAASe,wBAC2E,iBAA5Ef,EAASe,uBAAmDqW,aACY,iBAAxEpX,EAASe,uBAAmDsW,SACW,iBAAvErX,EAASe,uBAAmDuW,QACW,iBAAvEtX,EAASe,uBAAmDwW,QACvC,iBAAtBvX,EAASY,UAChB4I,MAAMC,QAAQzJ,EAASC,SACO,iBAAvBD,EAASkB,SAExB,CDrGqBsW,CAAiBrD,GAMlCzP,EAAAA,IAACgK,GAAyB,CAAA/I,SACxBF,cAAKuB,UAAcH,EAAO,oBAAmB,KAAa,SAATjZ,EAAiBiZ,EAAO4Q,KAAO,IAC5E9R,SAAA,CAAAjB,EAAAA,IAACuP,GAAe,CAAAY,0BAA2BA,EAA2BD,uBAAwBA,EAAwBqC,MAAOA,EAAO9C,UAAW+C,EAASra,UAAWA,EAAW5U,OAAQA,EAAQ2F,KAAMA,IACtM6X,EAAAA,KAAK,MAAA,CAAAuB,UAAWH,EAAOgH,KAAIlI,SAAA,CACzBjB,EAAAA,IAAK,MAAA,CAAArb,GAAG,wBAAuBsc,SAC7BjB,EAAAA,IAAK,MAAA,CAAArb,GAAG,UAAS,YAAW,UAAU6iB,MAAM,6BAA6BC,QAAQ,oBAC/ExG,SAAAjB,EAAAA,IAAA,OAAA,CAAM0H,EAAE,0IAA0IC,UAAU,yBAAyBC,KAAK,gBAG9L5H,EAAAA,WAAKrb,GAAG,sBAAqBsc,SAC3BF,cAAKpc,GAAG,UAAS,YAAW,UAAU6iB,MAAM,6BAA6BC,QAAQ,oBAAmBxG,SAAA,CAClGjB,EAAAA,YAAM0H,EAAE,kWAAkWC,UAAU,yBAAyBC,KAAK,SAClZ5H,EAAAA,IAAA,OAAA,CAAM0H,EAAE,kzBAAkzBC,UAAU,yBAAyBC,KAAK,cAGt2B5H,EAAAA,WAAKrb,GAAG,6BAA4Bsc,SAClCF,EAAAA,KAAK,MAAA,CAAApc,GAAG,sBAAoB,UAAU6iB,MAAM,6BAA6BC,QAAQ,8BAC/EzH,EAAAA,IAAM,OAAA,CAAA0H,EAAE,0cAA0cC,UAAU,2BAA2BC,KAAK,SAC5f5H,EAAAA,YAAM0H,EAAE,6VAA6VC,UAAU,2BAA2BC,KAAK,cAGnZ5H,EAAK2B,IAAA,MAAA,CAAAhd,GAAG,oCACNoc,EAAAA,KAAK,MAAA,CAAApc,GAAG,sBAAoB,UAAU6iB,MAAM,6BAA6BC,QAAQ,2BAC/EzH,EAAM2B,IAAA,OAAA,CAAA+F,EAAE,+jFAA+jFC,UAAU,2BAA2BC,KAAK,SACjnF5H,EAAAA,YAAM0H,EAAE,whBAAwhBC,UAAU,2BAA2BC,KAAK,SAC1kB5H,EAAAA,IAAA,OAAA,CAAM0H,EAAE,6IAA6IC,UAAU,2BAA2BC,KAAK,cAGnM5H,EAAAA,WAAKrb,GAAG,2BAA0Bsc,SAChCjB,aAAKrb,GAAG,UAAS,YAAW,UAAU6iB,MAAM,6BAA6BC,QAAQ,mBAAkBxG,SACjGjB,cAAM0H,EAAE,sgCAAsgCC,UAAU,2BAA2BC,KAAK,aAG5jC5H,EAAAA,IAAK,MAAA,CAAArb,GAAG,2CACNoc,EAAAA,KAAK,MAAA,CAAApc,GAAG,sBAAoB,UAAU6iB,MAAM,6BAA6BC,QAAQ,iBAC/ExG,SAAA,CAAAjB,EAAAA,IAAA,OAAA,CAAM0H,EAAE,qYAAqYC,UAAU,sBAAsBC,KAAK,YAClb5H,EAAAA,IAAM,OAAA,CAAA0H,EAAE,8dAA8dC,UAAU,sBAAsBC,KAAK,YAC3gB5H,EAAAA,YAAM0H,EAAE,whBAAwhBC,UAAU,sBAAsBC,KAAK,YACrkB5H,EAAA2B,IAAA,OAAA,CAAM+F,EAAE,6HAA6HC,UAAU,sBAAsBC,KAAK,YAC1K5H,EAAM2B,IAAA,OAAA,CAAA+F,EAAE,8GAA8GC,UAAU,sBAAsBC,KAAK,iBAG/J5H,EAAA2B,IAAA,MAAA,CAAKhd,GAAG,2BAA0Bsc,SAChCF,cAAKpc,GAAG,UAAS,YAAW,UAAU6iB,MAAM,6BAA6BC,QAAQ,iBAAgBxG,SAAA,CAC/FjB,cAAM0H,EAAE,oUAAoUC,UAAU,uBAAuBC,KAAK,SAClX5H,EAAAA,IAAA,OAAA,CAAM0H,EAAE,8IAA8IC,UAAU,uBAAuBC,KAAK,SAC5L5H,EAAAA,IAAM,OAAA,CAAA0H,EAAE,4GAA4GC,UAAU,uBAAuBC,KAAK,cAG9J5H,EAAAA,IAAA,MAAA,CAAKrb,GAAG,2BACNsc,SAAAjB,EAAAA,IAAA,MAAA,CAAKrb,GAAG,UAAoB,YAAA,UAAU6iB,MAAM,6BAA6BC,QAAQ,oBAAmBxG,SAClGjB,cAAM0H,EAAE,0qCAA0qCC,UAAU,2BAA2BC,KAAK,aAGhuC5H,EAAK2B,IAAA,MAAA,CAAAhd,GAAG,4CACNoc,EAAAA,KAAK,MAAA,CAAApc,GAAG,sBAAoB,UAAU8iB,QAAQ,kBAC5CxG,SAAA,CAAAjB,EAAA2B,IAAA,UAAA,CAASgG,UAAU,wDAAwDC,KAAK,OAAOE,GAAG,QAAQC,GAAG,MAAMC,GAAG,OAAOC,GAAG,UACxHjI,EAAS2B,IAAA,UAAA,CAAAgG,UAAU,yDAAyDC,KAAK,OAAOE,GAAG,QAAQC,GAAG,MAAMC,GAAG,QAAQC,GAAG,SAC1HjI,EAAA2B,IAAA,UAAA,CAASgG,UAAU,uDAAuDC,KAAK,OAAOE,GAAG,KAAKC,GAAG,QAAQC,GAAG,OAAOC,GAAG,UACtHjI,iBAAS2H,UAAU,wDAAwDC,KAAK,OAAOE,GAAG,MAAMC,GAAG,QAAQC,GAAG,QAAQC,GAAG,SACzHjI,EAAM2B,IAAA,OAAA,CAAAiG,KAAK,OAAOF,EAAE,oiBAjE9BjiB,QAAQiG,MAAM,2CAEf,OANCjG,QAAQiG,MAAM,gDACP,KAgFX"}